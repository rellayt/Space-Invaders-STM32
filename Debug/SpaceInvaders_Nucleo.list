
SpaceInvaders_Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a960  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006d4  0800ab28  0800ab28  0001ab28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b1fc  0800b1fc  00020394  2**0
                  CONTENTS
  4 .ARM          00000008  0800b1fc  0800b1fc  0001b1fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b204  0800b204  00020394  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b204  0800b204  0001b204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b208  0800b208  0001b208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000394  20000000  0800b20c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d50  20000394  0800b5a0  00020394  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200020e4  0800b5a0  000220e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020394  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017ca8  00000000  00000000  000203c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000033c1  00000000  00000000  0003806c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014d8  00000000  00000000  0003b430  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012f0  00000000  00000000  0003c908  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000268e2  00000000  00000000  0003dbf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011fb1  00000000  00000000  000644da  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000eef7d  00000000  00000000  0007648b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00165408  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005520  00000000  00000000  00165484  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000394 	.word	0x20000394
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800ab10 	.word	0x0800ab10

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000398 	.word	0x20000398
 8000204:	0800ab10 	.word	0x0800ab10

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b972 	b.w	8000504 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	4688      	mov	r8, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14b      	bne.n	80002de <__udivmoddi4+0xa6>
 8000246:	428a      	cmp	r2, r1
 8000248:	4615      	mov	r5, r2
 800024a:	d967      	bls.n	800031c <__udivmoddi4+0xe4>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0720 	rsb	r7, r2, #32
 8000256:	fa01 f302 	lsl.w	r3, r1, r2
 800025a:	fa20 f707 	lsr.w	r7, r0, r7
 800025e:	4095      	lsls	r5, r2
 8000260:	ea47 0803 	orr.w	r8, r7, r3
 8000264:	4094      	lsls	r4, r2
 8000266:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000270:	fa1f fc85 	uxth.w	ip, r5
 8000274:	fb0e 8817 	mls	r8, lr, r7, r8
 8000278:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027c:	fb07 f10c 	mul.w	r1, r7, ip
 8000280:	4299      	cmp	r1, r3
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x60>
 8000284:	18eb      	adds	r3, r5, r3
 8000286:	f107 30ff 	add.w	r0, r7, #4294967295
 800028a:	f080 811b 	bcs.w	80004c4 <__udivmoddi4+0x28c>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 8118 	bls.w	80004c4 <__udivmoddi4+0x28c>
 8000294:	3f02      	subs	r7, #2
 8000296:	442b      	add	r3, r5
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002ac:	45a4      	cmp	ip, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x8c>
 80002b0:	192c      	adds	r4, r5, r4
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x290>
 80002ba:	45a4      	cmp	ip, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x290>
 80002c0:	3802      	subs	r0, #2
 80002c2:	442c      	add	r4, r5
 80002c4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c8:	eba4 040c 	sub.w	r4, r4, ip
 80002cc:	2700      	movs	r7, #0
 80002ce:	b11e      	cbz	r6, 80002d8 <__udivmoddi4+0xa0>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c6 4300 	strd	r4, r3, [r6]
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xbe>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80eb 	beq.w	80004be <__udivmoddi4+0x286>
 80002e8:	2700      	movs	r7, #0
 80002ea:	e9c6 0100 	strd	r0, r1, [r6]
 80002ee:	4638      	mov	r0, r7
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f783 	clz	r7, r3
 80002fa:	2f00      	cmp	r7, #0
 80002fc:	d147      	bne.n	800038e <__udivmoddi4+0x156>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd0>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80fa 	bhi.w	80004fc <__udivmoddi4+0x2c4>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	4698      	mov	r8, r3
 8000312:	2e00      	cmp	r6, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa0>
 8000316:	e9c6 4800 	strd	r4, r8, [r6]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa0>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xe8>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 808f 	bne.w	8000448 <__udivmoddi4+0x210>
 800032a:	1b49      	subs	r1, r1, r5
 800032c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000330:	fa1f f885 	uxth.w	r8, r5
 8000334:	2701      	movs	r7, #1
 8000336:	fbb1 fcfe 	udiv	ip, r1, lr
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000340:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000344:	fb08 f10c 	mul.w	r1, r8, ip
 8000348:	4299      	cmp	r1, r3
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x124>
 800034c:	18eb      	adds	r3, r5, r3
 800034e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4299      	cmp	r1, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2bc>
 800035a:	4684      	mov	ip, r0
 800035c:	1a59      	subs	r1, r3, r1
 800035e:	b2a3      	uxth	r3, r4
 8000360:	fbb1 f0fe 	udiv	r0, r1, lr
 8000364:	fb0e 1410 	mls	r4, lr, r0, r1
 8000368:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800036c:	fb08 f800 	mul.w	r8, r8, r0
 8000370:	45a0      	cmp	r8, r4
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x14c>
 8000374:	192c      	adds	r4, r5, r4
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x14a>
 800037c:	45a0      	cmp	r8, r4
 800037e:	f200 80b6 	bhi.w	80004ee <__udivmoddi4+0x2b6>
 8000382:	4618      	mov	r0, r3
 8000384:	eba4 0408 	sub.w	r4, r4, r8
 8000388:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800038c:	e79f      	b.n	80002ce <__udivmoddi4+0x96>
 800038e:	f1c7 0c20 	rsb	ip, r7, #32
 8000392:	40bb      	lsls	r3, r7
 8000394:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000398:	ea4e 0e03 	orr.w	lr, lr, r3
 800039c:	fa01 f407 	lsl.w	r4, r1, r7
 80003a0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003ac:	4325      	orrs	r5, r4
 80003ae:	fbb3 f9f8 	udiv	r9, r3, r8
 80003b2:	0c2c      	lsrs	r4, r5, #16
 80003b4:	fb08 3319 	mls	r3, r8, r9, r3
 80003b8:	fa1f fa8e 	uxth.w	sl, lr
 80003bc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c0:	fb09 f40a 	mul.w	r4, r9, sl
 80003c4:	429c      	cmp	r4, r3
 80003c6:	fa02 f207 	lsl.w	r2, r2, r7
 80003ca:	fa00 f107 	lsl.w	r1, r0, r7
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1e 0303 	adds.w	r3, lr, r3
 80003d4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d8:	f080 8087 	bcs.w	80004ea <__udivmoddi4+0x2b2>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f240 8084 	bls.w	80004ea <__udivmoddi4+0x2b2>
 80003e2:	f1a9 0902 	sub.w	r9, r9, #2
 80003e6:	4473      	add	r3, lr
 80003e8:	1b1b      	subs	r3, r3, r4
 80003ea:	b2ad      	uxth	r5, r5
 80003ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f0:	fb08 3310 	mls	r3, r8, r0, r3
 80003f4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003fc:	45a2      	cmp	sl, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1e 0404 	adds.w	r4, lr, r4
 8000404:	f100 33ff 	add.w	r3, r0, #4294967295
 8000408:	d26b      	bcs.n	80004e2 <__udivmoddi4+0x2aa>
 800040a:	45a2      	cmp	sl, r4
 800040c:	d969      	bls.n	80004e2 <__udivmoddi4+0x2aa>
 800040e:	3802      	subs	r0, #2
 8000410:	4474      	add	r4, lr
 8000412:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000416:	fba0 8902 	umull	r8, r9, r0, r2
 800041a:	eba4 040a 	sub.w	r4, r4, sl
 800041e:	454c      	cmp	r4, r9
 8000420:	46c2      	mov	sl, r8
 8000422:	464b      	mov	r3, r9
 8000424:	d354      	bcc.n	80004d0 <__udivmoddi4+0x298>
 8000426:	d051      	beq.n	80004cc <__udivmoddi4+0x294>
 8000428:	2e00      	cmp	r6, #0
 800042a:	d069      	beq.n	8000500 <__udivmoddi4+0x2c8>
 800042c:	ebb1 050a 	subs.w	r5, r1, sl
 8000430:	eb64 0403 	sbc.w	r4, r4, r3
 8000434:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000438:	40fd      	lsrs	r5, r7
 800043a:	40fc      	lsrs	r4, r7
 800043c:	ea4c 0505 	orr.w	r5, ip, r5
 8000440:	e9c6 5400 	strd	r5, r4, [r6]
 8000444:	2700      	movs	r7, #0
 8000446:	e747      	b.n	80002d8 <__udivmoddi4+0xa0>
 8000448:	f1c2 0320 	rsb	r3, r2, #32
 800044c:	fa20 f703 	lsr.w	r7, r0, r3
 8000450:	4095      	lsls	r5, r2
 8000452:	fa01 f002 	lsl.w	r0, r1, r2
 8000456:	fa21 f303 	lsr.w	r3, r1, r3
 800045a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045e:	4338      	orrs	r0, r7
 8000460:	0c01      	lsrs	r1, r0, #16
 8000462:	fbb3 f7fe 	udiv	r7, r3, lr
 8000466:	fa1f f885 	uxth.w	r8, r5
 800046a:	fb0e 3317 	mls	r3, lr, r7, r3
 800046e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000472:	fb07 f308 	mul.w	r3, r7, r8
 8000476:	428b      	cmp	r3, r1
 8000478:	fa04 f402 	lsl.w	r4, r4, r2
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x256>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f107 3cff 	add.w	ip, r7, #4294967295
 8000484:	d22f      	bcs.n	80004e6 <__udivmoddi4+0x2ae>
 8000486:	428b      	cmp	r3, r1
 8000488:	d92d      	bls.n	80004e6 <__udivmoddi4+0x2ae>
 800048a:	3f02      	subs	r7, #2
 800048c:	4429      	add	r1, r5
 800048e:	1acb      	subs	r3, r1, r3
 8000490:	b281      	uxth	r1, r0
 8000492:	fbb3 f0fe 	udiv	r0, r3, lr
 8000496:	fb0e 3310 	mls	r3, lr, r0, r3
 800049a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049e:	fb00 f308 	mul.w	r3, r0, r8
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d907      	bls.n	80004b6 <__udivmoddi4+0x27e>
 80004a6:	1869      	adds	r1, r5, r1
 80004a8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ac:	d217      	bcs.n	80004de <__udivmoddi4+0x2a6>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d915      	bls.n	80004de <__udivmoddi4+0x2a6>
 80004b2:	3802      	subs	r0, #2
 80004b4:	4429      	add	r1, r5
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004bc:	e73b      	b.n	8000336 <__udivmoddi4+0xfe>
 80004be:	4637      	mov	r7, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e709      	b.n	80002d8 <__udivmoddi4+0xa0>
 80004c4:	4607      	mov	r7, r0
 80004c6:	e6e7      	b.n	8000298 <__udivmoddi4+0x60>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x8c>
 80004cc:	4541      	cmp	r1, r8
 80004ce:	d2ab      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d4:	eb69 020e 	sbc.w	r2, r9, lr
 80004d8:	3801      	subs	r0, #1
 80004da:	4613      	mov	r3, r2
 80004dc:	e7a4      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004de:	4660      	mov	r0, ip
 80004e0:	e7e9      	b.n	80004b6 <__udivmoddi4+0x27e>
 80004e2:	4618      	mov	r0, r3
 80004e4:	e795      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e6:	4667      	mov	r7, ip
 80004e8:	e7d1      	b.n	800048e <__udivmoddi4+0x256>
 80004ea:	4681      	mov	r9, r0
 80004ec:	e77c      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004ee:	3802      	subs	r0, #2
 80004f0:	442c      	add	r4, r5
 80004f2:	e747      	b.n	8000384 <__udivmoddi4+0x14c>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	442b      	add	r3, r5
 80004fa:	e72f      	b.n	800035c <__udivmoddi4+0x124>
 80004fc:	4638      	mov	r0, r7
 80004fe:	e708      	b.n	8000312 <__udivmoddi4+0xda>
 8000500:	4637      	mov	r7, r6
 8000502:	e6e9      	b.n	80002d8 <__udivmoddi4+0xa0>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <MENU>:
#define LCD_CLS_2_8_Lines lcd_clear_2_8_lines();
#define LCD_CLS_3_8_Lines lcd_clear_3_8_lines();
#define LCD_CLS_4_8_Lines lcd_clear_4_8_lines();
#define LCD_Clear lcd_cls();
#define LCD_Blink lcd_send_cmd (0x0F);
void MENU() {
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
	getJoystickLed();
 800050c:	f002 fcfc 	bl	8002f08 <getJoystickLed>
	if (animationRound >= -10)
 8000510:	4b98      	ldr	r3, [pc, #608]	; (8000774 <MENU+0x26c>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	f113 0f0a 	cmn.w	r3, #10
 8000518:	db04      	blt.n	8000524 <MENU+0x1c>
		animationRound--;
 800051a:	4b96      	ldr	r3, [pc, #600]	; (8000774 <MENU+0x26c>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	3b01      	subs	r3, #1
 8000520:	4a94      	ldr	r2, [pc, #592]	; (8000774 <MENU+0x26c>)
 8000522:	6013      	str	r3, [r2, #0]
	if (intro) {
 8000524:	4b94      	ldr	r3, [pc, #592]	; (8000778 <MENU+0x270>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d004      	beq.n	8000536 <MENU+0x2e>
		introAnimation(animationRound);
 800052c:	4b91      	ldr	r3, [pc, #580]	; (8000774 <MENU+0x26c>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4618      	mov	r0, r3
 8000532:	f002 f8cd 	bl	80026d0 <introAnimation>
	}

	Menu_Conditions();
 8000536:	f000 fe53 	bl	80011e0 <Menu_Conditions>
	if (DOWN()) {
 800053a:	f002 fc75 	bl	8002e28 <DOWN>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	f000 809b 	beq.w	800067c <MENU+0x174>

		if (intro) {
 8000546:	4b8c      	ldr	r3, [pc, #560]	; (8000778 <MENU+0x270>)
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d00a      	beq.n	8000564 <MENU+0x5c>
			intro = false;
 800054e:	4b8a      	ldr	r3, [pc, #552]	; (8000778 <MENU+0x270>)
 8000550:	2200      	movs	r2, #0
 8000552:	701a      	strb	r2, [r3, #0]
			mainMenu = true;
 8000554:	4b89      	ldr	r3, [pc, #548]	; (800077c <MENU+0x274>)
 8000556:	2201      	movs	r2, #1
 8000558:	701a      	strb	r2, [r3, #0]
			lcd_cls();
 800055a:	f003 fc2b 	bl	8003db4 <lcd_cls>
			mainMenuIndex = 0;
 800055e:	4b88      	ldr	r3, [pc, #544]	; (8000780 <MENU+0x278>)
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
		}
		if (!intro && mainMenuIndex == 50 && !blockDown && !levelMenu
 8000564:	4b84      	ldr	r3, [pc, #528]	; (8000778 <MENU+0x270>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	f083 0301 	eor.w	r3, r3, #1
 800056c:	b2db      	uxtb	r3, r3
 800056e:	2b00      	cmp	r3, #0
 8000570:	d011      	beq.n	8000596 <MENU+0x8e>
 8000572:	4b83      	ldr	r3, [pc, #524]	; (8000780 <MENU+0x278>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	2b32      	cmp	r3, #50	; 0x32
 8000578:	d10d      	bne.n	8000596 <MENU+0x8e>
 800057a:	4b82      	ldr	r3, [pc, #520]	; (8000784 <MENU+0x27c>)
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	f083 0301 	eor.w	r3, r3, #1
 8000582:	b2db      	uxtb	r3, r3
 8000584:	2b00      	cmp	r3, #0
 8000586:	d006      	beq.n	8000596 <MENU+0x8e>
 8000588:	4b7f      	ldr	r3, [pc, #508]	; (8000788 <MENU+0x280>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	f083 0301 	eor.w	r3, r3, #1
 8000590:	b2db      	uxtb	r3, r3
 8000592:	2b00      	cmp	r3, #0
 8000594:	d111      	bne.n	80005ba <MENU+0xb2>
				|| mainMenuIndex < 5 && !blockDown && !levelMenu) {
 8000596:	4b7a      	ldr	r3, [pc, #488]	; (8000780 <MENU+0x278>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	2b04      	cmp	r3, #4
 800059c:	dc16      	bgt.n	80005cc <MENU+0xc4>
 800059e:	4b79      	ldr	r3, [pc, #484]	; (8000784 <MENU+0x27c>)
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	f083 0301 	eor.w	r3, r3, #1
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d00f      	beq.n	80005cc <MENU+0xc4>
 80005ac:	4b76      	ldr	r3, [pc, #472]	; (8000788 <MENU+0x280>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	f083 0301 	eor.w	r3, r3, #1
 80005b4:	b2db      	uxtb	r3, r3
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d008      	beq.n	80005cc <MENU+0xc4>
			mainMenuIndex = mainMenuIndexTemp;
 80005ba:	4b74      	ldr	r3, [pc, #464]	; (800078c <MENU+0x284>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4a70      	ldr	r2, [pc, #448]	; (8000780 <MENU+0x278>)
 80005c0:	6013      	str	r3, [r2, #0]
			mainMenuIndex++;
 80005c2:	4b6f      	ldr	r3, [pc, #444]	; (8000780 <MENU+0x278>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	3301      	adds	r3, #1
 80005c8:	4a6d      	ldr	r2, [pc, #436]	; (8000780 <MENU+0x278>)
 80005ca:	6013      	str	r3, [r2, #0]
		}

		if (levelMenu && levelMenuIndexTemp < 3 && !blockDown
 80005cc:	4b6e      	ldr	r3, [pc, #440]	; (8000788 <MENU+0x280>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d00a      	beq.n	80005ea <MENU+0xe2>
 80005d4:	4b6e      	ldr	r3, [pc, #440]	; (8000790 <MENU+0x288>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	2b02      	cmp	r3, #2
 80005da:	dc06      	bgt.n	80005ea <MENU+0xe2>
 80005dc:	4b69      	ldr	r3, [pc, #420]	; (8000784 <MENU+0x27c>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	f083 0301 	eor.w	r3, r3, #1
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d10e      	bne.n	8000608 <MENU+0x100>
				|| levelMenu && levelMenuIndex == 50 && !blockDown) {
 80005ea:	4b67      	ldr	r3, [pc, #412]	; (8000788 <MENU+0x280>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d013      	beq.n	800061a <MENU+0x112>
 80005f2:	4b68      	ldr	r3, [pc, #416]	; (8000794 <MENU+0x28c>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	2b32      	cmp	r3, #50	; 0x32
 80005f8:	d10f      	bne.n	800061a <MENU+0x112>
 80005fa:	4b62      	ldr	r3, [pc, #392]	; (8000784 <MENU+0x27c>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	f083 0301 	eor.w	r3, r3, #1
 8000602:	b2db      	uxtb	r3, r3
 8000604:	2b00      	cmp	r3, #0
 8000606:	d008      	beq.n	800061a <MENU+0x112>
			levelMenuIndex = levelMenuIndexTemp;
 8000608:	4b61      	ldr	r3, [pc, #388]	; (8000790 <MENU+0x288>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a61      	ldr	r2, [pc, #388]	; (8000794 <MENU+0x28c>)
 800060e:	6013      	str	r3, [r2, #0]
			levelMenuIndex++;
 8000610:	4b60      	ldr	r3, [pc, #384]	; (8000794 <MENU+0x28c>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	3301      	adds	r3, #1
 8000616:	4a5f      	ldr	r2, [pc, #380]	; (8000794 <MENU+0x28c>)
 8000618:	6013      	str	r3, [r2, #0]
		}

		if (hiscoreMenu && hiscoreMenuIndexTemp < 5) {
 800061a:	4b5f      	ldr	r3, [pc, #380]	; (8000798 <MENU+0x290>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d00c      	beq.n	800063c <MENU+0x134>
 8000622:	4b5e      	ldr	r3, [pc, #376]	; (800079c <MENU+0x294>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	2b04      	cmp	r3, #4
 8000628:	dc08      	bgt.n	800063c <MENU+0x134>
			hiscoreMenuIndex = hiscoreMenuIndexTemp;
 800062a:	4b5c      	ldr	r3, [pc, #368]	; (800079c <MENU+0x294>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4a5c      	ldr	r2, [pc, #368]	; (80007a0 <MENU+0x298>)
 8000630:	6013      	str	r3, [r2, #0]
			hiscoreMenuIndex++;
 8000632:	4b5b      	ldr	r3, [pc, #364]	; (80007a0 <MENU+0x298>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	3301      	adds	r3, #1
 8000638:	4a59      	ldr	r2, [pc, #356]	; (80007a0 <MENU+0x298>)
 800063a:	6013      	str	r3, [r2, #0]
		}

		if (creditsMenu && creditsMenuIndexTemp < 5) {
 800063c:	4b59      	ldr	r3, [pc, #356]	; (80007a4 <MENU+0x29c>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d00c      	beq.n	800065e <MENU+0x156>
 8000644:	4b58      	ldr	r3, [pc, #352]	; (80007a8 <MENU+0x2a0>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	2b04      	cmp	r3, #4
 800064a:	dc08      	bgt.n	800065e <MENU+0x156>
			creditsMenuIndex = creditsMenuIndexTemp;
 800064c:	4b56      	ldr	r3, [pc, #344]	; (80007a8 <MENU+0x2a0>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a56      	ldr	r2, [pc, #344]	; (80007ac <MENU+0x2a4>)
 8000652:	6013      	str	r3, [r2, #0]
			creditsMenuIndex++;
 8000654:	4b55      	ldr	r3, [pc, #340]	; (80007ac <MENU+0x2a4>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	3301      	adds	r3, #1
 800065a:	4a54      	ldr	r2, [pc, #336]	; (80007ac <MENU+0x2a4>)
 800065c:	6013      	str	r3, [r2, #0]
		}
		if (creditsMenuMarked && creditsMenuIndexTemp > 0
 800065e:	4b54      	ldr	r3, [pc, #336]	; (80007b0 <MENU+0x2a8>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d00a      	beq.n	800067c <MENU+0x174>
 8000666:	4b50      	ldr	r3, [pc, #320]	; (80007a8 <MENU+0x2a0>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	2b00      	cmp	r3, #0
 800066c:	dd06      	ble.n	800067c <MENU+0x174>
				&& creditsMenuIndexTemp <= 3) {
 800066e:	4b4e      	ldr	r3, [pc, #312]	; (80007a8 <MENU+0x2a0>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	2b03      	cmp	r3, #3
 8000674:	dc02      	bgt.n	800067c <MENU+0x174>
			backPicked = true;
 8000676:	4b4f      	ldr	r3, [pc, #316]	; (80007b4 <MENU+0x2ac>)
 8000678:	2201      	movs	r2, #1
 800067a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (UP()) {
 800067c:	f002 fbc4 	bl	8002e08 <UP>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	f000 80ba 	beq.w	80007fc <MENU+0x2f4>
		if (!intro && mainMenuIndex == 50 && !blockUp
 8000688:	4b3b      	ldr	r3, [pc, #236]	; (8000778 <MENU+0x270>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	f083 0301 	eor.w	r3, r3, #1
 8000690:	b2db      	uxtb	r3, r3
 8000692:	2b00      	cmp	r3, #0
 8000694:	d00a      	beq.n	80006ac <MENU+0x1a4>
 8000696:	4b3a      	ldr	r3, [pc, #232]	; (8000780 <MENU+0x278>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	2b32      	cmp	r3, #50	; 0x32
 800069c:	d106      	bne.n	80006ac <MENU+0x1a4>
 800069e:	4b46      	ldr	r3, [pc, #280]	; (80007b8 <MENU+0x2b0>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	f083 0301 	eor.w	r3, r3, #1
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d10a      	bne.n	80006c2 <MENU+0x1ba>
				|| mainMenuIndex > 0 && !blockUp) {
 80006ac:	4b34      	ldr	r3, [pc, #208]	; (8000780 <MENU+0x278>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	dd0f      	ble.n	80006d4 <MENU+0x1cc>
 80006b4:	4b40      	ldr	r3, [pc, #256]	; (80007b8 <MENU+0x2b0>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	f083 0301 	eor.w	r3, r3, #1
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d008      	beq.n	80006d4 <MENU+0x1cc>
			mainMenuIndex = mainMenuIndexTemp;
 80006c2:	4b32      	ldr	r3, [pc, #200]	; (800078c <MENU+0x284>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4a2e      	ldr	r2, [pc, #184]	; (8000780 <MENU+0x278>)
 80006c8:	6013      	str	r3, [r2, #0]
			mainMenuIndex--;
 80006ca:	4b2d      	ldr	r3, [pc, #180]	; (8000780 <MENU+0x278>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	3b01      	subs	r3, #1
 80006d0:	4a2b      	ldr	r2, [pc, #172]	; (8000780 <MENU+0x278>)
 80006d2:	6013      	str	r3, [r2, #0]
		}
		if (levelMenu && levelMenuIndexTemp > 0 && !blockUp
 80006d4:	4b2c      	ldr	r3, [pc, #176]	; (8000788 <MENU+0x280>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d00a      	beq.n	80006f2 <MENU+0x1ea>
 80006dc:	4b2c      	ldr	r3, [pc, #176]	; (8000790 <MENU+0x288>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	dd06      	ble.n	80006f2 <MENU+0x1ea>
 80006e4:	4b34      	ldr	r3, [pc, #208]	; (80007b8 <MENU+0x2b0>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	f083 0301 	eor.w	r3, r3, #1
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d10e      	bne.n	8000710 <MENU+0x208>
				|| levelMenuIndex == 50 && levelMenu && !blockUp) {
 80006f2:	4b28      	ldr	r3, [pc, #160]	; (8000794 <MENU+0x28c>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	2b32      	cmp	r3, #50	; 0x32
 80006f8:	d113      	bne.n	8000722 <MENU+0x21a>
 80006fa:	4b23      	ldr	r3, [pc, #140]	; (8000788 <MENU+0x280>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d00f      	beq.n	8000722 <MENU+0x21a>
 8000702:	4b2d      	ldr	r3, [pc, #180]	; (80007b8 <MENU+0x2b0>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	f083 0301 	eor.w	r3, r3, #1
 800070a:	b2db      	uxtb	r3, r3
 800070c:	2b00      	cmp	r3, #0
 800070e:	d008      	beq.n	8000722 <MENU+0x21a>
			levelMenuIndex = levelMenuIndexTemp;
 8000710:	4b1f      	ldr	r3, [pc, #124]	; (8000790 <MENU+0x288>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a1f      	ldr	r2, [pc, #124]	; (8000794 <MENU+0x28c>)
 8000716:	6013      	str	r3, [r2, #0]
			levelMenuIndex--;
 8000718:	4b1e      	ldr	r3, [pc, #120]	; (8000794 <MENU+0x28c>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	3b01      	subs	r3, #1
 800071e:	4a1d      	ldr	r2, [pc, #116]	; (8000794 <MENU+0x28c>)
 8000720:	6013      	str	r3, [r2, #0]
		}
		if (hiscoreMenu && hiscoreMenuIndexTemp > 0 && !blockUp
 8000722:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <MENU+0x290>)
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d00a      	beq.n	8000740 <MENU+0x238>
 800072a:	4b1c      	ldr	r3, [pc, #112]	; (800079c <MENU+0x294>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	2b00      	cmp	r3, #0
 8000730:	dd06      	ble.n	8000740 <MENU+0x238>
 8000732:	4b21      	ldr	r3, [pc, #132]	; (80007b8 <MENU+0x2b0>)
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	f083 0301 	eor.w	r3, r3, #1
 800073a:	b2db      	uxtb	r3, r3
 800073c:	2b00      	cmp	r3, #0
 800073e:	d10b      	bne.n	8000758 <MENU+0x250>
				|| hiscoreMenuIndex == 50 && hiscoreMenu && blockUp) {
 8000740:	4b17      	ldr	r3, [pc, #92]	; (80007a0 <MENU+0x298>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	2b32      	cmp	r3, #50	; 0x32
 8000746:	d110      	bne.n	800076a <MENU+0x262>
 8000748:	4b13      	ldr	r3, [pc, #76]	; (8000798 <MENU+0x290>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d00c      	beq.n	800076a <MENU+0x262>
 8000750:	4b19      	ldr	r3, [pc, #100]	; (80007b8 <MENU+0x2b0>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d008      	beq.n	800076a <MENU+0x262>
			hiscoreMenuIndex = hiscoreMenuIndexTemp;
 8000758:	4b10      	ldr	r3, [pc, #64]	; (800079c <MENU+0x294>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a10      	ldr	r2, [pc, #64]	; (80007a0 <MENU+0x298>)
 800075e:	6013      	str	r3, [r2, #0]
			hiscoreMenuIndex--;
 8000760:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <MENU+0x298>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	3b01      	subs	r3, #1
 8000766:	4a0e      	ldr	r2, [pc, #56]	; (80007a0 <MENU+0x298>)
 8000768:	6013      	str	r3, [r2, #0]
		}

		if (creditsMenu && creditsMenuIndexTemp > 0 && !blockUp
 800076a:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <MENU+0x29c>)
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d02f      	beq.n	80007d2 <MENU+0x2ca>
 8000772:	e023      	b.n	80007bc <MENU+0x2b4>
 8000774:	20000014 	.word	0x20000014
 8000778:	20000018 	.word	0x20000018
 800077c:	200003cb 	.word	0x200003cb
 8000780:	20000000 	.word	0x20000000
 8000784:	2000001b 	.word	0x2000001b
 8000788:	200003cd 	.word	0x200003cd
 800078c:	20000408 	.word	0x20000408
 8000790:	20000008 	.word	0x20000008
 8000794:	20000004 	.word	0x20000004
 8000798:	200003c8 	.word	0x200003c8
 800079c:	20000400 	.word	0x20000400
 80007a0:	200003b0 	.word	0x200003b0
 80007a4:	200003d3 	.word	0x200003d3
 80007a8:	200003b8 	.word	0x200003b8
 80007ac:	200003b4 	.word	0x200003b4
 80007b0:	200003d7 	.word	0x200003d7
 80007b4:	200003d8 	.word	0x200003d8
 80007b8:	2000001a 	.word	0x2000001a
 80007bc:	4b31      	ldr	r3, [pc, #196]	; (8000884 <MENU+0x37c>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	dd06      	ble.n	80007d2 <MENU+0x2ca>
 80007c4:	4b30      	ldr	r3, [pc, #192]	; (8000888 <MENU+0x380>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	f083 0301 	eor.w	r3, r3, #1
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d10b      	bne.n	80007ea <MENU+0x2e2>
				|| creditsMenuIndex == 50 && creditsMenu && blockUp) {
 80007d2:	4b2e      	ldr	r3, [pc, #184]	; (800088c <MENU+0x384>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	2b32      	cmp	r3, #50	; 0x32
 80007d8:	d110      	bne.n	80007fc <MENU+0x2f4>
 80007da:	4b2d      	ldr	r3, [pc, #180]	; (8000890 <MENU+0x388>)
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d00c      	beq.n	80007fc <MENU+0x2f4>
 80007e2:	4b29      	ldr	r3, [pc, #164]	; (8000888 <MENU+0x380>)
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d008      	beq.n	80007fc <MENU+0x2f4>
			creditsMenuIndex = creditsMenuIndexTemp;
 80007ea:	4b26      	ldr	r3, [pc, #152]	; (8000884 <MENU+0x37c>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4a27      	ldr	r2, [pc, #156]	; (800088c <MENU+0x384>)
 80007f0:	6013      	str	r3, [r2, #0]
			creditsMenuIndex--;
 80007f2:	4b26      	ldr	r3, [pc, #152]	; (800088c <MENU+0x384>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	3b01      	subs	r3, #1
 80007f8:	4a24      	ldr	r2, [pc, #144]	; (800088c <MENU+0x384>)
 80007fa:	6013      	str	r3, [r2, #0]
		}
	}
	if (RIGHT()) {
 80007fc:	f002 fb24 	bl	8002e48 <RIGHT>
	}

	if (LEFT()) {
 8000800:	f002 fb32 	bl	8002e68 <LEFT>
	}

	if (mainMenu)
 8000804:	4b23      	ldr	r3, [pc, #140]	; (8000894 <MENU+0x38c>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MENU+0x308>
		main_Menu();
 800080c:	f000 f910 	bl	8000a30 <main_Menu>

	if (miniDuel)
 8000810:	4b21      	ldr	r3, [pc, #132]	; (8000898 <MENU+0x390>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MENU+0x314>
		miniDuelOfSpaces();
 8000818:	f003 fe04 	bl	8004424 <miniDuelOfSpaces>

	if (mainMenu && !levelMenu)
 800081c:	4b1d      	ldr	r3, [pc, #116]	; (8000894 <MENU+0x38c>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d008      	beq.n	8000836 <MENU+0x32e>
 8000824:	4b1d      	ldr	r3, [pc, #116]	; (800089c <MENU+0x394>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	f083 0301 	eor.w	r3, r3, #1
 800082c:	b2db      	uxtb	r3, r3
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MENU+0x32e>
		main_Menu_Marked();
 8000832:	f000 fa27 	bl	8000c84 <main_Menu_Marked>

	if (levelMenu)
 8000836:	4b19      	ldr	r3, [pc, #100]	; (800089c <MENU+0x394>)
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MENU+0x33a>
		level_Menu();
 800083e:	f000 fb5b 	bl	8000ef8 <level_Menu>

	if (pickedLevel && !mainMenu)
 8000842:	4b17      	ldr	r3, [pc, #92]	; (80008a0 <MENU+0x398>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d008      	beq.n	800085c <MENU+0x354>
 800084a:	4b12      	ldr	r3, [pc, #72]	; (8000894 <MENU+0x38c>)
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	f083 0301 	eor.w	r3, r3, #1
 8000852:	b2db      	uxtb	r3, r3
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MENU+0x354>
		level_Menu_Picked();
 8000858:	f000 fc12 	bl	8001080 <level_Menu_Picked>

	if (hiscoreMenu)
 800085c:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <MENU+0x39c>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MENU+0x360>
		hiscore_Menu();
 8000864:	f000 ff5c 	bl	8001720 <hiscore_Menu>

	if (creditsMenu)
 8000868:	4b09      	ldr	r3, [pc, #36]	; (8000890 <MENU+0x388>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MENU+0x36c>
		credits_Menu();
 8000870:	f001 fbd6 	bl	8002020 <credits_Menu>

	if (creditsMenuMarked)
 8000874:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <MENU+0x3a0>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MENU+0x378>
		credits_Menu_Marked();
 800087c:	f001 fd20 	bl	80022c0 <credits_Menu_Marked>
}
 8000880:	bf00      	nop
 8000882:	bd80      	pop	{r7, pc}
 8000884:	200003b8 	.word	0x200003b8
 8000888:	2000001a 	.word	0x2000001a
 800088c:	200003b4 	.word	0x200003b4
 8000890:	200003d3 	.word	0x200003d3
 8000894:	200003cb 	.word	0x200003cb
 8000898:	200003ed 	.word	0x200003ed
 800089c:	200003cd 	.word	0x200003cd
 80008a0:	200003ce 	.word	0x200003ce
 80008a4:	200003c8 	.word	0x200003c8
 80008a8:	200003d7 	.word	0x200003d7

080008ac <MENU_Animation_TIM2>:

void MENU_Animation_TIM2() {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
	if (dots) {
 80008b0:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <MENU_Animation_TIM2+0x4c>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d003      	beq.n	80008c0 <MENU_Animation_TIM2+0x14>
		printDots();
 80008b8:	f003 faf6 	bl	8003ea8 <printDots>
		blockJoystick();
 80008bc:	f002 fae4 	bl	8002e88 <blockJoystick>
	}
	if (highscoresAnim) {
 80008c0:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <MENU_Animation_TIM2+0x50>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d002      	beq.n	80008ce <MENU_Animation_TIM2+0x22>
		highscoresAnimation();
 80008c8:	f000 fd92 	bl	80013f0 <highscoresAnimation>
 80008cc:	e005      	b.n	80008da <MENU_Animation_TIM2+0x2e>
	} else {
		highscoresIndexAnim = 0;
 80008ce:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <MENU_Animation_TIM2+0x54>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
		reverse = false;
 80008d4:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <MENU_Animation_TIM2+0x58>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	701a      	strb	r2, [r3, #0]
	}
	if (creditsAnim) {
 80008da:	4b0b      	ldr	r3, [pc, #44]	; (8000908 <MENU_Animation_TIM2+0x5c>)
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d002      	beq.n	80008e8 <MENU_Animation_TIM2+0x3c>
		creditsAnimation();
 80008e2:	f001 f9dd 	bl	8001ca0 <creditsAnimation>
	} else {
		creditsIndexAnim = 0;
		reverse2 = false;
	}
}
 80008e6:	e005      	b.n	80008f4 <MENU_Animation_TIM2+0x48>
		creditsIndexAnim = 0;
 80008e8:	4b08      	ldr	r3, [pc, #32]	; (800090c <MENU_Animation_TIM2+0x60>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
		reverse2 = false;
 80008ee:	4b08      	ldr	r3, [pc, #32]	; (8000910 <MENU_Animation_TIM2+0x64>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	701a      	strb	r2, [r3, #0]
}
 80008f4:	bf00      	nop
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	200003ec 	.word	0x200003ec
 80008fc:	200003d1 	.word	0x200003d1
 8000900:	2000000c 	.word	0x2000000c
 8000904:	200003d2 	.word	0x200003d2
 8000908:	200003d4 	.word	0x200003d4
 800090c:	200003bc 	.word	0x200003bc
 8000910:	200003d5 	.word	0x200003d5

08000914 <MENU_Animation_TIM5>:
void MENU_Animation_TIM5() {
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
	if (enemySpace) {
 8000918:	4b12      	ldr	r3, [pc, #72]	; (8000964 <MENU_Animation_TIM5+0x50>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d00c      	beq.n	800093a <MENU_Animation_TIM5+0x26>
		enemyAboveWord();
 8000920:	f003 fb38 	bl	8003f94 <enemyAboveWord>
		levelMenu = false;
 8000924:	4b10      	ldr	r3, [pc, #64]	; (8000968 <MENU_Animation_TIM5+0x54>)
 8000926:	2200      	movs	r2, #0
 8000928:	701a      	strb	r2, [r3, #0]
		mainMenu = false;
 800092a:	4b10      	ldr	r3, [pc, #64]	; (800096c <MENU_Animation_TIM5+0x58>)
 800092c:	2200      	movs	r2, #0
 800092e:	701a      	strb	r2, [r3, #0]
		levelMenuIndexTemp = 0;
 8000930:	4b0f      	ldr	r3, [pc, #60]	; (8000970 <MENU_Animation_TIM5+0x5c>)
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
		blockJoystick();
 8000936:	f002 faa7 	bl	8002e88 <blockJoystick>
	}
	if (Fade)
 800093a:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <MENU_Animation_TIM5+0x60>)
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MENU_Animation_TIM5+0x32>
		textFade();
 8000942:	f000 f81d 	bl	8000980 <textFade>

	if (highscoresAnim)
 8000946:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <MENU_Animation_TIM5+0x64>)
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MENU_Animation_TIM5+0x3e>
		highscoresAnimation();
 800094e:	f000 fd4f 	bl	80013f0 <highscoresAnimation>

	if (leftArrowAnim)
 8000952:	4b0a      	ldr	r3, [pc, #40]	; (800097c <MENU_Animation_TIM5+0x68>)
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MENU_Animation_TIM5+0x4a>
		leftArrowAnimation();
 800095a:	f001 fae3 	bl	8001f24 <leftArrowAnimation>

}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	200003ee 	.word	0x200003ee
 8000968:	200003cd 	.word	0x200003cd
 800096c:	200003cb 	.word	0x200003cb
 8000970:	20000008 	.word	0x20000008
 8000974:	200003ca 	.word	0x200003ca
 8000978:	200003d1 	.word	0x200003d1
 800097c:	200003c9 	.word	0x200003c9

08000980 <textFade>:

void textFade() {
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
	switch (fade) {
 8000984:	4b12      	ldr	r3, [pc, #72]	; (80009d0 <textFade+0x50>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	2b05      	cmp	r3, #5
 800098a:	d11a      	bne.n	80009c2 <textFade+0x42>
	case 5:
		lcd_cls();
 800098c:	f003 fa12 	bl	8003db4 <lcd_cls>
		mainMenuIndex = 0;
 8000990:	4b10      	ldr	r3, [pc, #64]	; (80009d4 <textFade+0x54>)
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
		Fade = false;
 8000996:	4b10      	ldr	r3, [pc, #64]	; (80009d8 <textFade+0x58>)
 8000998:	2200      	movs	r2, #0
 800099a:	701a      	strb	r2, [r3, #0]
		fade = 0;
 800099c:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <textFade+0x50>)
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
		mainMenu = true;
 80009a2:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <textFade+0x5c>)
 80009a4:	2201      	movs	r2, #1
 80009a6:	701a      	strb	r2, [r3, #0]
		unblockJoystick();
 80009a8:	f002 fa8e 	bl	8002ec8 <unblockJoystick>
		if (mainMenuIndex == 0) {
 80009ac:	4b09      	ldr	r3, [pc, #36]	; (80009d4 <textFade+0x54>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d105      	bne.n	80009c0 <textFade+0x40>
			blockUp = true;
 80009b4:	4b0a      	ldr	r3, [pc, #40]	; (80009e0 <textFade+0x60>)
 80009b6:	2201      	movs	r2, #1
 80009b8:	701a      	strb	r2, [r3, #0]
			blockPress = true;
 80009ba:	4b0a      	ldr	r3, [pc, #40]	; (80009e4 <textFade+0x64>)
 80009bc:	2201      	movs	r2, #1
 80009be:	701a      	strb	r2, [r3, #0]
		}
		break;
 80009c0:	bf00      	nop
	}
	fade++;
 80009c2:	4b03      	ldr	r3, [pc, #12]	; (80009d0 <textFade+0x50>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	3301      	adds	r3, #1
 80009c8:	4a01      	ldr	r2, [pc, #4]	; (80009d0 <textFade+0x50>)
 80009ca:	6013      	str	r3, [r2, #0]
}
 80009cc:	bf00      	nop
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	200003dc 	.word	0x200003dc
 80009d4:	20000000 	.word	0x20000000
 80009d8:	200003ca 	.word	0x200003ca
 80009dc:	200003cb 	.word	0x200003cb
 80009e0:	2000001a 	.word	0x2000001a
 80009e4:	20000019 	.word	0x20000019

080009e8 <showUpperText>:

void showUpperText() {
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
	if (upperText) {
 80009ec:	4b0b      	ldr	r3, [pc, #44]	; (8000a1c <showUpperText+0x34>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d011      	beq.n	8000a18 <showUpperText+0x30>
		LCD_SetLocalization(0x03);
 80009f4:	2003      	movs	r0, #3
 80009f6:	f003 fa33 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("Space Invaders");
 80009fa:	4809      	ldr	r0, [pc, #36]	; (8000a20 <showUpperText+0x38>)
 80009fc:	f003 fa40 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization(0x48);
 8000a00:	2048      	movs	r0, #72	; 0x48
 8000a02:	f003 fa2d 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("MENU");
 8000a06:	4807      	ldr	r0, [pc, #28]	; (8000a24 <showUpperText+0x3c>)
 8000a08:	f003 fa3a 	bl	8003e80 <LCD_SendWord>
		blockUp = true;
 8000a0c:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <showUpperText+0x40>)
 8000a0e:	2201      	movs	r2, #1
 8000a10:	701a      	strb	r2, [r3, #0]
		blockPress = true;
 8000a12:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <showUpperText+0x44>)
 8000a14:	2201      	movs	r2, #1
 8000a16:	701a      	strb	r2, [r3, #0]
	}
}
 8000a18:	bf00      	nop
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	200003cc 	.word	0x200003cc
 8000a20:	0800ab28 	.word	0x0800ab28
 8000a24:	0800ab38 	.word	0x0800ab38
 8000a28:	2000001a 	.word	0x2000001a
 8000a2c:	20000019 	.word	0x20000019

08000a30 <main_Menu>:

void main_Menu() {
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af02      	add	r7, sp, #8
	switch (mainMenuIndex) {
 8000a36:	4b85      	ldr	r3, [pc, #532]	; (8000c4c <main_Menu+0x21c>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	2b05      	cmp	r3, #5
 8000a3c:	f200 8101 	bhi.w	8000c42 <main_Menu+0x212>
 8000a40:	a201      	add	r2, pc, #4	; (adr r2, 8000a48 <main_Menu+0x18>)
 8000a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a46:	bf00      	nop
 8000a48:	08000a61 	.word	0x08000a61
 8000a4c:	08000ac1 	.word	0x08000ac1
 8000a50:	08000b15 	.word	0x08000b15
 8000a54:	08000b5f 	.word	0x08000b5f
 8000a58:	08000ba9 	.word	0x08000ba9
 8000a5c:	08000bf3 	.word	0x08000bf3
	case 0:
		blockUp = true;
 8000a60:	4b7b      	ldr	r3, [pc, #492]	; (8000c50 <main_Menu+0x220>)
 8000a62:	2201      	movs	r2, #1
 8000a64:	701a      	strb	r2, [r3, #0]
		blockPress = true;
 8000a66:	4b7b      	ldr	r3, [pc, #492]	; (8000c54 <main_Menu+0x224>)
 8000a68:	2201      	movs	r2, #1
 8000a6a:	701a      	strb	r2, [r3, #0]
		lcd_cls();
 8000a6c:	f003 f9a2 	bl	8003db4 <lcd_cls>
		LCD_SetLocalization(0x03);
 8000a70:	2003      	movs	r0, #3
 8000a72:	f003 f9f5 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("Space Invaders");
 8000a76:	4878      	ldr	r0, [pc, #480]	; (8000c58 <main_Menu+0x228>)
 8000a78:	f003 fa02 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization(0x48);
 8000a7c:	2048      	movs	r0, #72	; 0x48
 8000a7e:	f003 f9ef 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("MENU");
 8000a82:	4876      	ldr	r0, [pc, #472]	; (8000c5c <main_Menu+0x22c>)
 8000a84:	f003 f9fc 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization(0x14);
 8000a88:	2014      	movs	r0, #20
 8000a8a:	f003 f9e9 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("Start");
 8000a8e:	4874      	ldr	r0, [pc, #464]	; (8000c60 <main_Menu+0x230>)
 8000a90:	f003 f9f6 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization(0x54);
 8000a94:	2054      	movs	r0, #84	; 0x54
 8000a96:	f003 f9e3 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("Level");
 8000a9a:	4872      	ldr	r0, [pc, #456]	; (8000c64 <main_Menu+0x234>)
 8000a9c:	f003 f9f0 	bl	8003e80 <LCD_SendWord>
		createInvertedWord("2", 0x67, 1, 7, 0);
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	9300      	str	r3, [sp, #0]
 8000aa4:	2307      	movs	r3, #7
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	2167      	movs	r1, #103	; 0x67
 8000aaa:	486f      	ldr	r0, [pc, #444]	; (8000c68 <main_Menu+0x238>)
 8000aac:	f002 fb02 	bl	80030b4 <createInvertedWord>
		mainMenuIndexTemp = mainMenuIndex;
 8000ab0:	4b66      	ldr	r3, [pc, #408]	; (8000c4c <main_Menu+0x21c>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a6d      	ldr	r2, [pc, #436]	; (8000c6c <main_Menu+0x23c>)
 8000ab6:	6013      	str	r3, [r2, #0]
		mainMenuIndex = 50;
 8000ab8:	4b64      	ldr	r3, [pc, #400]	; (8000c4c <main_Menu+0x21c>)
 8000aba:	2232      	movs	r2, #50	; 0x32
 8000abc:	601a      	str	r2, [r3, #0]
		break;
 8000abe:	e0c1      	b.n	8000c44 <main_Menu+0x214>
	case 1:
		blockUp = false;
 8000ac0:	4b63      	ldr	r3, [pc, #396]	; (8000c50 <main_Menu+0x220>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	701a      	strb	r2, [r3, #0]
		blockPress = false;
 8000ac6:	4b63      	ldr	r3, [pc, #396]	; (8000c54 <main_Menu+0x224>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	701a      	strb	r2, [r3, #0]
		LCD_CLS_3_8_Lines
 8000acc:	f003 f9b0 	bl	8003e30 <lcd_clear_3_8_lines>
		;
		LCD_CLS_4_8_Lines
 8000ad0:	f003 f9ba 	bl	8003e48 <lcd_clear_4_8_lines>
		;
		createInvertedWord("Start", 0x14, 5, 0, 0);
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	9300      	str	r3, [sp, #0]
 8000ad8:	2300      	movs	r3, #0
 8000ada:	2205      	movs	r2, #5
 8000adc:	2114      	movs	r1, #20
 8000ade:	4860      	ldr	r0, [pc, #384]	; (8000c60 <main_Menu+0x230>)
 8000ae0:	f002 fae8 	bl	80030b4 <createInvertedWord>
		LCD_SetLocalization(0x54);
 8000ae4:	2054      	movs	r0, #84	; 0x54
 8000ae6:	f003 f9bb 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("Level");
 8000aea:	485e      	ldr	r0, [pc, #376]	; (8000c64 <main_Menu+0x234>)
 8000aec:	f003 f9c8 	bl	8003e80 <LCD_SendWord>
		createInvertedWord("2", 0x67, 1, 7, 0);
 8000af0:	2300      	movs	r3, #0
 8000af2:	9300      	str	r3, [sp, #0]
 8000af4:	2307      	movs	r3, #7
 8000af6:	2201      	movs	r2, #1
 8000af8:	2167      	movs	r1, #103	; 0x67
 8000afa:	485b      	ldr	r0, [pc, #364]	; (8000c68 <main_Menu+0x238>)
 8000afc:	f002 fada 	bl	80030b4 <createInvertedWord>
		mainMenuIndexTemp = mainMenuIndex;
 8000b00:	4b52      	ldr	r3, [pc, #328]	; (8000c4c <main_Menu+0x21c>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a59      	ldr	r2, [pc, #356]	; (8000c6c <main_Menu+0x23c>)
 8000b06:	6013      	str	r3, [r2, #0]
		mainMenuIndex = 50;
 8000b08:	4b50      	ldr	r3, [pc, #320]	; (8000c4c <main_Menu+0x21c>)
 8000b0a:	2232      	movs	r2, #50	; 0x32
 8000b0c:	601a      	str	r2, [r3, #0]
		showUpperText();
 8000b0e:	f7ff ff6b 	bl	80009e8 <showUpperText>
		break;
 8000b12:	e097      	b.n	8000c44 <main_Menu+0x214>
	case 2:
		blockUp = false;
 8000b14:	4b4e      	ldr	r3, [pc, #312]	; (8000c50 <main_Menu+0x220>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	701a      	strb	r2, [r3, #0]
		blockPress = false;
 8000b1a:	4b4e      	ldr	r3, [pc, #312]	; (8000c54 <main_Menu+0x224>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	701a      	strb	r2, [r3, #0]
		LCD_CLS_3_8_Lines
 8000b20:	f003 f986 	bl	8003e30 <lcd_clear_3_8_lines>
		;
		LCD_CLS_4_8_Lines
 8000b24:	f003 f990 	bl	8003e48 <lcd_clear_4_8_lines>
		;
		LCD_SetLocalization(0x14);
 8000b28:	2014      	movs	r0, #20
 8000b2a:	f003 f999 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("Start");
 8000b2e:	484c      	ldr	r0, [pc, #304]	; (8000c60 <main_Menu+0x230>)
 8000b30:	f003 f9a6 	bl	8003e80 <LCD_SendWord>
		createInvertedWord("Level", 0x54, 5, 0, 0);
 8000b34:	2300      	movs	r3, #0
 8000b36:	9300      	str	r3, [sp, #0]
 8000b38:	2300      	movs	r3, #0
 8000b3a:	2205      	movs	r2, #5
 8000b3c:	2154      	movs	r1, #84	; 0x54
 8000b3e:	4849      	ldr	r0, [pc, #292]	; (8000c64 <main_Menu+0x234>)
 8000b40:	f002 fab8 	bl	80030b4 <createInvertedWord>
		mainMenuIndexTemp = mainMenuIndex;
 8000b44:	4b41      	ldr	r3, [pc, #260]	; (8000c4c <main_Menu+0x21c>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a48      	ldr	r2, [pc, #288]	; (8000c6c <main_Menu+0x23c>)
 8000b4a:	6013      	str	r3, [r2, #0]
		mainMenuIndex = 50;
 8000b4c:	4b3f      	ldr	r3, [pc, #252]	; (8000c4c <main_Menu+0x21c>)
 8000b4e:	2232      	movs	r2, #50	; 0x32
 8000b50:	601a      	str	r2, [r3, #0]
		showUpperText();
 8000b52:	f7ff ff49 	bl	80009e8 <showUpperText>
		upperText = false;
 8000b56:	4b46      	ldr	r3, [pc, #280]	; (8000c70 <main_Menu+0x240>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	701a      	strb	r2, [r3, #0]
		break;
 8000b5c:	e072      	b.n	8000c44 <main_Menu+0x214>
	case 3:
		blockUp = false;
 8000b5e:	4b3c      	ldr	r3, [pc, #240]	; (8000c50 <main_Menu+0x220>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	701a      	strb	r2, [r3, #0]
		blockPress = false;
 8000b64:	4b3b      	ldr	r3, [pc, #236]	; (8000c54 <main_Menu+0x224>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	701a      	strb	r2, [r3, #0]
		LCD_CLS_3_8_Lines
 8000b6a:	f003 f961 	bl	8003e30 <lcd_clear_3_8_lines>
		;
		LCD_CLS_4_8_Lines
 8000b6e:	f003 f96b 	bl	8003e48 <lcd_clear_4_8_lines>
		;
		LCD_SetLocalization(0x14);
 8000b72:	2014      	movs	r0, #20
 8000b74:	f003 f974 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("Level");
 8000b78:	483a      	ldr	r0, [pc, #232]	; (8000c64 <main_Menu+0x234>)
 8000b7a:	f003 f981 	bl	8003e80 <LCD_SendWord>
		createInvertedWord("HiScore", 0x54, 7, 0, 0);
 8000b7e:	2300      	movs	r3, #0
 8000b80:	9300      	str	r3, [sp, #0]
 8000b82:	2300      	movs	r3, #0
 8000b84:	2207      	movs	r2, #7
 8000b86:	2154      	movs	r1, #84	; 0x54
 8000b88:	483a      	ldr	r0, [pc, #232]	; (8000c74 <main_Menu+0x244>)
 8000b8a:	f002 fa93 	bl	80030b4 <createInvertedWord>
		mainMenuIndexTemp = mainMenuIndex;
 8000b8e:	4b2f      	ldr	r3, [pc, #188]	; (8000c4c <main_Menu+0x21c>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a36      	ldr	r2, [pc, #216]	; (8000c6c <main_Menu+0x23c>)
 8000b94:	6013      	str	r3, [r2, #0]
		mainMenuIndex = 50;
 8000b96:	4b2d      	ldr	r3, [pc, #180]	; (8000c4c <main_Menu+0x21c>)
 8000b98:	2232      	movs	r2, #50	; 0x32
 8000b9a:	601a      	str	r2, [r3, #0]
		showUpperText();
 8000b9c:	f7ff ff24 	bl	80009e8 <showUpperText>
		upperText = false;
 8000ba0:	4b33      	ldr	r3, [pc, #204]	; (8000c70 <main_Menu+0x240>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	701a      	strb	r2, [r3, #0]
		break;
 8000ba6:	e04d      	b.n	8000c44 <main_Menu+0x214>
	case 4:
		blockUp = false;
 8000ba8:	4b29      	ldr	r3, [pc, #164]	; (8000c50 <main_Menu+0x220>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	701a      	strb	r2, [r3, #0]
		blockPress = false;
 8000bae:	4b29      	ldr	r3, [pc, #164]	; (8000c54 <main_Menu+0x224>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	701a      	strb	r2, [r3, #0]
		LCD_CLS_3_8_Lines
 8000bb4:	f003 f93c 	bl	8003e30 <lcd_clear_3_8_lines>
		;
		LCD_CLS_4_8_Lines
 8000bb8:	f003 f946 	bl	8003e48 <lcd_clear_4_8_lines>
		;
		LCD_SetLocalization(0x14);
 8000bbc:	2014      	movs	r0, #20
 8000bbe:	f003 f94f 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("HiScore");
 8000bc2:	482c      	ldr	r0, [pc, #176]	; (8000c74 <main_Menu+0x244>)
 8000bc4:	f003 f95c 	bl	8003e80 <LCD_SendWord>
		createInvertedWord("Credits", 0x54, 7, 0, 0);
 8000bc8:	2300      	movs	r3, #0
 8000bca:	9300      	str	r3, [sp, #0]
 8000bcc:	2300      	movs	r3, #0
 8000bce:	2207      	movs	r2, #7
 8000bd0:	2154      	movs	r1, #84	; 0x54
 8000bd2:	4829      	ldr	r0, [pc, #164]	; (8000c78 <main_Menu+0x248>)
 8000bd4:	f002 fa6e 	bl	80030b4 <createInvertedWord>
		mainMenuIndexTemp = mainMenuIndex;
 8000bd8:	4b1c      	ldr	r3, [pc, #112]	; (8000c4c <main_Menu+0x21c>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a23      	ldr	r2, [pc, #140]	; (8000c6c <main_Menu+0x23c>)
 8000bde:	6013      	str	r3, [r2, #0]
		mainMenuIndex = 50;
 8000be0:	4b1a      	ldr	r3, [pc, #104]	; (8000c4c <main_Menu+0x21c>)
 8000be2:	2232      	movs	r2, #50	; 0x32
 8000be4:	601a      	str	r2, [r3, #0]
		showUpperText();
 8000be6:	f7ff feff 	bl	80009e8 <showUpperText>
		upperText = false;
 8000bea:	4b21      	ldr	r3, [pc, #132]	; (8000c70 <main_Menu+0x240>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	701a      	strb	r2, [r3, #0]
		break;
 8000bf0:	e028      	b.n	8000c44 <main_Menu+0x214>
	case 5:
		blockUp = false;
 8000bf2:	4b17      	ldr	r3, [pc, #92]	; (8000c50 <main_Menu+0x220>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	701a      	strb	r2, [r3, #0]
		blockPress = false;
 8000bf8:	4b16      	ldr	r3, [pc, #88]	; (8000c54 <main_Menu+0x224>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	701a      	strb	r2, [r3, #0]
		LCD_CLS_3_8_Lines
 8000bfe:	f003 f917 	bl	8003e30 <lcd_clear_3_8_lines>
		;
		LCD_CLS_4_8_Lines
 8000c02:	f003 f921 	bl	8003e48 <lcd_clear_4_8_lines>
		;
		LCD_SetLocalization(0x14);
 8000c06:	2014      	movs	r0, #20
 8000c08:	f003 f92a 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("Credits");
 8000c0c:	481a      	ldr	r0, [pc, #104]	; (8000c78 <main_Menu+0x248>)
 8000c0e:	f003 f937 	bl	8003e80 <LCD_SendWord>
		createInvertedWord("Exit", 0x54, 4, 0, 0);
 8000c12:	2300      	movs	r3, #0
 8000c14:	9300      	str	r3, [sp, #0]
 8000c16:	2300      	movs	r3, #0
 8000c18:	2204      	movs	r2, #4
 8000c1a:	2154      	movs	r1, #84	; 0x54
 8000c1c:	4817      	ldr	r0, [pc, #92]	; (8000c7c <main_Menu+0x24c>)
 8000c1e:	f002 fa49 	bl	80030b4 <createInvertedWord>
		createInvertedWord("8", 0x67, 1, 7, 0);
 8000c22:	2300      	movs	r3, #0
 8000c24:	9300      	str	r3, [sp, #0]
 8000c26:	2307      	movs	r3, #7
 8000c28:	2201      	movs	r2, #1
 8000c2a:	2167      	movs	r1, #103	; 0x67
 8000c2c:	4814      	ldr	r0, [pc, #80]	; (8000c80 <main_Menu+0x250>)
 8000c2e:	f002 fa41 	bl	80030b4 <createInvertedWord>
		mainMenuIndexTemp = mainMenuIndex;
 8000c32:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <main_Menu+0x21c>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4a0d      	ldr	r2, [pc, #52]	; (8000c6c <main_Menu+0x23c>)
 8000c38:	6013      	str	r3, [r2, #0]
		mainMenuIndex = 50;
 8000c3a:	4b04      	ldr	r3, [pc, #16]	; (8000c4c <main_Menu+0x21c>)
 8000c3c:	2232      	movs	r2, #50	; 0x32
 8000c3e:	601a      	str	r2, [r3, #0]
		break;
 8000c40:	e000      	b.n	8000c44 <main_Menu+0x214>
	default:
		break;
 8000c42:	bf00      	nop
	}
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20000000 	.word	0x20000000
 8000c50:	2000001a 	.word	0x2000001a
 8000c54:	20000019 	.word	0x20000019
 8000c58:	0800ab28 	.word	0x0800ab28
 8000c5c:	0800ab38 	.word	0x0800ab38
 8000c60:	0800ab40 	.word	0x0800ab40
 8000c64:	0800ab48 	.word	0x0800ab48
 8000c68:	0800ab50 	.word	0x0800ab50
 8000c6c:	20000408 	.word	0x20000408
 8000c70:	200003cc 	.word	0x200003cc
 8000c74:	0800ab54 	.word	0x0800ab54
 8000c78:	0800ab5c 	.word	0x0800ab5c
 8000c7c:	0800ab64 	.word	0x0800ab64
 8000c80:	0800ab6c 	.word	0x0800ab6c

08000c84 <main_Menu_Marked>:
void main_Menu_Marked() {
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af02      	add	r7, sp, #8
	switch (mainMenuIndexTemp) {
 8000c8a:	4b7f      	ldr	r3, [pc, #508]	; (8000e88 <main_Menu_Marked+0x204>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	3b01      	subs	r3, #1
 8000c90:	2b04      	cmp	r3, #4
 8000c92:	f200 80ee 	bhi.w	8000e72 <main_Menu_Marked+0x1ee>
 8000c96:	a201      	add	r2, pc, #4	; (adr r2, 8000c9c <main_Menu_Marked+0x18>)
 8000c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c9c:	08000cb1 	.word	0x08000cb1
 8000ca0:	08000d49 	.word	0x08000d49
 8000ca4:	08000e0f 	.word	0x08000e0f
 8000ca8:	08000e3d 	.word	0x08000e3d
 8000cac:	08000e6b 	.word	0x08000e6b
	case 1:
		blockPress = false;
 8000cb0:	4b76      	ldr	r3, [pc, #472]	; (8000e8c <main_Menu_Marked+0x208>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	701a      	strb	r2, [r3, #0]
		if (Press == GPIO_PIN_RESET) {
 8000cb6:	4b76      	ldr	r3, [pc, #472]	; (8000e90 <main_Menu_Marked+0x20c>)
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	f040 80db 	bne.w	8000e76 <main_Menu_Marked+0x1f2>
			if (selectedLevel == 'N') {
 8000cc0:	4b74      	ldr	r3, [pc, #464]	; (8000e94 <main_Menu_Marked+0x210>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	2b4e      	cmp	r3, #78	; 0x4e
 8000cc6:	d120      	bne.n	8000d0a <main_Menu_Marked+0x86>
				lcd_clear();
 8000cc8:	f001 fcae 	bl	8002628 <lcd_clear>
				LCD_SetLocalization(0x43);
 8000ccc:	2043      	movs	r0, #67	; 0x43
 8000cce:	f003 f8c7 	bl	8003e60 <LCD_SetLocalization>
				LCD_SendWord("Firstly select");
 8000cd2:	4871      	ldr	r0, [pc, #452]	; (8000e98 <main_Menu_Marked+0x214>)
 8000cd4:	f003 f8d4 	bl	8003e80 <LCD_SendWord>
				LCD_SetLocalization(0x1A);
 8000cd8:	201a      	movs	r0, #26
 8000cda:	f003 f8c1 	bl	8003e60 <LCD_SetLocalization>
				LCD_SendWord("a level!");
 8000cde:	486f      	ldr	r0, [pc, #444]	; (8000e9c <main_Menu_Marked+0x218>)
 8000ce0:	f003 f8ce 	bl	8003e80 <LCD_SendWord>
				blockUp = true;
 8000ce4:	4b6e      	ldr	r3, [pc, #440]	; (8000ea0 <main_Menu_Marked+0x21c>)
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	701a      	strb	r2, [r3, #0]
				blockDown = true;
 8000cea:	4b6e      	ldr	r3, [pc, #440]	; (8000ea4 <main_Menu_Marked+0x220>)
 8000cec:	2201      	movs	r2, #1
 8000cee:	701a      	strb	r2, [r3, #0]
				blockPress = true;
 8000cf0:	4b66      	ldr	r3, [pc, #408]	; (8000e8c <main_Menu_Marked+0x208>)
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	701a      	strb	r2, [r3, #0]
				mainMenu = false;
 8000cf6:	4b6c      	ldr	r3, [pc, #432]	; (8000ea8 <main_Menu_Marked+0x224>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	701a      	strb	r2, [r3, #0]
				Fade = true;
 8000cfc:	4b6b      	ldr	r3, [pc, #428]	; (8000eac <main_Menu_Marked+0x228>)
 8000cfe:	2201      	movs	r2, #1
 8000d00:	701a      	strb	r2, [r3, #0]
				upperText = true;
 8000d02:	4b6b      	ldr	r3, [pc, #428]	; (8000eb0 <main_Menu_Marked+0x22c>)
 8000d04:	2201      	movs	r2, #1
 8000d06:	701a      	strb	r2, [r3, #0]
				dots = true;
				miniDuel = true;
				enemySpace = true;
			}
		}
		break;
 8000d08:	e0b5      	b.n	8000e76 <main_Menu_Marked+0x1f2>
			} else if ((selectedLevel == 'E') || (selectedLevel == 'M')
 8000d0a:	4b62      	ldr	r3, [pc, #392]	; (8000e94 <main_Menu_Marked+0x210>)
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	2b45      	cmp	r3, #69	; 0x45
 8000d10:	d008      	beq.n	8000d24 <main_Menu_Marked+0xa0>
 8000d12:	4b60      	ldr	r3, [pc, #384]	; (8000e94 <main_Menu_Marked+0x210>)
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	2b4d      	cmp	r3, #77	; 0x4d
 8000d18:	d004      	beq.n	8000d24 <main_Menu_Marked+0xa0>
					|| (selectedLevel == 'H')) {
 8000d1a:	4b5e      	ldr	r3, [pc, #376]	; (8000e94 <main_Menu_Marked+0x210>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	2b48      	cmp	r3, #72	; 0x48
 8000d20:	f040 80a9 	bne.w	8000e76 <main_Menu_Marked+0x1f2>
				lcd_clear();
 8000d24:	f001 fc80 	bl	8002628 <lcd_clear>
				LCD_SetLocalization(0x1A);
 8000d28:	201a      	movs	r0, #26
 8000d2a:	f003 f899 	bl	8003e60 <LCD_SetLocalization>
				LCD_SendWord("Loading");
 8000d2e:	4861      	ldr	r0, [pc, #388]	; (8000eb4 <main_Menu_Marked+0x230>)
 8000d30:	f003 f8a6 	bl	8003e80 <LCD_SendWord>
				dots = true;
 8000d34:	4b60      	ldr	r3, [pc, #384]	; (8000eb8 <main_Menu_Marked+0x234>)
 8000d36:	2201      	movs	r2, #1
 8000d38:	701a      	strb	r2, [r3, #0]
				miniDuel = true;
 8000d3a:	4b60      	ldr	r3, [pc, #384]	; (8000ebc <main_Menu_Marked+0x238>)
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	701a      	strb	r2, [r3, #0]
				enemySpace = true;
 8000d40:	4b5f      	ldr	r3, [pc, #380]	; (8000ec0 <main_Menu_Marked+0x23c>)
 8000d42:	2201      	movs	r2, #1
 8000d44:	701a      	strb	r2, [r3, #0]
		break;
 8000d46:	e096      	b.n	8000e76 <main_Menu_Marked+0x1f2>
	case 2:
		blockPress = false;
 8000d48:	4b50      	ldr	r3, [pc, #320]	; (8000e8c <main_Menu_Marked+0x208>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	701a      	strb	r2, [r3, #0]
		if (Press == GPIO_PIN_RESET) {
 8000d4e:	4b50      	ldr	r3, [pc, #320]	; (8000e90 <main_Menu_Marked+0x20c>)
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d154      	bne.n	8000e00 <main_Menu_Marked+0x17c>
			HAL_GPIO_TogglePin(GPIOB,
 8000d56:	f244 0181 	movw	r1, #16513	; 0x4081
 8000d5a:	485a      	ldr	r0, [pc, #360]	; (8000ec4 <main_Menu_Marked+0x240>)
 8000d5c:	f006 fb3f 	bl	80073de <HAL_GPIO_TogglePin>
			GPIO_PIN_0 | GPIO_PIN_7 | GPIO_PIN_14);
			lcd_cls();
 8000d60:	f003 f828 	bl	8003db4 <lcd_cls>
			LCD_SetLocalization(0x04);
 8000d64:	2004      	movs	r0, #4
 8000d66:	f003 f87b 	bl	8003e60 <LCD_SetLocalization>
			LCD_SendWord("Select level");
 8000d6a:	4857      	ldr	r0, [pc, #348]	; (8000ec8 <main_Menu_Marked+0x244>)
 8000d6c:	f003 f888 	bl	8003e80 <LCD_SendWord>
			if (selectedLevel == 'E') {
 8000d70:	4b48      	ldr	r3, [pc, #288]	; (8000e94 <main_Menu_Marked+0x210>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	2b45      	cmp	r3, #69	; 0x45
 8000d76:	d10b      	bne.n	8000d90 <main_Menu_Marked+0x10c>
				createInvertedWord("Easy", 0x40, 4, 0, 0);
 8000d78:	2300      	movs	r3, #0
 8000d7a:	9300      	str	r3, [sp, #0]
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	2204      	movs	r2, #4
 8000d80:	2140      	movs	r1, #64	; 0x40
 8000d82:	4852      	ldr	r0, [pc, #328]	; (8000ecc <main_Menu_Marked+0x248>)
 8000d84:	f002 f996 	bl	80030b4 <createInvertedWord>
				levelMenuIndex2 = 1;
 8000d88:	4b51      	ldr	r3, [pc, #324]	; (8000ed0 <main_Menu_Marked+0x24c>)
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	601a      	str	r2, [r3, #0]
 8000d8e:	e005      	b.n	8000d9c <main_Menu_Marked+0x118>
			} else {
				LCD_SetLocalization(0x40);
 8000d90:	2040      	movs	r0, #64	; 0x40
 8000d92:	f003 f865 	bl	8003e60 <LCD_SetLocalization>
				LCD_SendWord("Easy");
 8000d96:	484d      	ldr	r0, [pc, #308]	; (8000ecc <main_Menu_Marked+0x248>)
 8000d98:	f003 f872 	bl	8003e80 <LCD_SendWord>
			}
			if (selectedLevel == 'M') {
 8000d9c:	4b3d      	ldr	r3, [pc, #244]	; (8000e94 <main_Menu_Marked+0x210>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	2b4d      	cmp	r3, #77	; 0x4d
 8000da2:	d10b      	bne.n	8000dbc <main_Menu_Marked+0x138>
				createInvertedWord("Medium", 0x14, 6, 0, 0);
 8000da4:	2300      	movs	r3, #0
 8000da6:	9300      	str	r3, [sp, #0]
 8000da8:	2300      	movs	r3, #0
 8000daa:	2206      	movs	r2, #6
 8000dac:	2114      	movs	r1, #20
 8000dae:	4849      	ldr	r0, [pc, #292]	; (8000ed4 <main_Menu_Marked+0x250>)
 8000db0:	f002 f980 	bl	80030b4 <createInvertedWord>
				levelMenuIndex2 = 2;
 8000db4:	4b46      	ldr	r3, [pc, #280]	; (8000ed0 <main_Menu_Marked+0x24c>)
 8000db6:	2202      	movs	r2, #2
 8000db8:	601a      	str	r2, [r3, #0]
 8000dba:	e005      	b.n	8000dc8 <main_Menu_Marked+0x144>
			} else {
				LCD_SetLocalization(0x14);
 8000dbc:	2014      	movs	r0, #20
 8000dbe:	f003 f84f 	bl	8003e60 <LCD_SetLocalization>
				LCD_SendWord("Medium");
 8000dc2:	4844      	ldr	r0, [pc, #272]	; (8000ed4 <main_Menu_Marked+0x250>)
 8000dc4:	f003 f85c 	bl	8003e80 <LCD_SendWord>
			}
			if (selectedLevel == 'H') {
 8000dc8:	4b32      	ldr	r3, [pc, #200]	; (8000e94 <main_Menu_Marked+0x210>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	2b48      	cmp	r3, #72	; 0x48
 8000dce:	d10b      	bne.n	8000de8 <main_Menu_Marked+0x164>
				createInvertedWord("Hard", 0x54, 6, 0, 0);
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	9300      	str	r3, [sp, #0]
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	2206      	movs	r2, #6
 8000dd8:	2154      	movs	r1, #84	; 0x54
 8000dda:	483f      	ldr	r0, [pc, #252]	; (8000ed8 <main_Menu_Marked+0x254>)
 8000ddc:	f002 f96a 	bl	80030b4 <createInvertedWord>
				levelMenuIndex2 = 3;
 8000de0:	4b3b      	ldr	r3, [pc, #236]	; (8000ed0 <main_Menu_Marked+0x24c>)
 8000de2:	2203      	movs	r2, #3
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	e005      	b.n	8000df4 <main_Menu_Marked+0x170>
			} else {
				LCD_SetLocalization(0x54);
 8000de8:	2054      	movs	r0, #84	; 0x54
 8000dea:	f003 f839 	bl	8003e60 <LCD_SetLocalization>
				LCD_SendWord("Hard");
 8000dee:	483a      	ldr	r0, [pc, #232]	; (8000ed8 <main_Menu_Marked+0x254>)
 8000df0:	f003 f846 	bl	8003e80 <LCD_SendWord>
			}
			mainMenu = false;
 8000df4:	4b2c      	ldr	r3, [pc, #176]	; (8000ea8 <main_Menu_Marked+0x224>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	701a      	strb	r2, [r3, #0]
			levelMenu = true;
 8000dfa:	4b38      	ldr	r3, [pc, #224]	; (8000edc <main_Menu_Marked+0x258>)
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	701a      	strb	r2, [r3, #0]
		}
		levelMenuIndex = 0;
 8000e00:	4b37      	ldr	r3, [pc, #220]	; (8000ee0 <main_Menu_Marked+0x25c>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
		blockPress = true;
 8000e06:	4b21      	ldr	r3, [pc, #132]	; (8000e8c <main_Menu_Marked+0x208>)
 8000e08:	2201      	movs	r2, #1
 8000e0a:	701a      	strb	r2, [r3, #0]
		break;
 8000e0c:	e038      	b.n	8000e80 <main_Menu_Marked+0x1fc>
	case 3:
		blockPress = false;
 8000e0e:	4b1f      	ldr	r3, [pc, #124]	; (8000e8c <main_Menu_Marked+0x208>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	701a      	strb	r2, [r3, #0]
		if (Press == GPIO_PIN_RESET) {
 8000e14:	4b1e      	ldr	r3, [pc, #120]	; (8000e90 <main_Menu_Marked+0x20c>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d12e      	bne.n	8000e7a <main_Menu_Marked+0x1f6>
			highscoresAnim = true;
 8000e1c:	4b31      	ldr	r3, [pc, #196]	; (8000ee4 <main_Menu_Marked+0x260>)
 8000e1e:	2201      	movs	r2, #1
 8000e20:	701a      	strb	r2, [r3, #0]
			hiscoreMenu = true;
 8000e22:	4b31      	ldr	r3, [pc, #196]	; (8000ee8 <main_Menu_Marked+0x264>)
 8000e24:	2201      	movs	r2, #1
 8000e26:	701a      	strb	r2, [r3, #0]
			mainMenu = false;
 8000e28:	4b1f      	ldr	r3, [pc, #124]	; (8000ea8 <main_Menu_Marked+0x224>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	701a      	strb	r2, [r3, #0]
			levelMenu = false;
 8000e2e:	4b2b      	ldr	r3, [pc, #172]	; (8000edc <main_Menu_Marked+0x258>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	701a      	strb	r2, [r3, #0]
			hiscoreMenuIndex = 0;
 8000e34:	4b2d      	ldr	r3, [pc, #180]	; (8000eec <main_Menu_Marked+0x268>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	601a      	str	r2, [r3, #0]
		}
		break;
 8000e3a:	e01e      	b.n	8000e7a <main_Menu_Marked+0x1f6>
	case 4:
		blockPress = false;
 8000e3c:	4b13      	ldr	r3, [pc, #76]	; (8000e8c <main_Menu_Marked+0x208>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	701a      	strb	r2, [r3, #0]
		if (Press == GPIO_PIN_RESET) {
 8000e42:	4b13      	ldr	r3, [pc, #76]	; (8000e90 <main_Menu_Marked+0x20c>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d119      	bne.n	8000e7e <main_Menu_Marked+0x1fa>
			creditsMenu = true;
 8000e4a:	4b29      	ldr	r3, [pc, #164]	; (8000ef0 <main_Menu_Marked+0x26c>)
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	701a      	strb	r2, [r3, #0]
			hiscoreMenu = false;
 8000e50:	4b25      	ldr	r3, [pc, #148]	; (8000ee8 <main_Menu_Marked+0x264>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	701a      	strb	r2, [r3, #0]
			mainMenu = false;
 8000e56:	4b14      	ldr	r3, [pc, #80]	; (8000ea8 <main_Menu_Marked+0x224>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	701a      	strb	r2, [r3, #0]
			levelMenu = false;
 8000e5c:	4b1f      	ldr	r3, [pc, #124]	; (8000edc <main_Menu_Marked+0x258>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	701a      	strb	r2, [r3, #0]
			creditsMenuIndex = 0;
 8000e62:	4b24      	ldr	r3, [pc, #144]	; (8000ef4 <main_Menu_Marked+0x270>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
		}
		break;
 8000e68:	e009      	b.n	8000e7e <main_Menu_Marked+0x1fa>
	case 5:
		blockPress = false;
 8000e6a:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <main_Menu_Marked+0x208>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	701a      	strb	r2, [r3, #0]

		break;
 8000e70:	e006      	b.n	8000e80 <main_Menu_Marked+0x1fc>
	default:
		break;
 8000e72:	bf00      	nop
 8000e74:	e004      	b.n	8000e80 <main_Menu_Marked+0x1fc>
		break;
 8000e76:	bf00      	nop
 8000e78:	e002      	b.n	8000e80 <main_Menu_Marked+0x1fc>
		break;
 8000e7a:	bf00      	nop
 8000e7c:	e000      	b.n	8000e80 <main_Menu_Marked+0x1fc>
		break;
 8000e7e:	bf00      	nop
	}

}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	20000408 	.word	0x20000408
 8000e8c:	20000019 	.word	0x20000019
 8000e90:	20000404 	.word	0x20000404
 8000e94:	20000010 	.word	0x20000010
 8000e98:	0800ab70 	.word	0x0800ab70
 8000e9c:	0800ab80 	.word	0x0800ab80
 8000ea0:	2000001a 	.word	0x2000001a
 8000ea4:	2000001b 	.word	0x2000001b
 8000ea8:	200003cb 	.word	0x200003cb
 8000eac:	200003ca 	.word	0x200003ca
 8000eb0:	200003cc 	.word	0x200003cc
 8000eb4:	0800ab8c 	.word	0x0800ab8c
 8000eb8:	200003ec 	.word	0x200003ec
 8000ebc:	200003ed 	.word	0x200003ed
 8000ec0:	200003ee 	.word	0x200003ee
 8000ec4:	40020400 	.word	0x40020400
 8000ec8:	0800ab94 	.word	0x0800ab94
 8000ecc:	0800aba4 	.word	0x0800aba4
 8000ed0:	200003fc 	.word	0x200003fc
 8000ed4:	0800abac 	.word	0x0800abac
 8000ed8:	0800abb4 	.word	0x0800abb4
 8000edc:	200003cd 	.word	0x200003cd
 8000ee0:	20000004 	.word	0x20000004
 8000ee4:	200003d1 	.word	0x200003d1
 8000ee8:	200003c8 	.word	0x200003c8
 8000eec:	200003b0 	.word	0x200003b0
 8000ef0:	200003d3 	.word	0x200003d3
 8000ef4:	200003b4 	.word	0x200003b4

08000ef8 <level_Menu>:

void level_Menu() {
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af02      	add	r7, sp, #8

	switch (levelMenuIndex) {
 8000efe:	4b54      	ldr	r3, [pc, #336]	; (8001050 <level_Menu+0x158>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	2b03      	cmp	r3, #3
 8000f04:	f200 809d 	bhi.w	8001042 <level_Menu+0x14a>
 8000f08:	a201      	add	r2, pc, #4	; (adr r2, 8000f10 <level_Menu+0x18>)
 8000f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f0e:	bf00      	nop
 8000f10:	08000f21 	.word	0x08000f21
 8000f14:	08000f61 	.word	0x08000f61
 8000f18:	08000fb3 	.word	0x08000fb3
 8000f1c:	0800100b 	.word	0x0800100b
	case 0:
		levelMenuIndexTemp = levelMenuIndex;
 8000f20:	4b4b      	ldr	r3, [pc, #300]	; (8001050 <level_Menu+0x158>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a4b      	ldr	r2, [pc, #300]	; (8001054 <level_Menu+0x15c>)
 8000f26:	6013      	str	r3, [r2, #0]
		levelMenuIndex = 50;
 8000f28:	4b49      	ldr	r3, [pc, #292]	; (8001050 <level_Menu+0x158>)
 8000f2a:	2232      	movs	r2, #50	; 0x32
 8000f2c:	601a      	str	r2, [r3, #0]
		blockUp = true;
 8000f2e:	4b4a      	ldr	r3, [pc, #296]	; (8001058 <level_Menu+0x160>)
 8000f30:	2201      	movs	r2, #1
 8000f32:	701a      	strb	r2, [r3, #0]
		if (levelMenuIndex2 == 1)
 8000f34:	4b49      	ldr	r3, [pc, #292]	; (800105c <level_Menu+0x164>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d102      	bne.n	8000f42 <level_Menu+0x4a>
			levelMenuIndex = 1;
 8000f3c:	4b44      	ldr	r3, [pc, #272]	; (8001050 <level_Menu+0x158>)
 8000f3e:	2201      	movs	r2, #1
 8000f40:	601a      	str	r2, [r3, #0]
		if (levelMenuIndex2 == 2)
 8000f42:	4b46      	ldr	r3, [pc, #280]	; (800105c <level_Menu+0x164>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d102      	bne.n	8000f50 <level_Menu+0x58>
			levelMenuIndex = 2;
 8000f4a:	4b41      	ldr	r3, [pc, #260]	; (8001050 <level_Menu+0x158>)
 8000f4c:	2202      	movs	r2, #2
 8000f4e:	601a      	str	r2, [r3, #0]
		if (levelMenuIndex2 == 3)
 8000f50:	4b42      	ldr	r3, [pc, #264]	; (800105c <level_Menu+0x164>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2b03      	cmp	r3, #3
 8000f56:	d176      	bne.n	8001046 <level_Menu+0x14e>
			levelMenuIndex = 3;
 8000f58:	4b3d      	ldr	r3, [pc, #244]	; (8001050 <level_Menu+0x158>)
 8000f5a:	2203      	movs	r2, #3
 8000f5c:	601a      	str	r2, [r3, #0]
		break;
 8000f5e:	e072      	b.n	8001046 <level_Menu+0x14e>
	case 1:
		blockUp = false;
 8000f60:	4b3d      	ldr	r3, [pc, #244]	; (8001058 <level_Menu+0x160>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	701a      	strb	r2, [r3, #0]
		mainMenu = false;
 8000f66:	4b3e      	ldr	r3, [pc, #248]	; (8001060 <level_Menu+0x168>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	701a      	strb	r2, [r3, #0]
		blockPress = false;
 8000f6c:	4b3d      	ldr	r3, [pc, #244]	; (8001064 <level_Menu+0x16c>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	701a      	strb	r2, [r3, #0]
		createInvertedWord("Easy", 0x40, 4, 0, 0);
 8000f72:	2300      	movs	r3, #0
 8000f74:	9300      	str	r3, [sp, #0]
 8000f76:	2300      	movs	r3, #0
 8000f78:	2204      	movs	r2, #4
 8000f7a:	2140      	movs	r1, #64	; 0x40
 8000f7c:	483a      	ldr	r0, [pc, #232]	; (8001068 <level_Menu+0x170>)
 8000f7e:	f002 f899 	bl	80030b4 <createInvertedWord>
		levelMenuIndexTemp = levelMenuIndex;
 8000f82:	4b33      	ldr	r3, [pc, #204]	; (8001050 <level_Menu+0x158>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a33      	ldr	r2, [pc, #204]	; (8001054 <level_Menu+0x15c>)
 8000f88:	6013      	str	r3, [r2, #0]
		levelMenuIndex = 50;
 8000f8a:	4b31      	ldr	r3, [pc, #196]	; (8001050 <level_Menu+0x158>)
 8000f8c:	2232      	movs	r2, #50	; 0x32
 8000f8e:	601a      	str	r2, [r3, #0]
		if (medium) {
 8000f90:	4b36      	ldr	r3, [pc, #216]	; (800106c <level_Menu+0x174>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d008      	beq.n	8000faa <level_Menu+0xb2>
			LCD_SetLocalization(0x14);
 8000f98:	2014      	movs	r0, #20
 8000f9a:	f002 ff61 	bl	8003e60 <LCD_SetLocalization>
			LCD_SendWord("Medium");
 8000f9e:	4834      	ldr	r0, [pc, #208]	; (8001070 <level_Menu+0x178>)
 8000fa0:	f002 ff6e 	bl	8003e80 <LCD_SendWord>
			medium = false;
 8000fa4:	4b31      	ldr	r3, [pc, #196]	; (800106c <level_Menu+0x174>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	701a      	strb	r2, [r3, #0]
		}
		pickedLevel = true;
 8000faa:	4b32      	ldr	r3, [pc, #200]	; (8001074 <level_Menu+0x17c>)
 8000fac:	2201      	movs	r2, #1
 8000fae:	701a      	strb	r2, [r3, #0]
		break;
 8000fb0:	e04a      	b.n	8001048 <level_Menu+0x150>
	case 2:
		blockUp = false;
 8000fb2:	4b29      	ldr	r3, [pc, #164]	; (8001058 <level_Menu+0x160>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	701a      	strb	r2, [r3, #0]
		LCD_SetLocalization(0x40);
 8000fb8:	2040      	movs	r0, #64	; 0x40
 8000fba:	f002 ff51 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("Easy");
 8000fbe:	482a      	ldr	r0, [pc, #168]	; (8001068 <level_Menu+0x170>)
 8000fc0:	f002 ff5e 	bl	8003e80 <LCD_SendWord>
		createInvertedWord("Medium", 0x14, 6, 0, 0);
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	9300      	str	r3, [sp, #0]
 8000fc8:	2300      	movs	r3, #0
 8000fca:	2206      	movs	r2, #6
 8000fcc:	2114      	movs	r1, #20
 8000fce:	4828      	ldr	r0, [pc, #160]	; (8001070 <level_Menu+0x178>)
 8000fd0:	f002 f870 	bl	80030b4 <createInvertedWord>
		if (hard) {
 8000fd4:	4b28      	ldr	r3, [pc, #160]	; (8001078 <level_Menu+0x180>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d008      	beq.n	8000fee <level_Menu+0xf6>
			LCD_SetLocalization(0x54);
 8000fdc:	2054      	movs	r0, #84	; 0x54
 8000fde:	f002 ff3f 	bl	8003e60 <LCD_SetLocalization>
			LCD_SendWord("Hard");
 8000fe2:	4826      	ldr	r0, [pc, #152]	; (800107c <level_Menu+0x184>)
 8000fe4:	f002 ff4c 	bl	8003e80 <LCD_SendWord>
			hard = false;
 8000fe8:	4b23      	ldr	r3, [pc, #140]	; (8001078 <level_Menu+0x180>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	701a      	strb	r2, [r3, #0]
		}
		levelMenuIndexTemp = levelMenuIndex;
 8000fee:	4b18      	ldr	r3, [pc, #96]	; (8001050 <level_Menu+0x158>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a18      	ldr	r2, [pc, #96]	; (8001054 <level_Menu+0x15c>)
 8000ff4:	6013      	str	r3, [r2, #0]
		levelMenuIndex = 50;
 8000ff6:	4b16      	ldr	r3, [pc, #88]	; (8001050 <level_Menu+0x158>)
 8000ff8:	2232      	movs	r2, #50	; 0x32
 8000ffa:	601a      	str	r2, [r3, #0]
		medium = true;
 8000ffc:	4b1b      	ldr	r3, [pc, #108]	; (800106c <level_Menu+0x174>)
 8000ffe:	2201      	movs	r2, #1
 8001000:	701a      	strb	r2, [r3, #0]
		pickedLevel = true;
 8001002:	4b1c      	ldr	r3, [pc, #112]	; (8001074 <level_Menu+0x17c>)
 8001004:	2201      	movs	r2, #1
 8001006:	701a      	strb	r2, [r3, #0]
		break;
 8001008:	e01e      	b.n	8001048 <level_Menu+0x150>
	case 3:
		LCD_SetLocalization(0x14);
 800100a:	2014      	movs	r0, #20
 800100c:	f002 ff28 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("Medium");
 8001010:	4817      	ldr	r0, [pc, #92]	; (8001070 <level_Menu+0x178>)
 8001012:	f002 ff35 	bl	8003e80 <LCD_SendWord>
		createInvertedWord("Hard", 0x54, 6, 0, 0);
 8001016:	2300      	movs	r3, #0
 8001018:	9300      	str	r3, [sp, #0]
 800101a:	2300      	movs	r3, #0
 800101c:	2206      	movs	r2, #6
 800101e:	2154      	movs	r1, #84	; 0x54
 8001020:	4816      	ldr	r0, [pc, #88]	; (800107c <level_Menu+0x184>)
 8001022:	f002 f847 	bl	80030b4 <createInvertedWord>
		levelMenuIndexTemp = levelMenuIndex;
 8001026:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <level_Menu+0x158>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a0a      	ldr	r2, [pc, #40]	; (8001054 <level_Menu+0x15c>)
 800102c:	6013      	str	r3, [r2, #0]
		levelMenuIndex = 50;
 800102e:	4b08      	ldr	r3, [pc, #32]	; (8001050 <level_Menu+0x158>)
 8001030:	2232      	movs	r2, #50	; 0x32
 8001032:	601a      	str	r2, [r3, #0]
		hard = true;
 8001034:	4b10      	ldr	r3, [pc, #64]	; (8001078 <level_Menu+0x180>)
 8001036:	2201      	movs	r2, #1
 8001038:	701a      	strb	r2, [r3, #0]
		pickedLevel = true;
 800103a:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <level_Menu+0x17c>)
 800103c:	2201      	movs	r2, #1
 800103e:	701a      	strb	r2, [r3, #0]
		break;
 8001040:	e002      	b.n	8001048 <level_Menu+0x150>
	default:
		break;
 8001042:	bf00      	nop
 8001044:	e000      	b.n	8001048 <level_Menu+0x150>
		break;
 8001046:	bf00      	nop
	}
}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000004 	.word	0x20000004
 8001054:	20000008 	.word	0x20000008
 8001058:	2000001a 	.word	0x2000001a
 800105c:	200003fc 	.word	0x200003fc
 8001060:	200003cb 	.word	0x200003cb
 8001064:	20000019 	.word	0x20000019
 8001068:	0800aba4 	.word	0x0800aba4
 800106c:	200003d0 	.word	0x200003d0
 8001070:	0800abac 	.word	0x0800abac
 8001074:	200003ce 	.word	0x200003ce
 8001078:	200003cf 	.word	0x200003cf
 800107c:	0800abb4 	.word	0x0800abb4

08001080 <level_Menu_Picked>:
void level_Menu_Picked() {
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
	switch (levelMenuIndexTemp) {
 8001084:	4b49      	ldr	r3, [pc, #292]	; (80011ac <level_Menu_Picked+0x12c>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2b02      	cmp	r3, #2
 800108a:	d030      	beq.n	80010ee <level_Menu_Picked+0x6e>
 800108c:	2b03      	cmp	r3, #3
 800108e:	d05a      	beq.n	8001146 <level_Menu_Picked+0xc6>
 8001090:	2b01      	cmp	r3, #1
 8001092:	d000      	beq.n	8001096 <level_Menu_Picked+0x16>
			levelMenuIndex = 3;
			blockJoystick();
		}
		break;
	default:
		break;
 8001094:	e088      	b.n	80011a8 <level_Menu_Picked+0x128>
		blockPress = false;
 8001096:	4b46      	ldr	r3, [pc, #280]	; (80011b0 <level_Menu_Picked+0x130>)
 8001098:	2200      	movs	r2, #0
 800109a:	701a      	strb	r2, [r3, #0]
		if (Press == GPIO_PIN_RESET) {
 800109c:	4b45      	ldr	r3, [pc, #276]	; (80011b4 <level_Menu_Picked+0x134>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d17c      	bne.n	800119e <level_Menu_Picked+0x11e>
			lcd_cls();
 80010a4:	f002 fe86 	bl	8003db4 <lcd_cls>
			selectedLevel = 'E';
 80010a8:	4b43      	ldr	r3, [pc, #268]	; (80011b8 <level_Menu_Picked+0x138>)
 80010aa:	2245      	movs	r2, #69	; 0x45
 80010ac:	701a      	strb	r2, [r3, #0]
			LCD_SetLocalization(0x42);
 80010ae:	2042      	movs	r0, #66	; 0x42
 80010b0:	f002 fed6 	bl	8003e60 <LCD_SetLocalization>
			LCD_SendWord("Selected level:");
 80010b4:	4841      	ldr	r0, [pc, #260]	; (80011bc <level_Menu_Picked+0x13c>)
 80010b6:	f002 fee3 	bl	8003e80 <LCD_SendWord>
			LCD_SetLocalization(0x1C);
 80010ba:	201c      	movs	r0, #28
 80010bc:	f002 fed0 	bl	8003e60 <LCD_SetLocalization>
			LCD_SendWord("Easy");
 80010c0:	483f      	ldr	r0, [pc, #252]	; (80011c0 <level_Menu_Picked+0x140>)
 80010c2:	f002 fedd 	bl	8003e80 <LCD_SendWord>
			blockJoystick();
 80010c6:	f001 fedf 	bl	8002e88 <blockJoystick>
			levelMenu = false;
 80010ca:	4b3e      	ldr	r3, [pc, #248]	; (80011c4 <level_Menu_Picked+0x144>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	701a      	strb	r2, [r3, #0]
			Fade = true;
 80010d0:	4b3d      	ldr	r3, [pc, #244]	; (80011c8 <level_Menu_Picked+0x148>)
 80010d2:	2201      	movs	r2, #1
 80010d4:	701a      	strb	r2, [r3, #0]
			upperText = true;
 80010d6:	4b3d      	ldr	r3, [pc, #244]	; (80011cc <level_Menu_Picked+0x14c>)
 80010d8:	2201      	movs	r2, #1
 80010da:	701a      	strb	r2, [r3, #0]
			pickedLevel = false;
 80010dc:	4b3c      	ldr	r3, [pc, #240]	; (80011d0 <level_Menu_Picked+0x150>)
 80010de:	2200      	movs	r2, #0
 80010e0:	701a      	strb	r2, [r3, #0]
			levelMenuIndex = 1;
 80010e2:	4b3c      	ldr	r3, [pc, #240]	; (80011d4 <level_Menu_Picked+0x154>)
 80010e4:	2201      	movs	r2, #1
 80010e6:	601a      	str	r2, [r3, #0]
			blockJoystick();
 80010e8:	f001 fece 	bl	8002e88 <blockJoystick>
		break;
 80010ec:	e057      	b.n	800119e <level_Menu_Picked+0x11e>
		blockPress = false;
 80010ee:	4b30      	ldr	r3, [pc, #192]	; (80011b0 <level_Menu_Picked+0x130>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	701a      	strb	r2, [r3, #0]
		if (Press == GPIO_PIN_RESET) {
 80010f4:	4b2f      	ldr	r3, [pc, #188]	; (80011b4 <level_Menu_Picked+0x134>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d152      	bne.n	80011a2 <level_Menu_Picked+0x122>
			lcd_cls();
 80010fc:	f002 fe5a 	bl	8003db4 <lcd_cls>
			selectedLevel = 'M';
 8001100:	4b2d      	ldr	r3, [pc, #180]	; (80011b8 <level_Menu_Picked+0x138>)
 8001102:	224d      	movs	r2, #77	; 0x4d
 8001104:	701a      	strb	r2, [r3, #0]
			LCD_SetLocalization(0x42);
 8001106:	2042      	movs	r0, #66	; 0x42
 8001108:	f002 feaa 	bl	8003e60 <LCD_SetLocalization>
			LCD_SendWord("Selected level:");
 800110c:	482b      	ldr	r0, [pc, #172]	; (80011bc <level_Menu_Picked+0x13c>)
 800110e:	f002 feb7 	bl	8003e80 <LCD_SendWord>
			LCD_SetLocalization(0x1B);
 8001112:	201b      	movs	r0, #27
 8001114:	f002 fea4 	bl	8003e60 <LCD_SetLocalization>
			LCD_SendWord("Medium");
 8001118:	482f      	ldr	r0, [pc, #188]	; (80011d8 <level_Menu_Picked+0x158>)
 800111a:	f002 feb1 	bl	8003e80 <LCD_SendWord>
			blockJoystick();
 800111e:	f001 feb3 	bl	8002e88 <blockJoystick>
			levelMenu = false;
 8001122:	4b28      	ldr	r3, [pc, #160]	; (80011c4 <level_Menu_Picked+0x144>)
 8001124:	2200      	movs	r2, #0
 8001126:	701a      	strb	r2, [r3, #0]
			Fade = true;
 8001128:	4b27      	ldr	r3, [pc, #156]	; (80011c8 <level_Menu_Picked+0x148>)
 800112a:	2201      	movs	r2, #1
 800112c:	701a      	strb	r2, [r3, #0]
			upperText = true;
 800112e:	4b27      	ldr	r3, [pc, #156]	; (80011cc <level_Menu_Picked+0x14c>)
 8001130:	2201      	movs	r2, #1
 8001132:	701a      	strb	r2, [r3, #0]
			pickedLevel = false;
 8001134:	4b26      	ldr	r3, [pc, #152]	; (80011d0 <level_Menu_Picked+0x150>)
 8001136:	2200      	movs	r2, #0
 8001138:	701a      	strb	r2, [r3, #0]
			levelMenuIndex = 2;
 800113a:	4b26      	ldr	r3, [pc, #152]	; (80011d4 <level_Menu_Picked+0x154>)
 800113c:	2202      	movs	r2, #2
 800113e:	601a      	str	r2, [r3, #0]
			blockJoystick();
 8001140:	f001 fea2 	bl	8002e88 <blockJoystick>
		break;
 8001144:	e02d      	b.n	80011a2 <level_Menu_Picked+0x122>
		blockPress = false;
 8001146:	4b1a      	ldr	r3, [pc, #104]	; (80011b0 <level_Menu_Picked+0x130>)
 8001148:	2200      	movs	r2, #0
 800114a:	701a      	strb	r2, [r3, #0]
		if (Press == GPIO_PIN_RESET) {
 800114c:	4b19      	ldr	r3, [pc, #100]	; (80011b4 <level_Menu_Picked+0x134>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d128      	bne.n	80011a6 <level_Menu_Picked+0x126>
			lcd_cls();
 8001154:	f002 fe2e 	bl	8003db4 <lcd_cls>
			selectedLevel = 'H';
 8001158:	4b17      	ldr	r3, [pc, #92]	; (80011b8 <level_Menu_Picked+0x138>)
 800115a:	2248      	movs	r2, #72	; 0x48
 800115c:	701a      	strb	r2, [r3, #0]
			LCD_SetLocalization(0x42);
 800115e:	2042      	movs	r0, #66	; 0x42
 8001160:	f002 fe7e 	bl	8003e60 <LCD_SetLocalization>
			LCD_SendWord("Selected level:");
 8001164:	4815      	ldr	r0, [pc, #84]	; (80011bc <level_Menu_Picked+0x13c>)
 8001166:	f002 fe8b 	bl	8003e80 <LCD_SendWord>
			LCD_SetLocalization(0x1C);
 800116a:	201c      	movs	r0, #28
 800116c:	f002 fe78 	bl	8003e60 <LCD_SetLocalization>
			LCD_SendWord("Hard");
 8001170:	481a      	ldr	r0, [pc, #104]	; (80011dc <level_Menu_Picked+0x15c>)
 8001172:	f002 fe85 	bl	8003e80 <LCD_SendWord>
			blockJoystick();
 8001176:	f001 fe87 	bl	8002e88 <blockJoystick>
			levelMenu = false;
 800117a:	4b12      	ldr	r3, [pc, #72]	; (80011c4 <level_Menu_Picked+0x144>)
 800117c:	2200      	movs	r2, #0
 800117e:	701a      	strb	r2, [r3, #0]
			Fade = true;
 8001180:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <level_Menu_Picked+0x148>)
 8001182:	2201      	movs	r2, #1
 8001184:	701a      	strb	r2, [r3, #0]
			upperText = true;
 8001186:	4b11      	ldr	r3, [pc, #68]	; (80011cc <level_Menu_Picked+0x14c>)
 8001188:	2201      	movs	r2, #1
 800118a:	701a      	strb	r2, [r3, #0]
			pickedLevel = false;
 800118c:	4b10      	ldr	r3, [pc, #64]	; (80011d0 <level_Menu_Picked+0x150>)
 800118e:	2200      	movs	r2, #0
 8001190:	701a      	strb	r2, [r3, #0]
			levelMenuIndex = 3;
 8001192:	4b10      	ldr	r3, [pc, #64]	; (80011d4 <level_Menu_Picked+0x154>)
 8001194:	2203      	movs	r2, #3
 8001196:	601a      	str	r2, [r3, #0]
			blockJoystick();
 8001198:	f001 fe76 	bl	8002e88 <blockJoystick>
		break;
 800119c:	e003      	b.n	80011a6 <level_Menu_Picked+0x126>
		break;
 800119e:	bf00      	nop
 80011a0:	e002      	b.n	80011a8 <level_Menu_Picked+0x128>
		break;
 80011a2:	bf00      	nop
 80011a4:	e000      	b.n	80011a8 <level_Menu_Picked+0x128>
		break;
 80011a6:	bf00      	nop
	}
}
 80011a8:	bf00      	nop
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	20000008 	.word	0x20000008
 80011b0:	20000019 	.word	0x20000019
 80011b4:	20000404 	.word	0x20000404
 80011b8:	20000010 	.word	0x20000010
 80011bc:	0800abbc 	.word	0x0800abbc
 80011c0:	0800aba4 	.word	0x0800aba4
 80011c4:	200003cd 	.word	0x200003cd
 80011c8:	200003ca 	.word	0x200003ca
 80011cc:	200003cc 	.word	0x200003cc
 80011d0:	200003ce 	.word	0x200003ce
 80011d4:	20000004 	.word	0x20000004
 80011d8:	0800abac 	.word	0x0800abac
 80011dc:	0800abb4 	.word	0x0800abb4

080011e0 <Menu_Conditions>:

void Menu_Conditions() {
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
	if (mainMenuIndex == 0 && !levelMenu)
 80011e4:	4b70      	ldr	r3, [pc, #448]	; (80013a8 <Menu_Conditions+0x1c8>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d109      	bne.n	8001200 <Menu_Conditions+0x20>
 80011ec:	4b6f      	ldr	r3, [pc, #444]	; (80013ac <Menu_Conditions+0x1cc>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	f083 0301 	eor.w	r3, r3, #1
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d002      	beq.n	8001200 <Menu_Conditions+0x20>
		mainMenu = true;
 80011fa:	4b6d      	ldr	r3, [pc, #436]	; (80013b0 <Menu_Conditions+0x1d0>)
 80011fc:	2201      	movs	r2, #1
 80011fe:	701a      	strb	r2, [r3, #0]

	if (levelMenu)
 8001200:	4b6a      	ldr	r3, [pc, #424]	; (80013ac <Menu_Conditions+0x1cc>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d002      	beq.n	800120e <Menu_Conditions+0x2e>
		mainMenu = false;
 8001208:	4b69      	ldr	r3, [pc, #420]	; (80013b0 <Menu_Conditions+0x1d0>)
 800120a:	2200      	movs	r2, #0
 800120c:	701a      	strb	r2, [r3, #0]

	if (mainMenu && !levelMenu) {
 800120e:	4b68      	ldr	r3, [pc, #416]	; (80013b0 <Menu_Conditions+0x1d0>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d022      	beq.n	800125c <Menu_Conditions+0x7c>
 8001216:	4b65      	ldr	r3, [pc, #404]	; (80013ac <Menu_Conditions+0x1cc>)
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	f083 0301 	eor.w	r3, r3, #1
 800121e:	b2db      	uxtb	r3, r3
 8001220:	2b00      	cmp	r3, #0
 8001222:	d01b      	beq.n	800125c <Menu_Conditions+0x7c>
		blockLeft = true;
 8001224:	4b63      	ldr	r3, [pc, #396]	; (80013b4 <Menu_Conditions+0x1d4>)
 8001226:	2201      	movs	r2, #1
 8001228:	701a      	strb	r2, [r3, #0]
		blockRight = true;
 800122a:	4b63      	ldr	r3, [pc, #396]	; (80013b8 <Menu_Conditions+0x1d8>)
 800122c:	2201      	movs	r2, #1
 800122e:	701a      	strb	r2, [r3, #0]
		if (mainMenuIndexTemp == 0) {
 8001230:	4b62      	ldr	r3, [pc, #392]	; (80013bc <Menu_Conditions+0x1dc>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d103      	bne.n	8001240 <Menu_Conditions+0x60>
			blockUp = true;
 8001238:	4b61      	ldr	r3, [pc, #388]	; (80013c0 <Menu_Conditions+0x1e0>)
 800123a:	2201      	movs	r2, #1
 800123c:	701a      	strb	r2, [r3, #0]
 800123e:	e002      	b.n	8001246 <Menu_Conditions+0x66>
		} else {
			blockUp = false;
 8001240:	4b5f      	ldr	r3, [pc, #380]	; (80013c0 <Menu_Conditions+0x1e0>)
 8001242:	2200      	movs	r2, #0
 8001244:	701a      	strb	r2, [r3, #0]
		}
		if (mainMenuIndexTemp == 5) {
 8001246:	4b5d      	ldr	r3, [pc, #372]	; (80013bc <Menu_Conditions+0x1dc>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	2b05      	cmp	r3, #5
 800124c:	d103      	bne.n	8001256 <Menu_Conditions+0x76>
			blockDown = true;
 800124e:	4b5d      	ldr	r3, [pc, #372]	; (80013c4 <Menu_Conditions+0x1e4>)
 8001250:	2201      	movs	r2, #1
 8001252:	701a      	strb	r2, [r3, #0]
 8001254:	e002      	b.n	800125c <Menu_Conditions+0x7c>
		} else {
			blockDown = false;
 8001256:	4b5b      	ldr	r3, [pc, #364]	; (80013c4 <Menu_Conditions+0x1e4>)
 8001258:	2200      	movs	r2, #0
 800125a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (!mainMenu && levelMenu) {
 800125c:	4b54      	ldr	r3, [pc, #336]	; (80013b0 <Menu_Conditions+0x1d0>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	f083 0301 	eor.w	r3, r3, #1
 8001264:	b2db      	uxtb	r3, r3
 8001266:	2b00      	cmp	r3, #0
 8001268:	d01f      	beq.n	80012aa <Menu_Conditions+0xca>
 800126a:	4b50      	ldr	r3, [pc, #320]	; (80013ac <Menu_Conditions+0x1cc>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d01b      	beq.n	80012aa <Menu_Conditions+0xca>
		blockLeft = true;
 8001272:	4b50      	ldr	r3, [pc, #320]	; (80013b4 <Menu_Conditions+0x1d4>)
 8001274:	2201      	movs	r2, #1
 8001276:	701a      	strb	r2, [r3, #0]
		blockRight = true;
 8001278:	4b4f      	ldr	r3, [pc, #316]	; (80013b8 <Menu_Conditions+0x1d8>)
 800127a:	2201      	movs	r2, #1
 800127c:	701a      	strb	r2, [r3, #0]
		if (levelMenuIndexTemp == 1) {
 800127e:	4b52      	ldr	r3, [pc, #328]	; (80013c8 <Menu_Conditions+0x1e8>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	2b01      	cmp	r3, #1
 8001284:	d103      	bne.n	800128e <Menu_Conditions+0xae>
			blockUp = true;
 8001286:	4b4e      	ldr	r3, [pc, #312]	; (80013c0 <Menu_Conditions+0x1e0>)
 8001288:	2201      	movs	r2, #1
 800128a:	701a      	strb	r2, [r3, #0]
 800128c:	e002      	b.n	8001294 <Menu_Conditions+0xb4>
		} else {
			blockUp = false;
 800128e:	4b4c      	ldr	r3, [pc, #304]	; (80013c0 <Menu_Conditions+0x1e0>)
 8001290:	2200      	movs	r2, #0
 8001292:	701a      	strb	r2, [r3, #0]
		}
		if (levelMenuIndexTemp == 3) {
 8001294:	4b4c      	ldr	r3, [pc, #304]	; (80013c8 <Menu_Conditions+0x1e8>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2b03      	cmp	r3, #3
 800129a:	d103      	bne.n	80012a4 <Menu_Conditions+0xc4>
			blockDown = true;
 800129c:	4b49      	ldr	r3, [pc, #292]	; (80013c4 <Menu_Conditions+0x1e4>)
 800129e:	2201      	movs	r2, #1
 80012a0:	701a      	strb	r2, [r3, #0]
 80012a2:	e002      	b.n	80012aa <Menu_Conditions+0xca>
		} else {
			blockDown = false;
 80012a4:	4b47      	ldr	r3, [pc, #284]	; (80013c4 <Menu_Conditions+0x1e4>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (levelMenuIndexTemp > 0 && levelMenuIndexTemp < 3
 80012aa:	4b47      	ldr	r3, [pc, #284]	; (80013c8 <Menu_Conditions+0x1e8>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	dd03      	ble.n	80012ba <Menu_Conditions+0xda>
 80012b2:	4b45      	ldr	r3, [pc, #276]	; (80013c8 <Menu_Conditions+0x1e8>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	dd07      	ble.n	80012ca <Menu_Conditions+0xea>
			|| mainMenuIndexTemp > 0 && mainMenuIndexTemp < 5)
 80012ba:	4b40      	ldr	r3, [pc, #256]	; (80013bc <Menu_Conditions+0x1dc>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	dd06      	ble.n	80012d0 <Menu_Conditions+0xf0>
 80012c2:	4b3e      	ldr	r3, [pc, #248]	; (80013bc <Menu_Conditions+0x1dc>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2b04      	cmp	r3, #4
 80012c8:	dc02      	bgt.n	80012d0 <Menu_Conditions+0xf0>
		blockPress = false;
 80012ca:	4b40      	ldr	r3, [pc, #256]	; (80013cc <Menu_Conditions+0x1ec>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	701a      	strb	r2, [r3, #0]

	if (levelMenuIndexTemp == 0 && !mainMenu) {
 80012d0:	4b3d      	ldr	r3, [pc, #244]	; (80013c8 <Menu_Conditions+0x1e8>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d10c      	bne.n	80012f2 <Menu_Conditions+0x112>
 80012d8:	4b35      	ldr	r3, [pc, #212]	; (80013b0 <Menu_Conditions+0x1d0>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	f083 0301 	eor.w	r3, r3, #1
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d005      	beq.n	80012f2 <Menu_Conditions+0x112>
		blockPress = true;
 80012e6:	4b39      	ldr	r3, [pc, #228]	; (80013cc <Menu_Conditions+0x1ec>)
 80012e8:	2201      	movs	r2, #1
 80012ea:	701a      	strb	r2, [r3, #0]
		blockUp = true;
 80012ec:	4b34      	ldr	r3, [pc, #208]	; (80013c0 <Menu_Conditions+0x1e0>)
 80012ee:	2201      	movs	r2, #1
 80012f0:	701a      	strb	r2, [r3, #0]
	}

	if (hiscoreMenuIndexTemp >= 0 && hiscoreMenuIndexTemp <= 4 && hiscoreMenu)
 80012f2:	4b37      	ldr	r3, [pc, #220]	; (80013d0 <Menu_Conditions+0x1f0>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	db0a      	blt.n	8001310 <Menu_Conditions+0x130>
 80012fa:	4b35      	ldr	r3, [pc, #212]	; (80013d0 <Menu_Conditions+0x1f0>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2b04      	cmp	r3, #4
 8001300:	dc06      	bgt.n	8001310 <Menu_Conditions+0x130>
 8001302:	4b34      	ldr	r3, [pc, #208]	; (80013d4 <Menu_Conditions+0x1f4>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d002      	beq.n	8001310 <Menu_Conditions+0x130>
		blockPress = true;
 800130a:	4b30      	ldr	r3, [pc, #192]	; (80013cc <Menu_Conditions+0x1ec>)
 800130c:	2201      	movs	r2, #1
 800130e:	701a      	strb	r2, [r3, #0]

	if (hiscoreMenuIndexTemp == 5)
 8001310:	4b2f      	ldr	r3, [pc, #188]	; (80013d0 <Menu_Conditions+0x1f0>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2b05      	cmp	r3, #5
 8001316:	d102      	bne.n	800131e <Menu_Conditions+0x13e>
		blockPress = false;
 8001318:	4b2c      	ldr	r3, [pc, #176]	; (80013cc <Menu_Conditions+0x1ec>)
 800131a:	2200      	movs	r2, #0
 800131c:	701a      	strb	r2, [r3, #0]

	if (hiscoreMenuIndexTemp > 1 && hiscoreMenuIndexTemp < 6 && hiscoreMenu)
 800131e:	4b2c      	ldr	r3, [pc, #176]	; (80013d0 <Menu_Conditions+0x1f0>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	2b01      	cmp	r3, #1
 8001324:	dd0a      	ble.n	800133c <Menu_Conditions+0x15c>
 8001326:	4b2a      	ldr	r3, [pc, #168]	; (80013d0 <Menu_Conditions+0x1f0>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2b05      	cmp	r3, #5
 800132c:	dc06      	bgt.n	800133c <Menu_Conditions+0x15c>
 800132e:	4b29      	ldr	r3, [pc, #164]	; (80013d4 <Menu_Conditions+0x1f4>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d002      	beq.n	800133c <Menu_Conditions+0x15c>
		blockUp = false;
 8001336:	4b22      	ldr	r3, [pc, #136]	; (80013c0 <Menu_Conditions+0x1e0>)
 8001338:	2200      	movs	r2, #0
 800133a:	701a      	strb	r2, [r3, #0]

	if (creditsMenuIndexTemp == 0)
 800133c:	4b26      	ldr	r3, [pc, #152]	; (80013d8 <Menu_Conditions+0x1f8>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d102      	bne.n	800134a <Menu_Conditions+0x16a>
		blockPress = true;
 8001344:	4b21      	ldr	r3, [pc, #132]	; (80013cc <Menu_Conditions+0x1ec>)
 8001346:	2201      	movs	r2, #1
 8001348:	701a      	strb	r2, [r3, #0]

	if (backPicked)
 800134a:	4b24      	ldr	r3, [pc, #144]	; (80013dc <Menu_Conditions+0x1fc>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d002      	beq.n	8001358 <Menu_Conditions+0x178>
		blockDown = true;
 8001352:	4b1c      	ldr	r3, [pc, #112]	; (80013c4 <Menu_Conditions+0x1e4>)
 8001354:	2201      	movs	r2, #1
 8001356:	701a      	strb	r2, [r3, #0]

	if (!backPicked && creditsMenuMarked)
 8001358:	4b20      	ldr	r3, [pc, #128]	; (80013dc <Menu_Conditions+0x1fc>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	f083 0301 	eor.w	r3, r3, #1
 8001360:	b2db      	uxtb	r3, r3
 8001362:	2b00      	cmp	r3, #0
 8001364:	d006      	beq.n	8001374 <Menu_Conditions+0x194>
 8001366:	4b1e      	ldr	r3, [pc, #120]	; (80013e0 <Menu_Conditions+0x200>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d002      	beq.n	8001374 <Menu_Conditions+0x194>
		blockPress = true;
 800136e:	4b17      	ldr	r3, [pc, #92]	; (80013cc <Menu_Conditions+0x1ec>)
 8001370:	2201      	movs	r2, #1
 8001372:	701a      	strb	r2, [r3, #0]

	if (intro) {
 8001374:	4b1b      	ldr	r3, [pc, #108]	; (80013e4 <Menu_Conditions+0x204>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d013      	beq.n	80013a4 <Menu_Conditions+0x1c4>
		if (Press == GPIO_PIN_RESET) {
 800137c:	4b1a      	ldr	r3, [pc, #104]	; (80013e8 <Menu_Conditions+0x208>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d10f      	bne.n	80013a4 <Menu_Conditions+0x1c4>
			HAL_GPIO_TogglePin(GPIOB,
 8001384:	f244 0181 	movw	r1, #16513	; 0x4081
 8001388:	4818      	ldr	r0, [pc, #96]	; (80013ec <Menu_Conditions+0x20c>)
 800138a:	f006 f828 	bl	80073de <HAL_GPIO_TogglePin>
			GPIO_PIN_0 | GPIO_PIN_7 | GPIO_PIN_14);
			intro = false;
 800138e:	4b15      	ldr	r3, [pc, #84]	; (80013e4 <Menu_Conditions+0x204>)
 8001390:	2200      	movs	r2, #0
 8001392:	701a      	strb	r2, [r3, #0]
			mainMenu = true;
 8001394:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <Menu_Conditions+0x1d0>)
 8001396:	2201      	movs	r2, #1
 8001398:	701a      	strb	r2, [r3, #0]
			lcd_cls();
 800139a:	f002 fd0b 	bl	8003db4 <lcd_cls>
			mainMenuIndex = 0;
 800139e:	4b02      	ldr	r3, [pc, #8]	; (80013a8 <Menu_Conditions+0x1c8>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
		}
	}
}
 80013a4:	bf00      	nop
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	20000000 	.word	0x20000000
 80013ac:	200003cd 	.word	0x200003cd
 80013b0:	200003cb 	.word	0x200003cb
 80013b4:	2000001d 	.word	0x2000001d
 80013b8:	2000001c 	.word	0x2000001c
 80013bc:	20000408 	.word	0x20000408
 80013c0:	2000001a 	.word	0x2000001a
 80013c4:	2000001b 	.word	0x2000001b
 80013c8:	20000008 	.word	0x20000008
 80013cc:	20000019 	.word	0x20000019
 80013d0:	20000400 	.word	0x20000400
 80013d4:	200003c8 	.word	0x200003c8
 80013d8:	200003b8 	.word	0x200003b8
 80013dc:	200003d8 	.word	0x200003d8
 80013e0:	200003d7 	.word	0x200003d7
 80013e4:	20000018 	.word	0x20000018
 80013e8:	20000404 	.word	0x20000404
 80013ec:	40020400 	.word	0x40020400

080013f0 <highscoresAnimation>:

void highscoresAnimation() {
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
	switch (highscoresIndexAnim) {
 80013f4:	4bbe      	ldr	r3, [pc, #760]	; (80016f0 <highscoresAnimation+0x300>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2b0a      	cmp	r3, #10
 80013fa:	f200 8162 	bhi.w	80016c2 <highscoresAnimation+0x2d2>
 80013fe:	a201      	add	r2, pc, #4	; (adr r2, 8001404 <highscoresAnimation+0x14>)
 8001400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001404:	08001431 	.word	0x08001431
 8001408:	08001449 	.word	0x08001449
 800140c:	08001485 	.word	0x08001485
 8001410:	080014c7 	.word	0x080014c7
 8001414:	08001509 	.word	0x08001509
 8001418:	0800154b 	.word	0x0800154b
 800141c:	0800158d 	.word	0x0800158d
 8001420:	080015cf 	.word	0x080015cf
 8001424:	08001611 	.word	0x08001611
 8001428:	08001653 	.word	0x08001653
 800142c:	08001695 	.word	0x08001695
	case 0:
		reverse = false;
 8001430:	4bb0      	ldr	r3, [pc, #704]	; (80016f4 <highscoresAnimation+0x304>)
 8001432:	2200      	movs	r2, #0
 8001434:	701a      	strb	r2, [r3, #0]
		lcd_clear_1();
 8001436:	f002 fc8d 	bl	8003d54 <lcd_clear_1>
		LCD_SetLocalization(0x05);
 800143a:	2005      	movs	r0, #5
 800143c:	f002 fd10 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("HIGHSCORES");
 8001440:	48ad      	ldr	r0, [pc, #692]	; (80016f8 <highscoresAnimation+0x308>)
 8001442:	f002 fd1d 	bl	8003e80 <LCD_SendWord>
		break;
 8001446:	e13f      	b.n	80016c8 <highscoresAnimation+0x2d8>
	case 1:
		if (!reverse) {
 8001448:	4baa      	ldr	r3, [pc, #680]	; (80016f4 <highscoresAnimation+0x304>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	f083 0301 	eor.w	r3, r3, #1
 8001450:	b2db      	uxtb	r3, r3
 8001452:	2b00      	cmp	r3, #0
 8001454:	d006      	beq.n	8001464 <highscoresAnimation+0x74>
			LCD_SetLocalization(0x05);
 8001456:	2005      	movs	r0, #5
 8001458:	f002 fd02 	bl	8003e60 <LCD_SetLocalization>
			LCD_SendWord(" ");
 800145c:	48a7      	ldr	r0, [pc, #668]	; (80016fc <highscoresAnimation+0x30c>)
 800145e:	f002 fd0f 	bl	8003e80 <LCD_SendWord>
			LCD_SendWord(" ");
			LCD_SetLocalization(0x06);
			LCD_SendWord("I");
			reverse = false;
		}
		break;
 8001462:	e131      	b.n	80016c8 <highscoresAnimation+0x2d8>
			LCD_SetLocalization(0x05);
 8001464:	2005      	movs	r0, #5
 8001466:	f002 fcfb 	bl	8003e60 <LCD_SetLocalization>
			LCD_SendWord(" ");
 800146a:	48a4      	ldr	r0, [pc, #656]	; (80016fc <highscoresAnimation+0x30c>)
 800146c:	f002 fd08 	bl	8003e80 <LCD_SendWord>
			LCD_SetLocalization(0x06);
 8001470:	2006      	movs	r0, #6
 8001472:	f002 fcf5 	bl	8003e60 <LCD_SetLocalization>
			LCD_SendWord("I");
 8001476:	48a2      	ldr	r0, [pc, #648]	; (8001700 <highscoresAnimation+0x310>)
 8001478:	f002 fd02 	bl	8003e80 <LCD_SendWord>
			reverse = false;
 800147c:	4b9d      	ldr	r3, [pc, #628]	; (80016f4 <highscoresAnimation+0x304>)
 800147e:	2200      	movs	r2, #0
 8001480:	701a      	strb	r2, [r3, #0]
		break;
 8001482:	e121      	b.n	80016c8 <highscoresAnimation+0x2d8>
	case 2:
		if (!reverse) {
 8001484:	4b9b      	ldr	r3, [pc, #620]	; (80016f4 <highscoresAnimation+0x304>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	f083 0301 	eor.w	r3, r3, #1
 800148c:	b2db      	uxtb	r3, r3
 800148e:	2b00      	cmp	r3, #0
 8001490:	d00c      	beq.n	80014ac <highscoresAnimation+0xbc>
			LCD_SetLocalization(0x06);
 8001492:	2006      	movs	r0, #6
 8001494:	f002 fce4 	bl	8003e60 <LCD_SetLocalization>
			LCD_SendWord(" ");
 8001498:	4898      	ldr	r0, [pc, #608]	; (80016fc <highscoresAnimation+0x30c>)
 800149a:	f002 fcf1 	bl	8003e80 <LCD_SendWord>
			LCD_SetLocalization(0x05);
 800149e:	2005      	movs	r0, #5
 80014a0:	f002 fcde 	bl	8003e60 <LCD_SetLocalization>
			LCD_SendWord("H");
 80014a4:	4897      	ldr	r0, [pc, #604]	; (8001704 <highscoresAnimation+0x314>)
 80014a6:	f002 fceb 	bl	8003e80 <LCD_SendWord>
			LCD_SendWord(" ");
			LCD_SetLocalization(0x07);
			LCD_SendWord("G");
		}

		break;
 80014aa:	e10d      	b.n	80016c8 <highscoresAnimation+0x2d8>
			LCD_SetLocalization(0x06);
 80014ac:	2006      	movs	r0, #6
 80014ae:	f002 fcd7 	bl	8003e60 <LCD_SetLocalization>
			LCD_SendWord(" ");
 80014b2:	4892      	ldr	r0, [pc, #584]	; (80016fc <highscoresAnimation+0x30c>)
 80014b4:	f002 fce4 	bl	8003e80 <LCD_SendWord>
			LCD_SetLocalization(0x07);
 80014b8:	2007      	movs	r0, #7
 80014ba:	f002 fcd1 	bl	8003e60 <LCD_SetLocalization>
			LCD_SendWord("G");
 80014be:	4892      	ldr	r0, [pc, #584]	; (8001708 <highscoresAnimation+0x318>)
 80014c0:	f002 fcde 	bl	8003e80 <LCD_SendWord>
		break;
 80014c4:	e100      	b.n	80016c8 <highscoresAnimation+0x2d8>
	case 3:
		if (!reverse) {
 80014c6:	4b8b      	ldr	r3, [pc, #556]	; (80016f4 <highscoresAnimation+0x304>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	f083 0301 	eor.w	r3, r3, #1
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d00c      	beq.n	80014ee <highscoresAnimation+0xfe>
			LCD_SetLocalization(0x07);
 80014d4:	2007      	movs	r0, #7
 80014d6:	f002 fcc3 	bl	8003e60 <LCD_SetLocalization>
			LCD_SendWord(" ");
 80014da:	4888      	ldr	r0, [pc, #544]	; (80016fc <highscoresAnimation+0x30c>)
 80014dc:	f002 fcd0 	bl	8003e80 <LCD_SendWord>
			LCD_SetLocalization(0x06);
 80014e0:	2006      	movs	r0, #6
 80014e2:	f002 fcbd 	bl	8003e60 <LCD_SetLocalization>
			LCD_SendWord("I");
 80014e6:	4886      	ldr	r0, [pc, #536]	; (8001700 <highscoresAnimation+0x310>)
 80014e8:	f002 fcca 	bl	8003e80 <LCD_SendWord>
			LCD_SendWord(" ");
			LCD_SetLocalization(0x08);
			LCD_SendWord("H");
		}

		break;
 80014ec:	e0ec      	b.n	80016c8 <highscoresAnimation+0x2d8>
			LCD_SetLocalization(0x07);
 80014ee:	2007      	movs	r0, #7
 80014f0:	f002 fcb6 	bl	8003e60 <LCD_SetLocalization>
			LCD_SendWord(" ");
 80014f4:	4881      	ldr	r0, [pc, #516]	; (80016fc <highscoresAnimation+0x30c>)
 80014f6:	f002 fcc3 	bl	8003e80 <LCD_SendWord>
			LCD_SetLocalization(0x08);
 80014fa:	2008      	movs	r0, #8
 80014fc:	f002 fcb0 	bl	8003e60 <LCD_SetLocalization>
			LCD_SendWord("H");
 8001500:	4880      	ldr	r0, [pc, #512]	; (8001704 <highscoresAnimation+0x314>)
 8001502:	f002 fcbd 	bl	8003e80 <LCD_SendWord>
		break;
 8001506:	e0df      	b.n	80016c8 <highscoresAnimation+0x2d8>
	case 4:
		if (!reverse) {
 8001508:	4b7a      	ldr	r3, [pc, #488]	; (80016f4 <highscoresAnimation+0x304>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	f083 0301 	eor.w	r3, r3, #1
 8001510:	b2db      	uxtb	r3, r3
 8001512:	2b00      	cmp	r3, #0
 8001514:	d00c      	beq.n	8001530 <highscoresAnimation+0x140>
			LCD_SetLocalization(0x08);
 8001516:	2008      	movs	r0, #8
 8001518:	f002 fca2 	bl	8003e60 <LCD_SetLocalization>
			LCD_SendWord(" ");
 800151c:	4877      	ldr	r0, [pc, #476]	; (80016fc <highscoresAnimation+0x30c>)
 800151e:	f002 fcaf 	bl	8003e80 <LCD_SendWord>

			LCD_SetLocalization(0x07);
 8001522:	2007      	movs	r0, #7
 8001524:	f002 fc9c 	bl	8003e60 <LCD_SetLocalization>
			LCD_SendWord("G");
 8001528:	4877      	ldr	r0, [pc, #476]	; (8001708 <highscoresAnimation+0x318>)
 800152a:	f002 fca9 	bl	8003e80 <LCD_SendWord>
			LCD_SetLocalization(0x08);
			LCD_SendWord(" ");
			LCD_SetLocalization(0x09);
			LCD_SendWord("S");
		}
		break;
 800152e:	e0cb      	b.n	80016c8 <highscoresAnimation+0x2d8>
			LCD_SetLocalization(0x08);
 8001530:	2008      	movs	r0, #8
 8001532:	f002 fc95 	bl	8003e60 <LCD_SetLocalization>
			LCD_SendWord(" ");
 8001536:	4871      	ldr	r0, [pc, #452]	; (80016fc <highscoresAnimation+0x30c>)
 8001538:	f002 fca2 	bl	8003e80 <LCD_SendWord>
			LCD_SetLocalization(0x09);
 800153c:	2009      	movs	r0, #9
 800153e:	f002 fc8f 	bl	8003e60 <LCD_SetLocalization>
			LCD_SendWord("S");
 8001542:	4872      	ldr	r0, [pc, #456]	; (800170c <highscoresAnimation+0x31c>)
 8001544:	f002 fc9c 	bl	8003e80 <LCD_SendWord>
		break;
 8001548:	e0be      	b.n	80016c8 <highscoresAnimation+0x2d8>
	case 5:
		if (!reverse) {
 800154a:	4b6a      	ldr	r3, [pc, #424]	; (80016f4 <highscoresAnimation+0x304>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	f083 0301 	eor.w	r3, r3, #1
 8001552:	b2db      	uxtb	r3, r3
 8001554:	2b00      	cmp	r3, #0
 8001556:	d00c      	beq.n	8001572 <highscoresAnimation+0x182>
			LCD_SetLocalization(0x09);
 8001558:	2009      	movs	r0, #9
 800155a:	f002 fc81 	bl	8003e60 <LCD_SetLocalization>
			LCD_SendWord(" ");
 800155e:	4867      	ldr	r0, [pc, #412]	; (80016fc <highscoresAnimation+0x30c>)
 8001560:	f002 fc8e 	bl	8003e80 <LCD_SendWord>

			LCD_SetLocalization(0x08);
 8001564:	2008      	movs	r0, #8
 8001566:	f002 fc7b 	bl	8003e60 <LCD_SetLocalization>
			LCD_SendWord("H");
 800156a:	4866      	ldr	r0, [pc, #408]	; (8001704 <highscoresAnimation+0x314>)
 800156c:	f002 fc88 	bl	8003e80 <LCD_SendWord>
			LCD_SetLocalization(0x09);
			LCD_SendWord(" ");
			LCD_SetLocalization(0x0A);
			LCD_SendWord("C");
		}
		break;
 8001570:	e0aa      	b.n	80016c8 <highscoresAnimation+0x2d8>
			LCD_SetLocalization(0x09);
 8001572:	2009      	movs	r0, #9
 8001574:	f002 fc74 	bl	8003e60 <LCD_SetLocalization>
			LCD_SendWord(" ");
 8001578:	4860      	ldr	r0, [pc, #384]	; (80016fc <highscoresAnimation+0x30c>)
 800157a:	f002 fc81 	bl	8003e80 <LCD_SendWord>
			LCD_SetLocalization(0x0A);
 800157e:	200a      	movs	r0, #10
 8001580:	f002 fc6e 	bl	8003e60 <LCD_SetLocalization>
			LCD_SendWord("C");
 8001584:	4862      	ldr	r0, [pc, #392]	; (8001710 <highscoresAnimation+0x320>)
 8001586:	f002 fc7b 	bl	8003e80 <LCD_SendWord>
		break;
 800158a:	e09d      	b.n	80016c8 <highscoresAnimation+0x2d8>
	case 6:
		if (!reverse) {
 800158c:	4b59      	ldr	r3, [pc, #356]	; (80016f4 <highscoresAnimation+0x304>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	f083 0301 	eor.w	r3, r3, #1
 8001594:	b2db      	uxtb	r3, r3
 8001596:	2b00      	cmp	r3, #0
 8001598:	d00c      	beq.n	80015b4 <highscoresAnimation+0x1c4>
			LCD_SetLocalization(0x0A);
 800159a:	200a      	movs	r0, #10
 800159c:	f002 fc60 	bl	8003e60 <LCD_SetLocalization>
			LCD_SendWord(" ");
 80015a0:	4856      	ldr	r0, [pc, #344]	; (80016fc <highscoresAnimation+0x30c>)
 80015a2:	f002 fc6d 	bl	8003e80 <LCD_SendWord>

			LCD_SetLocalization(0x09);
 80015a6:	2009      	movs	r0, #9
 80015a8:	f002 fc5a 	bl	8003e60 <LCD_SetLocalization>
			LCD_SendWord("S");
 80015ac:	4857      	ldr	r0, [pc, #348]	; (800170c <highscoresAnimation+0x31c>)
 80015ae:	f002 fc67 	bl	8003e80 <LCD_SendWord>
			LCD_SetLocalization(0x0A);
			LCD_SendWord(" ");
			LCD_SetLocalization(0x0B);
			LCD_SendWord("O");
		}
		break;
 80015b2:	e089      	b.n	80016c8 <highscoresAnimation+0x2d8>
			LCD_SetLocalization(0x0A);
 80015b4:	200a      	movs	r0, #10
 80015b6:	f002 fc53 	bl	8003e60 <LCD_SetLocalization>
			LCD_SendWord(" ");
 80015ba:	4850      	ldr	r0, [pc, #320]	; (80016fc <highscoresAnimation+0x30c>)
 80015bc:	f002 fc60 	bl	8003e80 <LCD_SendWord>
			LCD_SetLocalization(0x0B);
 80015c0:	200b      	movs	r0, #11
 80015c2:	f002 fc4d 	bl	8003e60 <LCD_SetLocalization>
			LCD_SendWord("O");
 80015c6:	4853      	ldr	r0, [pc, #332]	; (8001714 <highscoresAnimation+0x324>)
 80015c8:	f002 fc5a 	bl	8003e80 <LCD_SendWord>
		break;
 80015cc:	e07c      	b.n	80016c8 <highscoresAnimation+0x2d8>
	case 7:
		if (!reverse) {
 80015ce:	4b49      	ldr	r3, [pc, #292]	; (80016f4 <highscoresAnimation+0x304>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	f083 0301 	eor.w	r3, r3, #1
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d00c      	beq.n	80015f6 <highscoresAnimation+0x206>
			LCD_SetLocalization(0x0B);
 80015dc:	200b      	movs	r0, #11
 80015de:	f002 fc3f 	bl	8003e60 <LCD_SetLocalization>
			LCD_SendWord(" ");
 80015e2:	4846      	ldr	r0, [pc, #280]	; (80016fc <highscoresAnimation+0x30c>)
 80015e4:	f002 fc4c 	bl	8003e80 <LCD_SendWord>
			LCD_SetLocalization(0x0A);
 80015e8:	200a      	movs	r0, #10
 80015ea:	f002 fc39 	bl	8003e60 <LCD_SetLocalization>
			LCD_SendWord("C");
 80015ee:	4848      	ldr	r0, [pc, #288]	; (8001710 <highscoresAnimation+0x320>)
 80015f0:	f002 fc46 	bl	8003e80 <LCD_SendWord>
			LCD_SetLocalization(0x0B);
			LCD_SendWord(" ");
			LCD_SetLocalization(0x0C);
			LCD_SendWord("R");
		}
		break;
 80015f4:	e068      	b.n	80016c8 <highscoresAnimation+0x2d8>
			LCD_SetLocalization(0x0B);
 80015f6:	200b      	movs	r0, #11
 80015f8:	f002 fc32 	bl	8003e60 <LCD_SetLocalization>
			LCD_SendWord(" ");
 80015fc:	483f      	ldr	r0, [pc, #252]	; (80016fc <highscoresAnimation+0x30c>)
 80015fe:	f002 fc3f 	bl	8003e80 <LCD_SendWord>
			LCD_SetLocalization(0x0C);
 8001602:	200c      	movs	r0, #12
 8001604:	f002 fc2c 	bl	8003e60 <LCD_SetLocalization>
			LCD_SendWord("R");
 8001608:	4843      	ldr	r0, [pc, #268]	; (8001718 <highscoresAnimation+0x328>)
 800160a:	f002 fc39 	bl	8003e80 <LCD_SendWord>
		break;
 800160e:	e05b      	b.n	80016c8 <highscoresAnimation+0x2d8>
	case 8:
		if (!reverse) {
 8001610:	4b38      	ldr	r3, [pc, #224]	; (80016f4 <highscoresAnimation+0x304>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	f083 0301 	eor.w	r3, r3, #1
 8001618:	b2db      	uxtb	r3, r3
 800161a:	2b00      	cmp	r3, #0
 800161c:	d00c      	beq.n	8001638 <highscoresAnimation+0x248>
			LCD_SetLocalization(0x0C);
 800161e:	200c      	movs	r0, #12
 8001620:	f002 fc1e 	bl	8003e60 <LCD_SetLocalization>
			LCD_SendWord(" ");
 8001624:	4835      	ldr	r0, [pc, #212]	; (80016fc <highscoresAnimation+0x30c>)
 8001626:	f002 fc2b 	bl	8003e80 <LCD_SendWord>

			LCD_SetLocalization(0x0B);
 800162a:	200b      	movs	r0, #11
 800162c:	f002 fc18 	bl	8003e60 <LCD_SetLocalization>
			LCD_SendWord("O");
 8001630:	4838      	ldr	r0, [pc, #224]	; (8001714 <highscoresAnimation+0x324>)
 8001632:	f002 fc25 	bl	8003e80 <LCD_SendWord>
			LCD_SetLocalization(0x0C);
			LCD_SendWord(" ");
			LCD_SetLocalization(0x0D);
			LCD_SendWord("E");
		}
		break;
 8001636:	e047      	b.n	80016c8 <highscoresAnimation+0x2d8>
			LCD_SetLocalization(0x0C);
 8001638:	200c      	movs	r0, #12
 800163a:	f002 fc11 	bl	8003e60 <LCD_SetLocalization>
			LCD_SendWord(" ");
 800163e:	482f      	ldr	r0, [pc, #188]	; (80016fc <highscoresAnimation+0x30c>)
 8001640:	f002 fc1e 	bl	8003e80 <LCD_SendWord>
			LCD_SetLocalization(0x0D);
 8001644:	200d      	movs	r0, #13
 8001646:	f002 fc0b 	bl	8003e60 <LCD_SetLocalization>
			LCD_SendWord("E");
 800164a:	4834      	ldr	r0, [pc, #208]	; (800171c <highscoresAnimation+0x32c>)
 800164c:	f002 fc18 	bl	8003e80 <LCD_SendWord>
		break;
 8001650:	e03a      	b.n	80016c8 <highscoresAnimation+0x2d8>
	case 9:
		if (!reverse) {
 8001652:	4b28      	ldr	r3, [pc, #160]	; (80016f4 <highscoresAnimation+0x304>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	f083 0301 	eor.w	r3, r3, #1
 800165a:	b2db      	uxtb	r3, r3
 800165c:	2b00      	cmp	r3, #0
 800165e:	d00c      	beq.n	800167a <highscoresAnimation+0x28a>
			LCD_SetLocalization(0x0D);
 8001660:	200d      	movs	r0, #13
 8001662:	f002 fbfd 	bl	8003e60 <LCD_SetLocalization>
			LCD_SendWord(" ");
 8001666:	4825      	ldr	r0, [pc, #148]	; (80016fc <highscoresAnimation+0x30c>)
 8001668:	f002 fc0a 	bl	8003e80 <LCD_SendWord>

			LCD_SetLocalization(0x0C);
 800166c:	200c      	movs	r0, #12
 800166e:	f002 fbf7 	bl	8003e60 <LCD_SetLocalization>
			LCD_SendWord("R");
 8001672:	4829      	ldr	r0, [pc, #164]	; (8001718 <highscoresAnimation+0x328>)
 8001674:	f002 fc04 	bl	8003e80 <LCD_SendWord>
			LCD_SetLocalization(0x0D);
			LCD_SendWord(" ");
			LCD_SetLocalization(0x0E);
			LCD_SendWord("S");
		}
		break;
 8001678:	e026      	b.n	80016c8 <highscoresAnimation+0x2d8>
			LCD_SetLocalization(0x0D);
 800167a:	200d      	movs	r0, #13
 800167c:	f002 fbf0 	bl	8003e60 <LCD_SetLocalization>
			LCD_SendWord(" ");
 8001680:	481e      	ldr	r0, [pc, #120]	; (80016fc <highscoresAnimation+0x30c>)
 8001682:	f002 fbfd 	bl	8003e80 <LCD_SendWord>
			LCD_SetLocalization(0x0E);
 8001686:	200e      	movs	r0, #14
 8001688:	f002 fbea 	bl	8003e60 <LCD_SetLocalization>
			LCD_SendWord("S");
 800168c:	481f      	ldr	r0, [pc, #124]	; (800170c <highscoresAnimation+0x31c>)
 800168e:	f002 fbf7 	bl	8003e80 <LCD_SendWord>
		break;
 8001692:	e019      	b.n	80016c8 <highscoresAnimation+0x2d8>
	case 10:
		if (!reverse) {
 8001694:	4b17      	ldr	r3, [pc, #92]	; (80016f4 <highscoresAnimation+0x304>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	f083 0301 	eor.w	r3, r3, #1
 800169c:	b2db      	uxtb	r3, r3
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d011      	beq.n	80016c6 <highscoresAnimation+0x2d6>
			LCD_SetLocalization(0x0E);
 80016a2:	200e      	movs	r0, #14
 80016a4:	f002 fbdc 	bl	8003e60 <LCD_SetLocalization>
			LCD_SendWord(" ");
 80016a8:	4814      	ldr	r0, [pc, #80]	; (80016fc <highscoresAnimation+0x30c>)
 80016aa:	f002 fbe9 	bl	8003e80 <LCD_SendWord>
			LCD_SetLocalization(0x0D);
 80016ae:	200d      	movs	r0, #13
 80016b0:	f002 fbd6 	bl	8003e60 <LCD_SetLocalization>
			LCD_SendWord("E");
 80016b4:	4819      	ldr	r0, [pc, #100]	; (800171c <highscoresAnimation+0x32c>)
 80016b6:	f002 fbe3 	bl	8003e80 <LCD_SendWord>
			reverse = true;
 80016ba:	4b0e      	ldr	r3, [pc, #56]	; (80016f4 <highscoresAnimation+0x304>)
 80016bc:	2201      	movs	r2, #1
 80016be:	701a      	strb	r2, [r3, #0]
		}
		break;
 80016c0:	e001      	b.n	80016c6 <highscoresAnimation+0x2d6>
	default:
		break;
 80016c2:	bf00      	nop
 80016c4:	e000      	b.n	80016c8 <highscoresAnimation+0x2d8>
		break;
 80016c6:	bf00      	nop
	}

	if (!reverse)
 80016c8:	4b0a      	ldr	r3, [pc, #40]	; (80016f4 <highscoresAnimation+0x304>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	f083 0301 	eor.w	r3, r3, #1
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d005      	beq.n	80016e2 <highscoresAnimation+0x2f2>
		highscoresIndexAnim++;
 80016d6:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <highscoresAnimation+0x300>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	3301      	adds	r3, #1
 80016dc:	4a04      	ldr	r2, [pc, #16]	; (80016f0 <highscoresAnimation+0x300>)
 80016de:	6013      	str	r3, [r2, #0]
	else
		highscoresIndexAnim--;

}
 80016e0:	e004      	b.n	80016ec <highscoresAnimation+0x2fc>
		highscoresIndexAnim--;
 80016e2:	4b03      	ldr	r3, [pc, #12]	; (80016f0 <highscoresAnimation+0x300>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	3b01      	subs	r3, #1
 80016e8:	4a01      	ldr	r2, [pc, #4]	; (80016f0 <highscoresAnimation+0x300>)
 80016ea:	6013      	str	r3, [r2, #0]
}
 80016ec:	bf00      	nop
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	2000000c 	.word	0x2000000c
 80016f4:	200003d2 	.word	0x200003d2
 80016f8:	0800abcc 	.word	0x0800abcc
 80016fc:	0800abd8 	.word	0x0800abd8
 8001700:	0800abdc 	.word	0x0800abdc
 8001704:	0800abe0 	.word	0x0800abe0
 8001708:	0800abe4 	.word	0x0800abe4
 800170c:	0800abe8 	.word	0x0800abe8
 8001710:	0800abec 	.word	0x0800abec
 8001714:	0800abf0 	.word	0x0800abf0
 8001718:	0800abf4 	.word	0x0800abf4
 800171c:	0800abf8 	.word	0x0800abf8

08001720 <hiscore_Menu>:

void hiscore_Menu() {
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af02      	add	r7, sp, #8
	switch (hiscoreMenuIndex) {
 8001726:	4b9c      	ldr	r3, [pc, #624]	; (8001998 <hiscore_Menu+0x278>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	2b05      	cmp	r3, #5
 800172c:	f200 8277 	bhi.w	8001c1e <hiscore_Menu+0x4fe>
 8001730:	a201      	add	r2, pc, #4	; (adr r2, 8001738 <hiscore_Menu+0x18>)
 8001732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001736:	bf00      	nop
 8001738:	08001751 	.word	0x08001751
 800173c:	080017f7 	.word	0x080017f7
 8001740:	080018cd 	.word	0x080018cd
 8001744:	080019d1 	.word	0x080019d1
 8001748:	08001a9b 	.word	0x08001a9b
 800174c:	08001b5b 	.word	0x08001b5b
	case 0:
		highscoresAnim = true;
 8001750:	4b92      	ldr	r3, [pc, #584]	; (800199c <hiscore_Menu+0x27c>)
 8001752:	2201      	movs	r2, #1
 8001754:	701a      	strb	r2, [r3, #0]
		hiscoreMenuIndexTemp = hiscoreMenuIndex;
 8001756:	4b90      	ldr	r3, [pc, #576]	; (8001998 <hiscore_Menu+0x278>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a91      	ldr	r2, [pc, #580]	; (80019a0 <hiscore_Menu+0x280>)
 800175c:	6013      	str	r3, [r2, #0]
		hiscoreMenuIndex = 50;
 800175e:	4b8e      	ldr	r3, [pc, #568]	; (8001998 <hiscore_Menu+0x278>)
 8001760:	2232      	movs	r2, #50	; 0x32
 8001762:	601a      	str	r2, [r3, #0]
		blockUp = true;
 8001764:	4b8f      	ldr	r3, [pc, #572]	; (80019a4 <hiscore_Menu+0x284>)
 8001766:	2201      	movs	r2, #1
 8001768:	701a      	strb	r2, [r3, #0]
		lcd_special_cls();
 800176a:	f002 fb41 	bl	8003df0 <lcd_special_cls>
		LCD_SetLocalization(0x42);
 800176e:	2042      	movs	r0, #66	; 0x42
 8001770:	f002 fb76 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("NAME");
 8001774:	488c      	ldr	r0, [pc, #560]	; (80019a8 <hiscore_Menu+0x288>)
 8001776:	f002 fb83 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization(0x14);
 800177a:	2014      	movs	r0, #20
 800177c:	f002 fb70 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("1");
 8001780:	488a      	ldr	r0, [pc, #552]	; (80019ac <hiscore_Menu+0x28c>)
 8001782:	f002 fb7d 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization(0x54);
 8001786:	2054      	movs	r0, #84	; 0x54
 8001788:	f002 fb6a 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("2");
 800178c:	4888      	ldr	r0, [pc, #544]	; (80019b0 <hiscore_Menu+0x290>)
 800178e:	f002 fb77 	bl	8003e80 <LCD_SendWord>
		createInvertedWord("l", 0x15, 1, 1, 2);
 8001792:	2302      	movs	r3, #2
 8001794:	9300      	str	r3, [sp, #0]
 8001796:	2301      	movs	r3, #1
 8001798:	2201      	movs	r2, #1
 800179a:	2115      	movs	r1, #21
 800179c:	4885      	ldr	r0, [pc, #532]	; (80019b4 <hiscore_Menu+0x294>)
 800179e:	f001 fc89 	bl	80030b4 <createInvertedWord>
		createInvertedWord("l", 0x55, 1, 1, 2);
 80017a2:	2302      	movs	r3, #2
 80017a4:	9300      	str	r3, [sp, #0]
 80017a6:	2301      	movs	r3, #1
 80017a8:	2201      	movs	r2, #1
 80017aa:	2155      	movs	r1, #85	; 0x55
 80017ac:	4881      	ldr	r0, [pc, #516]	; (80019b4 <hiscore_Menu+0x294>)
 80017ae:	f001 fc81 	bl	80030b4 <createInvertedWord>
		LCD_SetLocalization(0x4E);
 80017b2:	204e      	movs	r0, #78	; 0x4e
 80017b4:	f002 fb54 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("Score");
 80017b8:	487f      	ldr	r0, [pc, #508]	; (80019b8 <hiscore_Menu+0x298>)
 80017ba:	f002 fb61 	bl	8003e80 <LCD_SendWord>
		createInvertedWord("l", 0x21, 1, 1, 2);
 80017be:	2302      	movs	r3, #2
 80017c0:	9300      	str	r3, [sp, #0]
 80017c2:	2301      	movs	r3, #1
 80017c4:	2201      	movs	r2, #1
 80017c6:	2121      	movs	r1, #33	; 0x21
 80017c8:	487a      	ldr	r0, [pc, #488]	; (80019b4 <hiscore_Menu+0x294>)
 80017ca:	f001 fc73 	bl	80030b4 <createInvertedWord>
		createInvertedWord("l", 0x61, 1, 1, 2);
 80017ce:	2302      	movs	r3, #2
 80017d0:	9300      	str	r3, [sp, #0]
 80017d2:	2301      	movs	r3, #1
 80017d4:	2201      	movs	r2, #1
 80017d6:	2161      	movs	r1, #97	; 0x61
 80017d8:	4876      	ldr	r0, [pc, #472]	; (80019b4 <hiscore_Menu+0x294>)
 80017da:	f001 fc6b 	bl	80030b4 <createInvertedWord>
		createInvertedWord("2", 0x67, 1, 2, 0);
 80017de:	2300      	movs	r3, #0
 80017e0:	9300      	str	r3, [sp, #0]
 80017e2:	2302      	movs	r3, #2
 80017e4:	2201      	movs	r2, #1
 80017e6:	2167      	movs	r1, #103	; 0x67
 80017e8:	4871      	ldr	r0, [pc, #452]	; (80019b0 <hiscore_Menu+0x290>)
 80017ea:	f001 fc63 	bl	80030b4 <createInvertedWord>
		blockPress = true;
 80017ee:	4b73      	ldr	r3, [pc, #460]	; (80019bc <hiscore_Menu+0x29c>)
 80017f0:	2201      	movs	r2, #1
 80017f2:	701a      	strb	r2, [r3, #0]
		break;
 80017f4:	e214      	b.n	8001c20 <hiscore_Menu+0x500>
	case 1:
		hiscoreMenuIndexTemp = hiscoreMenuIndex;
 80017f6:	4b68      	ldr	r3, [pc, #416]	; (8001998 <hiscore_Menu+0x278>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a69      	ldr	r2, [pc, #420]	; (80019a0 <hiscore_Menu+0x280>)
 80017fc:	6013      	str	r3, [r2, #0]
		hiscoreMenuIndex = 50;
 80017fe:	4b66      	ldr	r3, [pc, #408]	; (8001998 <hiscore_Menu+0x278>)
 8001800:	2232      	movs	r2, #50	; 0x32
 8001802:	601a      	str	r2, [r3, #0]
		highscoresAnim = false;
 8001804:	4b65      	ldr	r3, [pc, #404]	; (800199c <hiscore_Menu+0x27c>)
 8001806:	2200      	movs	r2, #0
 8001808:	701a      	strb	r2, [r3, #0]
		lcd_special_cls();
 800180a:	f002 faf1 	bl	8003df0 <lcd_special_cls>
		LCD_SetLocalization(0x00);
 800180e:	2000      	movs	r0, #0
 8001810:	f002 fb26 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("1");
 8001814:	4865      	ldr	r0, [pc, #404]	; (80019ac <hiscore_Menu+0x28c>)
 8001816:	f002 fb33 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization(0x40);
 800181a:	2040      	movs	r0, #64	; 0x40
 800181c:	f002 fb20 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("2");
 8001820:	4863      	ldr	r0, [pc, #396]	; (80019b0 <hiscore_Menu+0x290>)
 8001822:	f002 fb2d 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization(0x14);
 8001826:	2014      	movs	r0, #20
 8001828:	f002 fb1a 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("3");
 800182c:	4864      	ldr	r0, [pc, #400]	; (80019c0 <hiscore_Menu+0x2a0>)
 800182e:	f002 fb27 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization(0x54);
 8001832:	2054      	movs	r0, #84	; 0x54
 8001834:	f002 fb14 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("4");
 8001838:	4862      	ldr	r0, [pc, #392]	; (80019c4 <hiscore_Menu+0x2a4>)
 800183a:	f002 fb21 	bl	8003e80 <LCD_SendWord>
		createInvertedWord("l", 0x01, 1, 1, 2);
 800183e:	2302      	movs	r3, #2
 8001840:	9300      	str	r3, [sp, #0]
 8001842:	2301      	movs	r3, #1
 8001844:	2201      	movs	r2, #1
 8001846:	2101      	movs	r1, #1
 8001848:	485a      	ldr	r0, [pc, #360]	; (80019b4 <hiscore_Menu+0x294>)
 800184a:	f001 fc33 	bl	80030b4 <createInvertedWord>
		createInvertedWord("l", 0x41, 1, 1, 2);
 800184e:	2302      	movs	r3, #2
 8001850:	9300      	str	r3, [sp, #0]
 8001852:	2301      	movs	r3, #1
 8001854:	2201      	movs	r2, #1
 8001856:	2141      	movs	r1, #65	; 0x41
 8001858:	4856      	ldr	r0, [pc, #344]	; (80019b4 <hiscore_Menu+0x294>)
 800185a:	f001 fc2b 	bl	80030b4 <createInvertedWord>
		createInvertedWord("l", 0x15, 1, 1, 2);
 800185e:	2302      	movs	r3, #2
 8001860:	9300      	str	r3, [sp, #0]
 8001862:	2301      	movs	r3, #1
 8001864:	2201      	movs	r2, #1
 8001866:	2115      	movs	r1, #21
 8001868:	4852      	ldr	r0, [pc, #328]	; (80019b4 <hiscore_Menu+0x294>)
 800186a:	f001 fc23 	bl	80030b4 <createInvertedWord>
		createInvertedWord("l", 0x55, 1, 1, 2);
 800186e:	2302      	movs	r3, #2
 8001870:	9300      	str	r3, [sp, #0]
 8001872:	2301      	movs	r3, #1
 8001874:	2201      	movs	r2, #1
 8001876:	2155      	movs	r1, #85	; 0x55
 8001878:	484e      	ldr	r0, [pc, #312]	; (80019b4 <hiscore_Menu+0x294>)
 800187a:	f001 fc1b 	bl	80030b4 <createInvertedWord>

		createInvertedWord("l", 0x0D, 1, 1, 2);
 800187e:	2302      	movs	r3, #2
 8001880:	9300      	str	r3, [sp, #0]
 8001882:	2301      	movs	r3, #1
 8001884:	2201      	movs	r2, #1
 8001886:	210d      	movs	r1, #13
 8001888:	484a      	ldr	r0, [pc, #296]	; (80019b4 <hiscore_Menu+0x294>)
 800188a:	f001 fc13 	bl	80030b4 <createInvertedWord>
		createInvertedWord("l", 0x4D, 1, 1, 2);
 800188e:	2302      	movs	r3, #2
 8001890:	9300      	str	r3, [sp, #0]
 8001892:	2301      	movs	r3, #1
 8001894:	2201      	movs	r2, #1
 8001896:	214d      	movs	r1, #77	; 0x4d
 8001898:	4846      	ldr	r0, [pc, #280]	; (80019b4 <hiscore_Menu+0x294>)
 800189a:	f001 fc0b 	bl	80030b4 <createInvertedWord>
		createInvertedWord("l", 0x21, 1, 1, 2);
 800189e:	2302      	movs	r3, #2
 80018a0:	9300      	str	r3, [sp, #0]
 80018a2:	2301      	movs	r3, #1
 80018a4:	2201      	movs	r2, #1
 80018a6:	2121      	movs	r1, #33	; 0x21
 80018a8:	4842      	ldr	r0, [pc, #264]	; (80019b4 <hiscore_Menu+0x294>)
 80018aa:	f001 fc03 	bl	80030b4 <createInvertedWord>
		createInvertedWord("l", 0x61, 1, 1, 2);
 80018ae:	2302      	movs	r3, #2
 80018b0:	9300      	str	r3, [sp, #0]
 80018b2:	2301      	movs	r3, #1
 80018b4:	2201      	movs	r2, #1
 80018b6:	2161      	movs	r1, #97	; 0x61
 80018b8:	483e      	ldr	r0, [pc, #248]	; (80019b4 <hiscore_Menu+0x294>)
 80018ba:	f001 fbfb 	bl	80030b4 <createInvertedWord>
		blockUp = false;
 80018be:	4b39      	ldr	r3, [pc, #228]	; (80019a4 <hiscore_Menu+0x284>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	701a      	strb	r2, [r3, #0]
		blockPress = true;
 80018c4:	4b3d      	ldr	r3, [pc, #244]	; (80019bc <hiscore_Menu+0x29c>)
 80018c6:	2201      	movs	r2, #1
 80018c8:	701a      	strb	r2, [r3, #0]
		break;
 80018ca:	e1a9      	b.n	8001c20 <hiscore_Menu+0x500>
	case 2:
		lcd_special_cls();
 80018cc:	f002 fa90 	bl	8003df0 <lcd_special_cls>
		LCD_SetLocalization(0x00);
 80018d0:	2000      	movs	r0, #0
 80018d2:	f002 fac5 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("3");
 80018d6:	483a      	ldr	r0, [pc, #232]	; (80019c0 <hiscore_Menu+0x2a0>)
 80018d8:	f002 fad2 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization(0x40);
 80018dc:	2040      	movs	r0, #64	; 0x40
 80018de:	f002 fabf 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("4");
 80018e2:	4838      	ldr	r0, [pc, #224]	; (80019c4 <hiscore_Menu+0x2a4>)
 80018e4:	f002 facc 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization(0x14);
 80018e8:	2014      	movs	r0, #20
 80018ea:	f002 fab9 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("5");
 80018ee:	4836      	ldr	r0, [pc, #216]	; (80019c8 <hiscore_Menu+0x2a8>)
 80018f0:	f002 fac6 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization(0x54);
 80018f4:	2054      	movs	r0, #84	; 0x54
 80018f6:	f002 fab3 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("6");
 80018fa:	4834      	ldr	r0, [pc, #208]	; (80019cc <hiscore_Menu+0x2ac>)
 80018fc:	f002 fac0 	bl	8003e80 <LCD_SendWord>
		createInvertedWord("l", 0x01, 1, 1, 2);
 8001900:	2302      	movs	r3, #2
 8001902:	9300      	str	r3, [sp, #0]
 8001904:	2301      	movs	r3, #1
 8001906:	2201      	movs	r2, #1
 8001908:	2101      	movs	r1, #1
 800190a:	482a      	ldr	r0, [pc, #168]	; (80019b4 <hiscore_Menu+0x294>)
 800190c:	f001 fbd2 	bl	80030b4 <createInvertedWord>
		createInvertedWord("l", 0x41, 1, 1, 2);
 8001910:	2302      	movs	r3, #2
 8001912:	9300      	str	r3, [sp, #0]
 8001914:	2301      	movs	r3, #1
 8001916:	2201      	movs	r2, #1
 8001918:	2141      	movs	r1, #65	; 0x41
 800191a:	4826      	ldr	r0, [pc, #152]	; (80019b4 <hiscore_Menu+0x294>)
 800191c:	f001 fbca 	bl	80030b4 <createInvertedWord>
		createInvertedWord("l", 0x15, 1, 1, 2);
 8001920:	2302      	movs	r3, #2
 8001922:	9300      	str	r3, [sp, #0]
 8001924:	2301      	movs	r3, #1
 8001926:	2201      	movs	r2, #1
 8001928:	2115      	movs	r1, #21
 800192a:	4822      	ldr	r0, [pc, #136]	; (80019b4 <hiscore_Menu+0x294>)
 800192c:	f001 fbc2 	bl	80030b4 <createInvertedWord>
		createInvertedWord("l", 0x55, 1, 1, 2);
 8001930:	2302      	movs	r3, #2
 8001932:	9300      	str	r3, [sp, #0]
 8001934:	2301      	movs	r3, #1
 8001936:	2201      	movs	r2, #1
 8001938:	2155      	movs	r1, #85	; 0x55
 800193a:	481e      	ldr	r0, [pc, #120]	; (80019b4 <hiscore_Menu+0x294>)
 800193c:	f001 fbba 	bl	80030b4 <createInvertedWord>

		createInvertedWord("l", 0x0D, 1, 1, 2);
 8001940:	2302      	movs	r3, #2
 8001942:	9300      	str	r3, [sp, #0]
 8001944:	2301      	movs	r3, #1
 8001946:	2201      	movs	r2, #1
 8001948:	210d      	movs	r1, #13
 800194a:	481a      	ldr	r0, [pc, #104]	; (80019b4 <hiscore_Menu+0x294>)
 800194c:	f001 fbb2 	bl	80030b4 <createInvertedWord>
		createInvertedWord("l", 0x4D, 1, 1, 2);
 8001950:	2302      	movs	r3, #2
 8001952:	9300      	str	r3, [sp, #0]
 8001954:	2301      	movs	r3, #1
 8001956:	2201      	movs	r2, #1
 8001958:	214d      	movs	r1, #77	; 0x4d
 800195a:	4816      	ldr	r0, [pc, #88]	; (80019b4 <hiscore_Menu+0x294>)
 800195c:	f001 fbaa 	bl	80030b4 <createInvertedWord>
		createInvertedWord("l", 0x21, 1, 1, 2);
 8001960:	2302      	movs	r3, #2
 8001962:	9300      	str	r3, [sp, #0]
 8001964:	2301      	movs	r3, #1
 8001966:	2201      	movs	r2, #1
 8001968:	2121      	movs	r1, #33	; 0x21
 800196a:	4812      	ldr	r0, [pc, #72]	; (80019b4 <hiscore_Menu+0x294>)
 800196c:	f001 fba2 	bl	80030b4 <createInvertedWord>
		createInvertedWord("l", 0x61, 1, 1, 2);
 8001970:	2302      	movs	r3, #2
 8001972:	9300      	str	r3, [sp, #0]
 8001974:	2301      	movs	r3, #1
 8001976:	2201      	movs	r2, #1
 8001978:	2161      	movs	r1, #97	; 0x61
 800197a:	480e      	ldr	r0, [pc, #56]	; (80019b4 <hiscore_Menu+0x294>)
 800197c:	f001 fb9a 	bl	80030b4 <createInvertedWord>

		hiscoreMenuIndexTemp = hiscoreMenuIndex;
 8001980:	4b05      	ldr	r3, [pc, #20]	; (8001998 <hiscore_Menu+0x278>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a06      	ldr	r2, [pc, #24]	; (80019a0 <hiscore_Menu+0x280>)
 8001986:	6013      	str	r3, [r2, #0]
		hiscoreMenuIndex = 50;
 8001988:	4b03      	ldr	r3, [pc, #12]	; (8001998 <hiscore_Menu+0x278>)
 800198a:	2232      	movs	r2, #50	; 0x32
 800198c:	601a      	str	r2, [r3, #0]
		blockPress = true;
 800198e:	4b0b      	ldr	r3, [pc, #44]	; (80019bc <hiscore_Menu+0x29c>)
 8001990:	2201      	movs	r2, #1
 8001992:	701a      	strb	r2, [r3, #0]
		break;
 8001994:	e144      	b.n	8001c20 <hiscore_Menu+0x500>
 8001996:	bf00      	nop
 8001998:	200003b0 	.word	0x200003b0
 800199c:	200003d1 	.word	0x200003d1
 80019a0:	20000400 	.word	0x20000400
 80019a4:	2000001a 	.word	0x2000001a
 80019a8:	0800abfc 	.word	0x0800abfc
 80019ac:	0800ac04 	.word	0x0800ac04
 80019b0:	0800ab50 	.word	0x0800ab50
 80019b4:	0800ac08 	.word	0x0800ac08
 80019b8:	0800ac0c 	.word	0x0800ac0c
 80019bc:	20000019 	.word	0x20000019
 80019c0:	0800ac14 	.word	0x0800ac14
 80019c4:	0800ac18 	.word	0x0800ac18
 80019c8:	0800ac1c 	.word	0x0800ac1c
 80019cc:	0800ac20 	.word	0x0800ac20
	case 3:
		lcd_special_cls();
 80019d0:	f002 fa0e 	bl	8003df0 <lcd_special_cls>
		LCD_SetLocalization(0x00);
 80019d4:	2000      	movs	r0, #0
 80019d6:	f002 fa43 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("5");
 80019da:	48a0      	ldr	r0, [pc, #640]	; (8001c5c <hiscore_Menu+0x53c>)
 80019dc:	f002 fa50 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization(0x40);
 80019e0:	2040      	movs	r0, #64	; 0x40
 80019e2:	f002 fa3d 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("6");
 80019e6:	489e      	ldr	r0, [pc, #632]	; (8001c60 <hiscore_Menu+0x540>)
 80019e8:	f002 fa4a 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization(0x14);
 80019ec:	2014      	movs	r0, #20
 80019ee:	f002 fa37 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("7");
 80019f2:	489c      	ldr	r0, [pc, #624]	; (8001c64 <hiscore_Menu+0x544>)
 80019f4:	f002 fa44 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization(0x54);
 80019f8:	2054      	movs	r0, #84	; 0x54
 80019fa:	f002 fa31 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("8");
 80019fe:	489a      	ldr	r0, [pc, #616]	; (8001c68 <hiscore_Menu+0x548>)
 8001a00:	f002 fa3e 	bl	8003e80 <LCD_SendWord>
		createInvertedWord("l", 0x01, 1, 1, 2);
 8001a04:	2302      	movs	r3, #2
 8001a06:	9300      	str	r3, [sp, #0]
 8001a08:	2301      	movs	r3, #1
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	2101      	movs	r1, #1
 8001a0e:	4897      	ldr	r0, [pc, #604]	; (8001c6c <hiscore_Menu+0x54c>)
 8001a10:	f001 fb50 	bl	80030b4 <createInvertedWord>
		createInvertedWord("l", 0x41, 1, 1, 2);
 8001a14:	2302      	movs	r3, #2
 8001a16:	9300      	str	r3, [sp, #0]
 8001a18:	2301      	movs	r3, #1
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	2141      	movs	r1, #65	; 0x41
 8001a1e:	4893      	ldr	r0, [pc, #588]	; (8001c6c <hiscore_Menu+0x54c>)
 8001a20:	f001 fb48 	bl	80030b4 <createInvertedWord>
		createInvertedWord("l", 0x15, 1, 1, 2);
 8001a24:	2302      	movs	r3, #2
 8001a26:	9300      	str	r3, [sp, #0]
 8001a28:	2301      	movs	r3, #1
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	2115      	movs	r1, #21
 8001a2e:	488f      	ldr	r0, [pc, #572]	; (8001c6c <hiscore_Menu+0x54c>)
 8001a30:	f001 fb40 	bl	80030b4 <createInvertedWord>
		createInvertedWord("l", 0x55, 1, 1, 2);
 8001a34:	2302      	movs	r3, #2
 8001a36:	9300      	str	r3, [sp, #0]
 8001a38:	2301      	movs	r3, #1
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	2155      	movs	r1, #85	; 0x55
 8001a3e:	488b      	ldr	r0, [pc, #556]	; (8001c6c <hiscore_Menu+0x54c>)
 8001a40:	f001 fb38 	bl	80030b4 <createInvertedWord>

		createInvertedWord("l", 0x0D, 1, 1, 2);
 8001a44:	2302      	movs	r3, #2
 8001a46:	9300      	str	r3, [sp, #0]
 8001a48:	2301      	movs	r3, #1
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	210d      	movs	r1, #13
 8001a4e:	4887      	ldr	r0, [pc, #540]	; (8001c6c <hiscore_Menu+0x54c>)
 8001a50:	f001 fb30 	bl	80030b4 <createInvertedWord>
		createInvertedWord("l", 0x4D, 1, 1, 2);
 8001a54:	2302      	movs	r3, #2
 8001a56:	9300      	str	r3, [sp, #0]
 8001a58:	2301      	movs	r3, #1
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	214d      	movs	r1, #77	; 0x4d
 8001a5e:	4883      	ldr	r0, [pc, #524]	; (8001c6c <hiscore_Menu+0x54c>)
 8001a60:	f001 fb28 	bl	80030b4 <createInvertedWord>
		createInvertedWord("l", 0x21, 1, 1, 2);
 8001a64:	2302      	movs	r3, #2
 8001a66:	9300      	str	r3, [sp, #0]
 8001a68:	2301      	movs	r3, #1
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	2121      	movs	r1, #33	; 0x21
 8001a6e:	487f      	ldr	r0, [pc, #508]	; (8001c6c <hiscore_Menu+0x54c>)
 8001a70:	f001 fb20 	bl	80030b4 <createInvertedWord>
		createInvertedWord("l", 0x61, 1, 1, 2);
 8001a74:	2302      	movs	r3, #2
 8001a76:	9300      	str	r3, [sp, #0]
 8001a78:	2301      	movs	r3, #1
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	2161      	movs	r1, #97	; 0x61
 8001a7e:	487b      	ldr	r0, [pc, #492]	; (8001c6c <hiscore_Menu+0x54c>)
 8001a80:	f001 fb18 	bl	80030b4 <createInvertedWord>
		hiscoreMenuIndexTemp = hiscoreMenuIndex;
 8001a84:	4b7a      	ldr	r3, [pc, #488]	; (8001c70 <hiscore_Menu+0x550>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a7a      	ldr	r2, [pc, #488]	; (8001c74 <hiscore_Menu+0x554>)
 8001a8a:	6013      	str	r3, [r2, #0]
		hiscoreMenuIndex = 50;
 8001a8c:	4b78      	ldr	r3, [pc, #480]	; (8001c70 <hiscore_Menu+0x550>)
 8001a8e:	2232      	movs	r2, #50	; 0x32
 8001a90:	601a      	str	r2, [r3, #0]
		blockPress = true;
 8001a92:	4b79      	ldr	r3, [pc, #484]	; (8001c78 <hiscore_Menu+0x558>)
 8001a94:	2201      	movs	r2, #1
 8001a96:	701a      	strb	r2, [r3, #0]
		break;
 8001a98:	e0c2      	b.n	8001c20 <hiscore_Menu+0x500>
	case 4:
		lcd_special_cls();
 8001a9a:	f002 f9a9 	bl	8003df0 <lcd_special_cls>
		LCD_SetLocalization(0x00);
 8001a9e:	2000      	movs	r0, #0
 8001aa0:	f002 f9de 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("7");
 8001aa4:	486f      	ldr	r0, [pc, #444]	; (8001c64 <hiscore_Menu+0x544>)
 8001aa6:	f002 f9eb 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization(0x40);
 8001aaa:	2040      	movs	r0, #64	; 0x40
 8001aac:	f002 f9d8 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("8");
 8001ab0:	486d      	ldr	r0, [pc, #436]	; (8001c68 <hiscore_Menu+0x548>)
 8001ab2:	f002 f9e5 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization(0x14);
 8001ab6:	2014      	movs	r0, #20
 8001ab8:	f002 f9d2 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("9");
 8001abc:	486f      	ldr	r0, [pc, #444]	; (8001c7c <hiscore_Menu+0x55c>)
 8001abe:	f002 f9df 	bl	8003e80 <LCD_SendWord>

		LCD_SetLocalization(0x54);
 8001ac2:	2054      	movs	r0, #84	; 0x54
 8001ac4:	f002 f9cc 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("Back");
 8001ac8:	486d      	ldr	r0, [pc, #436]	; (8001c80 <hiscore_Menu+0x560>)
 8001aca:	f002 f9d9 	bl	8003e80 <LCD_SendWord>

		createInvertedWord("l", 0x01, 1, 1, 2);
 8001ace:	2302      	movs	r3, #2
 8001ad0:	9300      	str	r3, [sp, #0]
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	2101      	movs	r1, #1
 8001ad8:	4864      	ldr	r0, [pc, #400]	; (8001c6c <hiscore_Menu+0x54c>)
 8001ada:	f001 faeb 	bl	80030b4 <createInvertedWord>
		createInvertedWord("l", 0x41, 1, 1, 2);
 8001ade:	2302      	movs	r3, #2
 8001ae0:	9300      	str	r3, [sp, #0]
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	2141      	movs	r1, #65	; 0x41
 8001ae8:	4860      	ldr	r0, [pc, #384]	; (8001c6c <hiscore_Menu+0x54c>)
 8001aea:	f001 fae3 	bl	80030b4 <createInvertedWord>
		createInvertedWord("l", 0x15, 1, 1, 2);
 8001aee:	2302      	movs	r3, #2
 8001af0:	9300      	str	r3, [sp, #0]
 8001af2:	2301      	movs	r3, #1
 8001af4:	2201      	movs	r2, #1
 8001af6:	2115      	movs	r1, #21
 8001af8:	485c      	ldr	r0, [pc, #368]	; (8001c6c <hiscore_Menu+0x54c>)
 8001afa:	f001 fadb 	bl	80030b4 <createInvertedWord>

		createInvertedWord("l", 0x0D, 1, 1, 2);
 8001afe:	2302      	movs	r3, #2
 8001b00:	9300      	str	r3, [sp, #0]
 8001b02:	2301      	movs	r3, #1
 8001b04:	2201      	movs	r2, #1
 8001b06:	210d      	movs	r1, #13
 8001b08:	4858      	ldr	r0, [pc, #352]	; (8001c6c <hiscore_Menu+0x54c>)
 8001b0a:	f001 fad3 	bl	80030b4 <createInvertedWord>
		createInvertedWord("l", 0x4D, 1, 1, 2);
 8001b0e:	2302      	movs	r3, #2
 8001b10:	9300      	str	r3, [sp, #0]
 8001b12:	2301      	movs	r3, #1
 8001b14:	2201      	movs	r2, #1
 8001b16:	214d      	movs	r1, #77	; 0x4d
 8001b18:	4854      	ldr	r0, [pc, #336]	; (8001c6c <hiscore_Menu+0x54c>)
 8001b1a:	f001 facb 	bl	80030b4 <createInvertedWord>
		createInvertedWord("l", 0x21, 1, 1, 2);
 8001b1e:	2302      	movs	r3, #2
 8001b20:	9300      	str	r3, [sp, #0]
 8001b22:	2301      	movs	r3, #1
 8001b24:	2201      	movs	r2, #1
 8001b26:	2121      	movs	r1, #33	; 0x21
 8001b28:	4850      	ldr	r0, [pc, #320]	; (8001c6c <hiscore_Menu+0x54c>)
 8001b2a:	f001 fac3 	bl	80030b4 <createInvertedWord>

		createInvertedWord("8", 0x67, 1, 2, 0);
 8001b2e:	2300      	movs	r3, #0
 8001b30:	9300      	str	r3, [sp, #0]
 8001b32:	2302      	movs	r3, #2
 8001b34:	2201      	movs	r2, #1
 8001b36:	2167      	movs	r1, #103	; 0x67
 8001b38:	484b      	ldr	r0, [pc, #300]	; (8001c68 <hiscore_Menu+0x548>)
 8001b3a:	f001 fabb 	bl	80030b4 <createInvertedWord>
		hiscoreMenuIndexTemp = hiscoreMenuIndex;
 8001b3e:	4b4c      	ldr	r3, [pc, #304]	; (8001c70 <hiscore_Menu+0x550>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a4c      	ldr	r2, [pc, #304]	; (8001c74 <hiscore_Menu+0x554>)
 8001b44:	6013      	str	r3, [r2, #0]
		hiscoreMenuIndex = 50;
 8001b46:	4b4a      	ldr	r3, [pc, #296]	; (8001c70 <hiscore_Menu+0x550>)
 8001b48:	2232      	movs	r2, #50	; 0x32
 8001b4a:	601a      	str	r2, [r3, #0]
		blockDown = false;
 8001b4c:	4b4d      	ldr	r3, [pc, #308]	; (8001c84 <hiscore_Menu+0x564>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	701a      	strb	r2, [r3, #0]
		blockPress = true;
 8001b52:	4b49      	ldr	r3, [pc, #292]	; (8001c78 <hiscore_Menu+0x558>)
 8001b54:	2201      	movs	r2, #1
 8001b56:	701a      	strb	r2, [r3, #0]
		break;
 8001b58:	e062      	b.n	8001c20 <hiscore_Menu+0x500>
	case 5:
		lcd_special_cls();
 8001b5a:	f002 f949 	bl	8003df0 <lcd_special_cls>
		LCD_SetLocalization(0x00);
 8001b5e:	2000      	movs	r0, #0
 8001b60:	f002 f97e 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("7");
 8001b64:	483f      	ldr	r0, [pc, #252]	; (8001c64 <hiscore_Menu+0x544>)
 8001b66:	f002 f98b 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization(0x40);
 8001b6a:	2040      	movs	r0, #64	; 0x40
 8001b6c:	f002 f978 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("8");
 8001b70:	483d      	ldr	r0, [pc, #244]	; (8001c68 <hiscore_Menu+0x548>)
 8001b72:	f002 f985 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization(0x14);
 8001b76:	2014      	movs	r0, #20
 8001b78:	f002 f972 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("9");
 8001b7c:	483f      	ldr	r0, [pc, #252]	; (8001c7c <hiscore_Menu+0x55c>)
 8001b7e:	f002 f97f 	bl	8003e80 <LCD_SendWord>

		createInvertedWord("Back", 0x54, 4, 3, 0);
 8001b82:	2300      	movs	r3, #0
 8001b84:	9300      	str	r3, [sp, #0]
 8001b86:	2303      	movs	r3, #3
 8001b88:	2204      	movs	r2, #4
 8001b8a:	2154      	movs	r1, #84	; 0x54
 8001b8c:	483c      	ldr	r0, [pc, #240]	; (8001c80 <hiscore_Menu+0x560>)
 8001b8e:	f001 fa91 	bl	80030b4 <createInvertedWord>

		createInvertedWord("l", 0x01, 1, 1, 2);
 8001b92:	2302      	movs	r3, #2
 8001b94:	9300      	str	r3, [sp, #0]
 8001b96:	2301      	movs	r3, #1
 8001b98:	2201      	movs	r2, #1
 8001b9a:	2101      	movs	r1, #1
 8001b9c:	4833      	ldr	r0, [pc, #204]	; (8001c6c <hiscore_Menu+0x54c>)
 8001b9e:	f001 fa89 	bl	80030b4 <createInvertedWord>
		createInvertedWord("l", 0x41, 1, 1, 2);
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	9300      	str	r3, [sp, #0]
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	2201      	movs	r2, #1
 8001baa:	2141      	movs	r1, #65	; 0x41
 8001bac:	482f      	ldr	r0, [pc, #188]	; (8001c6c <hiscore_Menu+0x54c>)
 8001bae:	f001 fa81 	bl	80030b4 <createInvertedWord>
		createInvertedWord("l", 0x15, 1, 1, 2);
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	9300      	str	r3, [sp, #0]
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	2201      	movs	r2, #1
 8001bba:	2115      	movs	r1, #21
 8001bbc:	482b      	ldr	r0, [pc, #172]	; (8001c6c <hiscore_Menu+0x54c>)
 8001bbe:	f001 fa79 	bl	80030b4 <createInvertedWord>

		createInvertedWord("l", 0x0D, 1, 1, 2);
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	9300      	str	r3, [sp, #0]
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	2201      	movs	r2, #1
 8001bca:	210d      	movs	r1, #13
 8001bcc:	4827      	ldr	r0, [pc, #156]	; (8001c6c <hiscore_Menu+0x54c>)
 8001bce:	f001 fa71 	bl	80030b4 <createInvertedWord>
		createInvertedWord("l", 0x4D, 1, 1, 2);
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	9300      	str	r3, [sp, #0]
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	2201      	movs	r2, #1
 8001bda:	214d      	movs	r1, #77	; 0x4d
 8001bdc:	4823      	ldr	r0, [pc, #140]	; (8001c6c <hiscore_Menu+0x54c>)
 8001bde:	f001 fa69 	bl	80030b4 <createInvertedWord>
		createInvertedWord("l", 0x21, 1, 1, 2);
 8001be2:	2302      	movs	r3, #2
 8001be4:	9300      	str	r3, [sp, #0]
 8001be6:	2301      	movs	r3, #1
 8001be8:	2201      	movs	r2, #1
 8001bea:	2121      	movs	r1, #33	; 0x21
 8001bec:	481f      	ldr	r0, [pc, #124]	; (8001c6c <hiscore_Menu+0x54c>)
 8001bee:	f001 fa61 	bl	80030b4 <createInvertedWord>

		createInvertedWord("8", 0x67, 1, 2, 0);
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	9300      	str	r3, [sp, #0]
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	2167      	movs	r1, #103	; 0x67
 8001bfc:	481a      	ldr	r0, [pc, #104]	; (8001c68 <hiscore_Menu+0x548>)
 8001bfe:	f001 fa59 	bl	80030b4 <createInvertedWord>
		hiscoreMenuIndexTemp = hiscoreMenuIndex;
 8001c02:	4b1b      	ldr	r3, [pc, #108]	; (8001c70 <hiscore_Menu+0x550>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a1b      	ldr	r2, [pc, #108]	; (8001c74 <hiscore_Menu+0x554>)
 8001c08:	6013      	str	r3, [r2, #0]
		hiscoreMenuIndex = 50;
 8001c0a:	4b19      	ldr	r3, [pc, #100]	; (8001c70 <hiscore_Menu+0x550>)
 8001c0c:	2232      	movs	r2, #50	; 0x32
 8001c0e:	601a      	str	r2, [r3, #0]
		blockDown = true;
 8001c10:	4b1c      	ldr	r3, [pc, #112]	; (8001c84 <hiscore_Menu+0x564>)
 8001c12:	2201      	movs	r2, #1
 8001c14:	701a      	strb	r2, [r3, #0]
		blockPress = false;
 8001c16:	4b18      	ldr	r3, [pc, #96]	; (8001c78 <hiscore_Menu+0x558>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	701a      	strb	r2, [r3, #0]
		break;
 8001c1c:	e000      	b.n	8001c20 <hiscore_Menu+0x500>
	default:
		break;
 8001c1e:	bf00      	nop
	}
	if (Press == GPIO_PIN_RESET) {
 8001c20:	4b19      	ldr	r3, [pc, #100]	; (8001c88 <hiscore_Menu+0x568>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d115      	bne.n	8001c54 <hiscore_Menu+0x534>
		if (hiscoreMenuIndexTemp == 5) {
 8001c28:	4b12      	ldr	r3, [pc, #72]	; (8001c74 <hiscore_Menu+0x554>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2b05      	cmp	r3, #5
 8001c2e:	d111      	bne.n	8001c54 <hiscore_Menu+0x534>
			mainMenu = true;
 8001c30:	4b16      	ldr	r3, [pc, #88]	; (8001c8c <hiscore_Menu+0x56c>)
 8001c32:	2201      	movs	r2, #1
 8001c34:	701a      	strb	r2, [r3, #0]
			mainMenuIndex = 0;
 8001c36:	4b16      	ldr	r3, [pc, #88]	; (8001c90 <hiscore_Menu+0x570>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
			blockUp = true;
 8001c3c:	4b15      	ldr	r3, [pc, #84]	; (8001c94 <hiscore_Menu+0x574>)
 8001c3e:	2201      	movs	r2, #1
 8001c40:	701a      	strb	r2, [r3, #0]
			blockPress = true;
 8001c42:	4b0d      	ldr	r3, [pc, #52]	; (8001c78 <hiscore_Menu+0x558>)
 8001c44:	2201      	movs	r2, #1
 8001c46:	701a      	strb	r2, [r3, #0]
			hiscoreMenu = false;
 8001c48:	4b13      	ldr	r3, [pc, #76]	; (8001c98 <hiscore_Menu+0x578>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	701a      	strb	r2, [r3, #0]
			highscoresAnim = false;
 8001c4e:	4b13      	ldr	r3, [pc, #76]	; (8001c9c <hiscore_Menu+0x57c>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	701a      	strb	r2, [r3, #0]
		}

	}

}
 8001c54:	bf00      	nop
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	0800ac1c 	.word	0x0800ac1c
 8001c60:	0800ac20 	.word	0x0800ac20
 8001c64:	0800ac24 	.word	0x0800ac24
 8001c68:	0800ab6c 	.word	0x0800ab6c
 8001c6c:	0800ac08 	.word	0x0800ac08
 8001c70:	200003b0 	.word	0x200003b0
 8001c74:	20000400 	.word	0x20000400
 8001c78:	20000019 	.word	0x20000019
 8001c7c:	0800ac28 	.word	0x0800ac28
 8001c80:	0800ac2c 	.word	0x0800ac2c
 8001c84:	2000001b 	.word	0x2000001b
 8001c88:	20000404 	.word	0x20000404
 8001c8c:	200003cb 	.word	0x200003cb
 8001c90:	20000000 	.word	0x20000000
 8001c94:	2000001a 	.word	0x2000001a
 8001c98:	200003c8 	.word	0x200003c8
 8001c9c:	200003d1 	.word	0x200003d1

08001ca0 <creditsAnimation>:

void creditsAnimation() {
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
	switch (creditsIndexAnim) {
 8001ca4:	4b94      	ldr	r3, [pc, #592]	; (8001ef8 <creditsAnimation+0x258>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2b08      	cmp	r3, #8
 8001caa:	f200 810d 	bhi.w	8001ec8 <creditsAnimation+0x228>
 8001cae:	a201      	add	r2, pc, #4	; (adr r2, 8001cb4 <creditsAnimation+0x14>)
 8001cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cb4:	08001cd9 	.word	0x08001cd9
 8001cb8:	08001cf1 	.word	0x08001cf1
 8001cbc:	08001cf9 	.word	0x08001cf9
 8001cc0:	08001d23 	.word	0x08001d23
 8001cc4:	08001d7d 	.word	0x08001d7d
 8001cc8:	08001def 	.word	0x08001def
 8001ccc:	08001e55 	.word	0x08001e55
 8001cd0:	08001e97 	.word	0x08001e97
 8001cd4:	08001ec1 	.word	0x08001ec1
	case 0:
		reverse2 = false;
 8001cd8:	4b88      	ldr	r3, [pc, #544]	; (8001efc <creditsAnimation+0x25c>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	701a      	strb	r2, [r3, #0]
		lcd_clear_1();
 8001cde:	f002 f839 	bl	8003d54 <lcd_clear_1>
		LCD_SetLocalization(0x06);
 8001ce2:	2006      	movs	r0, #6
 8001ce4:	f002 f8bc 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("CREDITS");
 8001ce8:	4885      	ldr	r0, [pc, #532]	; (8001f00 <creditsAnimation+0x260>)
 8001cea:	f002 f8c9 	bl	8003e80 <LCD_SendWord>
		break;
 8001cee:	e0ee      	b.n	8001ece <creditsAnimation+0x22e>
	case 1:
		reverse2 = false;
 8001cf0:	4b82      	ldr	r3, [pc, #520]	; (8001efc <creditsAnimation+0x25c>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	701a      	strb	r2, [r3, #0]
		break;
 8001cf6:	e0ea      	b.n	8001ece <creditsAnimation+0x22e>
	case 2:
		if (!reverse2) {
 8001cf8:	4b80      	ldr	r3, [pc, #512]	; (8001efc <creditsAnimation+0x25c>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	f083 0301 	eor.w	r3, r3, #1
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	f000 80e2 	beq.w	8001ecc <creditsAnimation+0x22c>
			LCD_SetLocalization(0x06);
 8001d08:	2006      	movs	r0, #6
 8001d0a:	f002 f8a9 	bl	8003e60 <LCD_SetLocalization>
			LCD_SendWord(" ");
 8001d0e:	487d      	ldr	r0, [pc, #500]	; (8001f04 <creditsAnimation+0x264>)
 8001d10:	f002 f8b6 	bl	8003e80 <LCD_SendWord>
			LCD_SetLocalization(0x0C);
 8001d14:	200c      	movs	r0, #12
 8001d16:	f002 f8a3 	bl	8003e60 <LCD_SetLocalization>
			LCD_SendWord(" ");
 8001d1a:	487a      	ldr	r0, [pc, #488]	; (8001f04 <creditsAnimation+0x264>)
 8001d1c:	f002 f8b0 	bl	8003e80 <LCD_SendWord>
		}
		break;
 8001d20:	e0d4      	b.n	8001ecc <creditsAnimation+0x22c>
	case 3:
		if (!reverse2) {
 8001d22:	4b76      	ldr	r3, [pc, #472]	; (8001efc <creditsAnimation+0x25c>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	f083 0301 	eor.w	r3, r3, #1
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d018      	beq.n	8001d62 <creditsAnimation+0xc2>
			LCD_SetLocalization(0x07);
 8001d30:	2007      	movs	r0, #7
 8001d32:	f002 f895 	bl	8003e60 <LCD_SetLocalization>
			LCD_SendWord(" ");
 8001d36:	4873      	ldr	r0, [pc, #460]	; (8001f04 <creditsAnimation+0x264>)
 8001d38:	f002 f8a2 	bl	8003e80 <LCD_SendWord>
			LCD_SetLocalization(0x0B);
 8001d3c:	200b      	movs	r0, #11
 8001d3e:	f002 f88f 	bl	8003e60 <LCD_SetLocalization>
			LCD_SendWord(" ");
 8001d42:	4870      	ldr	r0, [pc, #448]	; (8001f04 <creditsAnimation+0x264>)
 8001d44:	f002 f89c 	bl	8003e80 <LCD_SendWord>

			LCD_SetLocalization(0x06);
 8001d48:	2006      	movs	r0, #6
 8001d4a:	f002 f889 	bl	8003e60 <LCD_SetLocalization>
			LCD_SendWord("C");
 8001d4e:	486e      	ldr	r0, [pc, #440]	; (8001f08 <creditsAnimation+0x268>)
 8001d50:	f002 f896 	bl	8003e80 <LCD_SendWord>
			LCD_SetLocalization(0x0C);
 8001d54:	200c      	movs	r0, #12
 8001d56:	f002 f883 	bl	8003e60 <LCD_SetLocalization>
			LCD_SendWord("S");
 8001d5a:	486c      	ldr	r0, [pc, #432]	; (8001f0c <creditsAnimation+0x26c>)
 8001d5c:	f002 f890 	bl	8003e80 <LCD_SendWord>
			LCD_SetLocalization(0x06);
			LCD_SendWord("C");
			LCD_SetLocalization(0x0C);
			LCD_SendWord("S");
		}
		break;
 8001d60:	e0b5      	b.n	8001ece <creditsAnimation+0x22e>
			LCD_SetLocalization(0x06);
 8001d62:	2006      	movs	r0, #6
 8001d64:	f002 f87c 	bl	8003e60 <LCD_SetLocalization>
			LCD_SendWord("C");
 8001d68:	4867      	ldr	r0, [pc, #412]	; (8001f08 <creditsAnimation+0x268>)
 8001d6a:	f002 f889 	bl	8003e80 <LCD_SendWord>
			LCD_SetLocalization(0x0C);
 8001d6e:	200c      	movs	r0, #12
 8001d70:	f002 f876 	bl	8003e60 <LCD_SetLocalization>
			LCD_SendWord("S");
 8001d74:	4865      	ldr	r0, [pc, #404]	; (8001f0c <creditsAnimation+0x26c>)
 8001d76:	f002 f883 	bl	8003e80 <LCD_SendWord>
		break;
 8001d7a:	e0a8      	b.n	8001ece <creditsAnimation+0x22e>
	case 4:
		if (!reverse2) {
 8001d7c:	4b5f      	ldr	r3, [pc, #380]	; (8001efc <creditsAnimation+0x25c>)
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	f083 0301 	eor.w	r3, r3, #1
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d018      	beq.n	8001dbc <creditsAnimation+0x11c>
			LCD_SetLocalization(0x08);
 8001d8a:	2008      	movs	r0, #8
 8001d8c:	f002 f868 	bl	8003e60 <LCD_SetLocalization>
			LCD_SendWord(" ");
 8001d90:	485c      	ldr	r0, [pc, #368]	; (8001f04 <creditsAnimation+0x264>)
 8001d92:	f002 f875 	bl	8003e80 <LCD_SendWord>
			LCD_SetLocalization(0x0A);
 8001d96:	200a      	movs	r0, #10
 8001d98:	f002 f862 	bl	8003e60 <LCD_SetLocalization>
			LCD_SendWord(" ");
 8001d9c:	4859      	ldr	r0, [pc, #356]	; (8001f04 <creditsAnimation+0x264>)
 8001d9e:	f002 f86f 	bl	8003e80 <LCD_SendWord>

			LCD_SetLocalization(0x07);
 8001da2:	2007      	movs	r0, #7
 8001da4:	f002 f85c 	bl	8003e60 <LCD_SetLocalization>
			LCD_SendWord("R");
 8001da8:	4859      	ldr	r0, [pc, #356]	; (8001f10 <creditsAnimation+0x270>)
 8001daa:	f002 f869 	bl	8003e80 <LCD_SendWord>
			LCD_SetLocalization(0x0B);
 8001dae:	200b      	movs	r0, #11
 8001db0:	f002 f856 	bl	8003e60 <LCD_SetLocalization>
			LCD_SendWord("T");
 8001db4:	4857      	ldr	r0, [pc, #348]	; (8001f14 <creditsAnimation+0x274>)
 8001db6:	f002 f863 	bl	8003e80 <LCD_SendWord>
			LCD_SetLocalization(0x07);
			LCD_SendWord("R");
			LCD_SetLocalization(0x0B);
			LCD_SendWord("T");
		}
		break;
 8001dba:	e088      	b.n	8001ece <creditsAnimation+0x22e>
			LCD_SetLocalization(0x06);
 8001dbc:	2006      	movs	r0, #6
 8001dbe:	f002 f84f 	bl	8003e60 <LCD_SetLocalization>
			LCD_SendWord(" ");
 8001dc2:	4850      	ldr	r0, [pc, #320]	; (8001f04 <creditsAnimation+0x264>)
 8001dc4:	f002 f85c 	bl	8003e80 <LCD_SendWord>
			LCD_SetLocalization(0x0C);
 8001dc8:	200c      	movs	r0, #12
 8001dca:	f002 f849 	bl	8003e60 <LCD_SetLocalization>
			LCD_SendWord(" ");
 8001dce:	484d      	ldr	r0, [pc, #308]	; (8001f04 <creditsAnimation+0x264>)
 8001dd0:	f002 f856 	bl	8003e80 <LCD_SendWord>
			LCD_SetLocalization(0x07);
 8001dd4:	2007      	movs	r0, #7
 8001dd6:	f002 f843 	bl	8003e60 <LCD_SetLocalization>
			LCD_SendWord("R");
 8001dda:	484d      	ldr	r0, [pc, #308]	; (8001f10 <creditsAnimation+0x270>)
 8001ddc:	f002 f850 	bl	8003e80 <LCD_SendWord>
			LCD_SetLocalization(0x0B);
 8001de0:	200b      	movs	r0, #11
 8001de2:	f002 f83d 	bl	8003e60 <LCD_SetLocalization>
			LCD_SendWord("T");
 8001de6:	484b      	ldr	r0, [pc, #300]	; (8001f14 <creditsAnimation+0x274>)
 8001de8:	f002 f84a 	bl	8003e80 <LCD_SendWord>
		break;
 8001dec:	e06f      	b.n	8001ece <creditsAnimation+0x22e>
	case 5:
		if (!reverse2) {
 8001dee:	4b43      	ldr	r3, [pc, #268]	; (8001efc <creditsAnimation+0x25c>)
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	f083 0301 	eor.w	r3, r3, #1
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d012      	beq.n	8001e22 <creditsAnimation+0x182>
			LCD_SetLocalization(0x09);
 8001dfc:	2009      	movs	r0, #9
 8001dfe:	f002 f82f 	bl	8003e60 <LCD_SetLocalization>
			LCD_SendWord(" ");
 8001e02:	4840      	ldr	r0, [pc, #256]	; (8001f04 <creditsAnimation+0x264>)
 8001e04:	f002 f83c 	bl	8003e80 <LCD_SendWord>

			LCD_SetLocalization(0x08);
 8001e08:	2008      	movs	r0, #8
 8001e0a:	f002 f829 	bl	8003e60 <LCD_SetLocalization>
			LCD_SendWord("E");
 8001e0e:	4842      	ldr	r0, [pc, #264]	; (8001f18 <creditsAnimation+0x278>)
 8001e10:	f002 f836 	bl	8003e80 <LCD_SendWord>
			LCD_SetLocalization(0x0A);
 8001e14:	200a      	movs	r0, #10
 8001e16:	f002 f823 	bl	8003e60 <LCD_SetLocalization>
			LCD_SendWord("I");
 8001e1a:	4840      	ldr	r0, [pc, #256]	; (8001f1c <creditsAnimation+0x27c>)
 8001e1c:	f002 f830 	bl	8003e80 <LCD_SendWord>
			LCD_SetLocalization(0x08);
			LCD_SendWord("E");
			LCD_SetLocalization(0x0A);
			LCD_SendWord("I");
		}
		break;
 8001e20:	e055      	b.n	8001ece <creditsAnimation+0x22e>
			LCD_SetLocalization(0x07);
 8001e22:	2007      	movs	r0, #7
 8001e24:	f002 f81c 	bl	8003e60 <LCD_SetLocalization>
			LCD_SendWord(" ");
 8001e28:	4836      	ldr	r0, [pc, #216]	; (8001f04 <creditsAnimation+0x264>)
 8001e2a:	f002 f829 	bl	8003e80 <LCD_SendWord>
			LCD_SetLocalization(0x0B);
 8001e2e:	200b      	movs	r0, #11
 8001e30:	f002 f816 	bl	8003e60 <LCD_SetLocalization>
			LCD_SendWord(" ");
 8001e34:	4833      	ldr	r0, [pc, #204]	; (8001f04 <creditsAnimation+0x264>)
 8001e36:	f002 f823 	bl	8003e80 <LCD_SendWord>
			LCD_SetLocalization(0x08);
 8001e3a:	2008      	movs	r0, #8
 8001e3c:	f002 f810 	bl	8003e60 <LCD_SetLocalization>
			LCD_SendWord("E");
 8001e40:	4835      	ldr	r0, [pc, #212]	; (8001f18 <creditsAnimation+0x278>)
 8001e42:	f002 f81d 	bl	8003e80 <LCD_SendWord>
			LCD_SetLocalization(0x0A);
 8001e46:	200a      	movs	r0, #10
 8001e48:	f002 f80a 	bl	8003e60 <LCD_SetLocalization>
			LCD_SendWord("I");
 8001e4c:	4833      	ldr	r0, [pc, #204]	; (8001f1c <creditsAnimation+0x27c>)
 8001e4e:	f002 f817 	bl	8003e80 <LCD_SendWord>
		break;
 8001e52:	e03c      	b.n	8001ece <creditsAnimation+0x22e>
	case 6:
		if (!reverse2) {
 8001e54:	4b29      	ldr	r3, [pc, #164]	; (8001efc <creditsAnimation+0x25c>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	f083 0301 	eor.w	r3, r3, #1
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d006      	beq.n	8001e70 <creditsAnimation+0x1d0>
			LCD_SetLocalization(0x09);
 8001e62:	2009      	movs	r0, #9
 8001e64:	f001 fffc 	bl	8003e60 <LCD_SetLocalization>
			LCD_SendWord("D");
 8001e68:	482d      	ldr	r0, [pc, #180]	; (8001f20 <creditsAnimation+0x280>)
 8001e6a:	f002 f809 	bl	8003e80 <LCD_SendWord>
			LCD_SendWord(" ");

			LCD_SetLocalization(0x09);
			LCD_SendWord("D");
		}
		break;
 8001e6e:	e02e      	b.n	8001ece <creditsAnimation+0x22e>
			LCD_SetLocalization(0x08);
 8001e70:	2008      	movs	r0, #8
 8001e72:	f001 fff5 	bl	8003e60 <LCD_SetLocalization>
			LCD_SendWord(" ");
 8001e76:	4823      	ldr	r0, [pc, #140]	; (8001f04 <creditsAnimation+0x264>)
 8001e78:	f002 f802 	bl	8003e80 <LCD_SendWord>
			LCD_SetLocalization(0x0A);
 8001e7c:	200a      	movs	r0, #10
 8001e7e:	f001 ffef 	bl	8003e60 <LCD_SetLocalization>
			LCD_SendWord(" ");
 8001e82:	4820      	ldr	r0, [pc, #128]	; (8001f04 <creditsAnimation+0x264>)
 8001e84:	f001 fffc 	bl	8003e80 <LCD_SendWord>
			LCD_SetLocalization(0x09);
 8001e88:	2009      	movs	r0, #9
 8001e8a:	f001 ffe9 	bl	8003e60 <LCD_SetLocalization>
			LCD_SendWord("D");
 8001e8e:	4824      	ldr	r0, [pc, #144]	; (8001f20 <creditsAnimation+0x280>)
 8001e90:	f001 fff6 	bl	8003e80 <LCD_SendWord>
		break;
 8001e94:	e01b      	b.n	8001ece <creditsAnimation+0x22e>
	case 7:
		if (!reverse2) {
 8001e96:	4b19      	ldr	r3, [pc, #100]	; (8001efc <creditsAnimation+0x25c>)
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	f083 0301 	eor.w	r3, r3, #1
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d006      	beq.n	8001eb2 <creditsAnimation+0x212>
			LCD_SetLocalization(0x09);
 8001ea4:	2009      	movs	r0, #9
 8001ea6:	f001 ffdb 	bl	8003e60 <LCD_SetLocalization>
			LCD_SendWord("D");
 8001eaa:	481d      	ldr	r0, [pc, #116]	; (8001f20 <creditsAnimation+0x280>)
 8001eac:	f001 ffe8 	bl	8003e80 <LCD_SendWord>

		} else {
			LCD_SetLocalization(0x09);
			LCD_SendWord(" ");
		}
		break;
 8001eb0:	e00d      	b.n	8001ece <creditsAnimation+0x22e>
			LCD_SetLocalization(0x09);
 8001eb2:	2009      	movs	r0, #9
 8001eb4:	f001 ffd4 	bl	8003e60 <LCD_SetLocalization>
			LCD_SendWord(" ");
 8001eb8:	4812      	ldr	r0, [pc, #72]	; (8001f04 <creditsAnimation+0x264>)
 8001eba:	f001 ffe1 	bl	8003e80 <LCD_SendWord>
		break;
 8001ebe:	e006      	b.n	8001ece <creditsAnimation+0x22e>
	case 8:
		reverse2 = true;
 8001ec0:	4b0e      	ldr	r3, [pc, #56]	; (8001efc <creditsAnimation+0x25c>)
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	701a      	strb	r2, [r3, #0]
		break;
 8001ec6:	e002      	b.n	8001ece <creditsAnimation+0x22e>
	default:
		break;
 8001ec8:	bf00      	nop
 8001eca:	e000      	b.n	8001ece <creditsAnimation+0x22e>
		break;
 8001ecc:	bf00      	nop
	}

	if (!reverse2)
 8001ece:	4b0b      	ldr	r3, [pc, #44]	; (8001efc <creditsAnimation+0x25c>)
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	f083 0301 	eor.w	r3, r3, #1
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d005      	beq.n	8001ee8 <creditsAnimation+0x248>
		creditsIndexAnim++;
 8001edc:	4b06      	ldr	r3, [pc, #24]	; (8001ef8 <creditsAnimation+0x258>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	4a05      	ldr	r2, [pc, #20]	; (8001ef8 <creditsAnimation+0x258>)
 8001ee4:	6013      	str	r3, [r2, #0]
	else
		creditsIndexAnim--;

}
 8001ee6:	e004      	b.n	8001ef2 <creditsAnimation+0x252>
		creditsIndexAnim--;
 8001ee8:	4b03      	ldr	r3, [pc, #12]	; (8001ef8 <creditsAnimation+0x258>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	3b01      	subs	r3, #1
 8001eee:	4a02      	ldr	r2, [pc, #8]	; (8001ef8 <creditsAnimation+0x258>)
 8001ef0:	6013      	str	r3, [r2, #0]
}
 8001ef2:	bf00      	nop
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	200003bc 	.word	0x200003bc
 8001efc:	200003d5 	.word	0x200003d5
 8001f00:	0800ac34 	.word	0x0800ac34
 8001f04:	0800abd8 	.word	0x0800abd8
 8001f08:	0800abec 	.word	0x0800abec
 8001f0c:	0800abe8 	.word	0x0800abe8
 8001f10:	0800abf4 	.word	0x0800abf4
 8001f14:	0800ac3c 	.word	0x0800ac3c
 8001f18:	0800abf8 	.word	0x0800abf8
 8001f1c:	0800abdc 	.word	0x0800abdc
 8001f20:	0800ac40 	.word	0x0800ac40

08001f24 <leftArrowAnimation>:

void leftArrowAnimation() {
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af02      	add	r7, sp, #8
	if (creditsMenuIndexTemp == 1) {
 8001f2a:	4b39      	ldr	r3, [pc, #228]	; (8002010 <leftArrowAnimation+0xec>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d116      	bne.n	8001f60 <leftArrowAnimation+0x3c>
		switch (leftArrowAnimIndex) {
 8001f32:	4b38      	ldr	r3, [pc, #224]	; (8002014 <leftArrowAnimation+0xf0>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d002      	beq.n	8001f40 <leftArrowAnimation+0x1c>
 8001f3a:	2b03      	cmp	r3, #3
 8001f3c:	d009      	beq.n	8001f52 <leftArrowAnimation+0x2e>
		case 3:
			LCD_SetLocalization(0x4E);
			LCD_SendWord(" ");
			break;
		default:
			break;
 8001f3e:	e015      	b.n	8001f6c <leftArrowAnimation+0x48>
			createInvertedWord("o", 0x4E, 1, 1, 2);
 8001f40:	2302      	movs	r3, #2
 8001f42:	9300      	str	r3, [sp, #0]
 8001f44:	2301      	movs	r3, #1
 8001f46:	2201      	movs	r2, #1
 8001f48:	214e      	movs	r1, #78	; 0x4e
 8001f4a:	4833      	ldr	r0, [pc, #204]	; (8002018 <leftArrowAnimation+0xf4>)
 8001f4c:	f001 f8b2 	bl	80030b4 <createInvertedWord>
			break;
 8001f50:	e00c      	b.n	8001f6c <leftArrowAnimation+0x48>
			LCD_SetLocalization(0x4E);
 8001f52:	204e      	movs	r0, #78	; 0x4e
 8001f54:	f001 ff84 	bl	8003e60 <LCD_SetLocalization>
			LCD_SendWord(" ");
 8001f58:	4830      	ldr	r0, [pc, #192]	; (800201c <leftArrowAnimation+0xf8>)
 8001f5a:	f001 ff91 	bl	8003e80 <LCD_SendWord>
			break;
 8001f5e:	e005      	b.n	8001f6c <leftArrowAnimation+0x48>
		}
	} else {
		LCD_SetLocalization(0x4E);
 8001f60:	204e      	movs	r0, #78	; 0x4e
 8001f62:	f001 ff7d 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord(" ");
 8001f66:	482d      	ldr	r0, [pc, #180]	; (800201c <leftArrowAnimation+0xf8>)
 8001f68:	f001 ff8a 	bl	8003e80 <LCD_SendWord>
	}
	if (creditsMenuIndexTemp == 2) {
 8001f6c:	4b28      	ldr	r3, [pc, #160]	; (8002010 <leftArrowAnimation+0xec>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d116      	bne.n	8001fa2 <leftArrowAnimation+0x7e>
		switch (leftArrowAnimIndex) {
 8001f74:	4b27      	ldr	r3, [pc, #156]	; (8002014 <leftArrowAnimation+0xf0>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d002      	beq.n	8001f82 <leftArrowAnimation+0x5e>
 8001f7c:	2b03      	cmp	r3, #3
 8001f7e:	d009      	beq.n	8001f94 <leftArrowAnimation+0x70>
		case 3:
			LCD_SetLocalization(0x21);
			LCD_SendWord(" ");
			break;
		default:
			break;
 8001f80:	e015      	b.n	8001fae <leftArrowAnimation+0x8a>
			createInvertedWord("o", 0x21, 1, 1, 2);
 8001f82:	2302      	movs	r3, #2
 8001f84:	9300      	str	r3, [sp, #0]
 8001f86:	2301      	movs	r3, #1
 8001f88:	2201      	movs	r2, #1
 8001f8a:	2121      	movs	r1, #33	; 0x21
 8001f8c:	4822      	ldr	r0, [pc, #136]	; (8002018 <leftArrowAnimation+0xf4>)
 8001f8e:	f001 f891 	bl	80030b4 <createInvertedWord>
			break;
 8001f92:	e00c      	b.n	8001fae <leftArrowAnimation+0x8a>
			LCD_SetLocalization(0x21);
 8001f94:	2021      	movs	r0, #33	; 0x21
 8001f96:	f001 ff63 	bl	8003e60 <LCD_SetLocalization>
			LCD_SendWord(" ");
 8001f9a:	4820      	ldr	r0, [pc, #128]	; (800201c <leftArrowAnimation+0xf8>)
 8001f9c:	f001 ff70 	bl	8003e80 <LCD_SendWord>
			break;
 8001fa0:	e005      	b.n	8001fae <leftArrowAnimation+0x8a>
		}
	} else {
		LCD_SetLocalization(0x21);
 8001fa2:	2021      	movs	r0, #33	; 0x21
 8001fa4:	f001 ff5c 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord(" ");
 8001fa8:	481c      	ldr	r0, [pc, #112]	; (800201c <leftArrowAnimation+0xf8>)
 8001faa:	f001 ff69 	bl	8003e80 <LCD_SendWord>
	}
	if (creditsMenuIndexTemp == 3) {
 8001fae:	4b18      	ldr	r3, [pc, #96]	; (8002010 <leftArrowAnimation+0xec>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2b03      	cmp	r3, #3
 8001fb4:	d116      	bne.n	8001fe4 <leftArrowAnimation+0xc0>
		switch (leftArrowAnimIndex) {
 8001fb6:	4b17      	ldr	r3, [pc, #92]	; (8002014 <leftArrowAnimation+0xf0>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d002      	beq.n	8001fc4 <leftArrowAnimation+0xa0>
 8001fbe:	2b03      	cmp	r3, #3
 8001fc0:	d009      	beq.n	8001fd6 <leftArrowAnimation+0xb2>
		case 3:
			LCD_SetLocalization(0x65);
			LCD_SendWord(" ");
			break;
		default:
			break;
 8001fc2:	e015      	b.n	8001ff0 <leftArrowAnimation+0xcc>
			createInvertedWord("o", 0x65, 1, 1, 2);
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	9300      	str	r3, [sp, #0]
 8001fc8:	2301      	movs	r3, #1
 8001fca:	2201      	movs	r2, #1
 8001fcc:	2165      	movs	r1, #101	; 0x65
 8001fce:	4812      	ldr	r0, [pc, #72]	; (8002018 <leftArrowAnimation+0xf4>)
 8001fd0:	f001 f870 	bl	80030b4 <createInvertedWord>
			break;
 8001fd4:	e00c      	b.n	8001ff0 <leftArrowAnimation+0xcc>
			LCD_SetLocalization(0x65);
 8001fd6:	2065      	movs	r0, #101	; 0x65
 8001fd8:	f001 ff42 	bl	8003e60 <LCD_SetLocalization>
			LCD_SendWord(" ");
 8001fdc:	480f      	ldr	r0, [pc, #60]	; (800201c <leftArrowAnimation+0xf8>)
 8001fde:	f001 ff4f 	bl	8003e80 <LCD_SendWord>
			break;
 8001fe2:	e005      	b.n	8001ff0 <leftArrowAnimation+0xcc>
		}
	} else {
		LCD_SetLocalization(0x65);
 8001fe4:	2065      	movs	r0, #101	; 0x65
 8001fe6:	f001 ff3b 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord(" ");
 8001fea:	480c      	ldr	r0, [pc, #48]	; (800201c <leftArrowAnimation+0xf8>)
 8001fec:	f001 ff48 	bl	8003e80 <LCD_SendWord>
	}
	if (leftArrowAnimIndex == 3) {
 8001ff0:	4b08      	ldr	r3, [pc, #32]	; (8002014 <leftArrowAnimation+0xf0>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2b03      	cmp	r3, #3
 8001ff6:	d103      	bne.n	8002000 <leftArrowAnimation+0xdc>
		leftArrowAnimIndex = 0;
 8001ff8:	4b06      	ldr	r3, [pc, #24]	; (8002014 <leftArrowAnimation+0xf0>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	601a      	str	r2, [r3, #0]
	} else
		leftArrowAnimIndex++;

}
 8001ffe:	e004      	b.n	800200a <leftArrowAnimation+0xe6>
		leftArrowAnimIndex++;
 8002000:	4b04      	ldr	r3, [pc, #16]	; (8002014 <leftArrowAnimation+0xf0>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	3301      	adds	r3, #1
 8002006:	4a03      	ldr	r2, [pc, #12]	; (8002014 <leftArrowAnimation+0xf0>)
 8002008:	6013      	str	r3, [r2, #0]
}
 800200a:	bf00      	nop
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	200003b8 	.word	0x200003b8
 8002014:	200003c0 	.word	0x200003c0
 8002018:	0800ac44 	.word	0x0800ac44
 800201c:	0800abd8 	.word	0x0800abd8

08002020 <credits_Menu>:
void credits_Menu() {
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af02      	add	r7, sp, #8
	switch (creditsMenuIndex) {
 8002026:	4b90      	ldr	r3, [pc, #576]	; (8002268 <credits_Menu+0x248>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2b04      	cmp	r3, #4
 800202c:	f200 80ca 	bhi.w	80021c4 <credits_Menu+0x1a4>
 8002030:	a201      	add	r2, pc, #4	; (adr r2, 8002038 <credits_Menu+0x18>)
 8002032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002036:	bf00      	nop
 8002038:	0800204d 	.word	0x0800204d
 800203c:	080020af 	.word	0x080020af
 8002040:	080020d1 	.word	0x080020d1
 8002044:	080020f3 	.word	0x080020f3
 8002048:	08002155 	.word	0x08002155
	case 0:
		creditsAnim = true;
 800204c:	4b87      	ldr	r3, [pc, #540]	; (800226c <credits_Menu+0x24c>)
 800204e:	2201      	movs	r2, #1
 8002050:	701a      	strb	r2, [r3, #0]
		lcd_clear_2();
 8002052:	f001 fe8b 	bl	8003d6c <lcd_clear_2>
		lcd_clear_3();
 8002056:	f001 fe95 	bl	8003d84 <lcd_clear_3>
		lcd_clear_4();
 800205a:	f001 fe9f 	bl	8003d9c <lcd_clear_4>
		LCD_SetLocalization(0x40);
 800205e:	2040      	movs	r0, #64	; 0x40
 8002060:	f001 fefe 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("Product Owner");
 8002064:	4882      	ldr	r0, [pc, #520]	; (8002270 <credits_Menu+0x250>)
 8002066:	f001 ff0b 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization(0x14);
 800206a:	2014      	movs	r0, #20
 800206c:	f001 fef8 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("Scrum Master");
 8002070:	4880      	ldr	r0, [pc, #512]	; (8002274 <credits_Menu+0x254>)
 8002072:	f001 ff05 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization(0x54);
 8002076:	2054      	movs	r0, #84	; 0x54
 8002078:	f001 fef2 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("Development Team");
 800207c:	487e      	ldr	r0, [pc, #504]	; (8002278 <credits_Menu+0x258>)
 800207e:	f001 feff 	bl	8003e80 <LCD_SendWord>

		createInvertedWord("2", 0x67, 1, 0, 0);
 8002082:	2300      	movs	r3, #0
 8002084:	9300      	str	r3, [sp, #0]
 8002086:	2300      	movs	r3, #0
 8002088:	2201      	movs	r2, #1
 800208a:	2167      	movs	r1, #103	; 0x67
 800208c:	487b      	ldr	r0, [pc, #492]	; (800227c <credits_Menu+0x25c>)
 800208e:	f001 f811 	bl	80030b4 <createInvertedWord>
		blockUp = true;
 8002092:	4b7b      	ldr	r3, [pc, #492]	; (8002280 <credits_Menu+0x260>)
 8002094:	2201      	movs	r2, #1
 8002096:	701a      	strb	r2, [r3, #0]
		blockPress = true;
 8002098:	4b7a      	ldr	r3, [pc, #488]	; (8002284 <credits_Menu+0x264>)
 800209a:	2201      	movs	r2, #1
 800209c:	701a      	strb	r2, [r3, #0]
		creditsMenuIndexTemp = creditsMenuIndex;
 800209e:	4b72      	ldr	r3, [pc, #456]	; (8002268 <credits_Menu+0x248>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a79      	ldr	r2, [pc, #484]	; (8002288 <credits_Menu+0x268>)
 80020a4:	6013      	str	r3, [r2, #0]
		creditsMenuIndex = 50;
 80020a6:	4b70      	ldr	r3, [pc, #448]	; (8002268 <credits_Menu+0x248>)
 80020a8:	2232      	movs	r2, #50	; 0x32
 80020aa:	601a      	str	r2, [r3, #0]
		break;
 80020ac:	e08b      	b.n	80021c6 <credits_Menu+0x1a6>
	case 1:
		blockUp = false;
 80020ae:	4b74      	ldr	r3, [pc, #464]	; (8002280 <credits_Menu+0x260>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	701a      	strb	r2, [r3, #0]
		blockPress = false;
 80020b4:	4b73      	ldr	r3, [pc, #460]	; (8002284 <credits_Menu+0x264>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	701a      	strb	r2, [r3, #0]
		leftArrowAnim = true;
 80020ba:	4b74      	ldr	r3, [pc, #464]	; (800228c <credits_Menu+0x26c>)
 80020bc:	2201      	movs	r2, #1
 80020be:	701a      	strb	r2, [r3, #0]
		creditsMenuIndexTemp = creditsMenuIndex;
 80020c0:	4b69      	ldr	r3, [pc, #420]	; (8002268 <credits_Menu+0x248>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a70      	ldr	r2, [pc, #448]	; (8002288 <credits_Menu+0x268>)
 80020c6:	6013      	str	r3, [r2, #0]
		creditsMenuIndex = 50;
 80020c8:	4b67      	ldr	r3, [pc, #412]	; (8002268 <credits_Menu+0x248>)
 80020ca:	2232      	movs	r2, #50	; 0x32
 80020cc:	601a      	str	r2, [r3, #0]
		break;
 80020ce:	e07a      	b.n	80021c6 <credits_Menu+0x1a6>
	case 2:
		blockUp = false;
 80020d0:	4b6b      	ldr	r3, [pc, #428]	; (8002280 <credits_Menu+0x260>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	701a      	strb	r2, [r3, #0]
		blockPress = false;
 80020d6:	4b6b      	ldr	r3, [pc, #428]	; (8002284 <credits_Menu+0x264>)
 80020d8:	2200      	movs	r2, #0
 80020da:	701a      	strb	r2, [r3, #0]
		leftArrowAnim = true;
 80020dc:	4b6b      	ldr	r3, [pc, #428]	; (800228c <credits_Menu+0x26c>)
 80020de:	2201      	movs	r2, #1
 80020e0:	701a      	strb	r2, [r3, #0]
		creditsMenuIndexTemp = creditsMenuIndex;
 80020e2:	4b61      	ldr	r3, [pc, #388]	; (8002268 <credits_Menu+0x248>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a68      	ldr	r2, [pc, #416]	; (8002288 <credits_Menu+0x268>)
 80020e8:	6013      	str	r3, [r2, #0]
		creditsMenuIndex = 50;
 80020ea:	4b5f      	ldr	r3, [pc, #380]	; (8002268 <credits_Menu+0x248>)
 80020ec:	2232      	movs	r2, #50	; 0x32
 80020ee:	601a      	str	r2, [r3, #0]
		break;
 80020f0:	e069      	b.n	80021c6 <credits_Menu+0x1a6>
	case 3:
		if (turn) {
 80020f2:	4b67      	ldr	r3, [pc, #412]	; (8002290 <credits_Menu+0x270>)
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d024      	beq.n	8002144 <credits_Menu+0x124>
			creditsAnim = true;
 80020fa:	4b5c      	ldr	r3, [pc, #368]	; (800226c <credits_Menu+0x24c>)
 80020fc:	2201      	movs	r2, #1
 80020fe:	701a      	strb	r2, [r3, #0]
			lcd_cls();
 8002100:	f001 fe58 	bl	8003db4 <lcd_cls>
			LCD_SetLocalization(0x40);
 8002104:	2040      	movs	r0, #64	; 0x40
 8002106:	f001 feab 	bl	8003e60 <LCD_SetLocalization>
			LCD_SendWord("Product Owner");
 800210a:	4859      	ldr	r0, [pc, #356]	; (8002270 <credits_Menu+0x250>)
 800210c:	f001 feb8 	bl	8003e80 <LCD_SendWord>
			LCD_SetLocalization(0x14);
 8002110:	2014      	movs	r0, #20
 8002112:	f001 fea5 	bl	8003e60 <LCD_SetLocalization>
			LCD_SendWord("Scrum Master");
 8002116:	4857      	ldr	r0, [pc, #348]	; (8002274 <credits_Menu+0x254>)
 8002118:	f001 feb2 	bl	8003e80 <LCD_SendWord>
			LCD_SetLocalization(0x54);
 800211c:	2054      	movs	r0, #84	; 0x54
 800211e:	f001 fe9f 	bl	8003e60 <LCD_SetLocalization>
			LCD_SendWord("Development Team");
 8002122:	4855      	ldr	r0, [pc, #340]	; (8002278 <credits_Menu+0x258>)
 8002124:	f001 feac 	bl	8003e80 <LCD_SendWord>
			createInvertedWord("2", 0x67, 1, 0, 0);
 8002128:	2300      	movs	r3, #0
 800212a:	9300      	str	r3, [sp, #0]
 800212c:	2300      	movs	r3, #0
 800212e:	2201      	movs	r2, #1
 8002130:	2167      	movs	r1, #103	; 0x67
 8002132:	4852      	ldr	r0, [pc, #328]	; (800227c <credits_Menu+0x25c>)
 8002134:	f000 ffbe 	bl	80030b4 <createInvertedWord>
			leftArrowAnim = true;
 8002138:	4b54      	ldr	r3, [pc, #336]	; (800228c <credits_Menu+0x26c>)
 800213a:	2201      	movs	r2, #1
 800213c:	701a      	strb	r2, [r3, #0]
			turn = false;
 800213e:	4b54      	ldr	r3, [pc, #336]	; (8002290 <credits_Menu+0x270>)
 8002140:	2200      	movs	r2, #0
 8002142:	701a      	strb	r2, [r3, #0]
		}
		creditsMenuIndexTemp = creditsMenuIndex;
 8002144:	4b48      	ldr	r3, [pc, #288]	; (8002268 <credits_Menu+0x248>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a4f      	ldr	r2, [pc, #316]	; (8002288 <credits_Menu+0x268>)
 800214a:	6013      	str	r3, [r2, #0]
		creditsMenuIndex = 50;
 800214c:	4b46      	ldr	r3, [pc, #280]	; (8002268 <credits_Menu+0x248>)
 800214e:	2232      	movs	r2, #50	; 0x32
 8002150:	601a      	str	r2, [r3, #0]
		break;
 8002152:	e038      	b.n	80021c6 <credits_Menu+0x1a6>
	case 4:
		lcd_cls();
 8002154:	f001 fe2e 	bl	8003db4 <lcd_cls>
		creditsAnim = false;
 8002158:	4b44      	ldr	r3, [pc, #272]	; (800226c <credits_Menu+0x24c>)
 800215a:	2200      	movs	r2, #0
 800215c:	701a      	strb	r2, [r3, #0]
		LCD_SetLocalization(0x00);
 800215e:	2000      	movs	r0, #0
 8002160:	f001 fe7e 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("Product Owner");
 8002164:	4842      	ldr	r0, [pc, #264]	; (8002270 <credits_Menu+0x250>)
 8002166:	f001 fe8b 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization(0x40);
 800216a:	2040      	movs	r0, #64	; 0x40
 800216c:	f001 fe78 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("Scrum Master");
 8002170:	4840      	ldr	r0, [pc, #256]	; (8002274 <credits_Menu+0x254>)
 8002172:	f001 fe85 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization(0x14);
 8002176:	2014      	movs	r0, #20
 8002178:	f001 fe72 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("Development Team");
 800217c:	483e      	ldr	r0, [pc, #248]	; (8002278 <credits_Menu+0x258>)
 800217e:	f001 fe7f 	bl	8003e80 <LCD_SendWord>
		createInvertedWord("Back", 0x54, 4, 1, 0);
 8002182:	2300      	movs	r3, #0
 8002184:	9300      	str	r3, [sp, #0]
 8002186:	2301      	movs	r3, #1
 8002188:	2204      	movs	r2, #4
 800218a:	2154      	movs	r1, #84	; 0x54
 800218c:	4841      	ldr	r0, [pc, #260]	; (8002294 <credits_Menu+0x274>)
 800218e:	f000 ff91 	bl	80030b4 <createInvertedWord>
		createInvertedWord("8", 0x67, 1, 0, 0);
 8002192:	2300      	movs	r3, #0
 8002194:	9300      	str	r3, [sp, #0]
 8002196:	2300      	movs	r3, #0
 8002198:	2201      	movs	r2, #1
 800219a:	2167      	movs	r1, #103	; 0x67
 800219c:	483e      	ldr	r0, [pc, #248]	; (8002298 <credits_Menu+0x278>)
 800219e:	f000 ff89 	bl	80030b4 <createInvertedWord>
		turn = true;
 80021a2:	4b3b      	ldr	r3, [pc, #236]	; (8002290 <credits_Menu+0x270>)
 80021a4:	2201      	movs	r2, #1
 80021a6:	701a      	strb	r2, [r3, #0]
		blockDown = true;
 80021a8:	4b3c      	ldr	r3, [pc, #240]	; (800229c <credits_Menu+0x27c>)
 80021aa:	2201      	movs	r2, #1
 80021ac:	701a      	strb	r2, [r3, #0]
		leftArrowAnim = false;
 80021ae:	4b37      	ldr	r3, [pc, #220]	; (800228c <credits_Menu+0x26c>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	701a      	strb	r2, [r3, #0]
		creditsMenuIndexTemp = creditsMenuIndex;
 80021b4:	4b2c      	ldr	r3, [pc, #176]	; (8002268 <credits_Menu+0x248>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a33      	ldr	r2, [pc, #204]	; (8002288 <credits_Menu+0x268>)
 80021ba:	6013      	str	r3, [r2, #0]
		creditsMenuIndex = 50;
 80021bc:	4b2a      	ldr	r3, [pc, #168]	; (8002268 <credits_Menu+0x248>)
 80021be:	2232      	movs	r2, #50	; 0x32
 80021c0:	601a      	str	r2, [r3, #0]
		break;
 80021c2:	e000      	b.n	80021c6 <credits_Menu+0x1a6>
	default:
		break;
 80021c4:	bf00      	nop
	}
	if (Press == GPIO_PIN_RESET) {
 80021c6:	4b36      	ldr	r3, [pc, #216]	; (80022a0 <credits_Menu+0x280>)
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d148      	bne.n	8002260 <credits_Menu+0x240>
		if (creditsMenuIndexTemp == 4) {
 80021ce:	4b2e      	ldr	r3, [pc, #184]	; (8002288 <credits_Menu+0x268>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2b04      	cmp	r3, #4
 80021d4:	d114      	bne.n	8002200 <credits_Menu+0x1e0>
			mainMenu = true;
 80021d6:	4b33      	ldr	r3, [pc, #204]	; (80022a4 <credits_Menu+0x284>)
 80021d8:	2201      	movs	r2, #1
 80021da:	701a      	strb	r2, [r3, #0]
			mainMenuIndex = 0;
 80021dc:	4b32      	ldr	r3, [pc, #200]	; (80022a8 <credits_Menu+0x288>)
 80021de:	2200      	movs	r2, #0
 80021e0:	601a      	str	r2, [r3, #0]
			blockUp = true;
 80021e2:	4b27      	ldr	r3, [pc, #156]	; (8002280 <credits_Menu+0x260>)
 80021e4:	2201      	movs	r2, #1
 80021e6:	701a      	strb	r2, [r3, #0]
			blockPress = true;
 80021e8:	4b26      	ldr	r3, [pc, #152]	; (8002284 <credits_Menu+0x264>)
 80021ea:	2201      	movs	r2, #1
 80021ec:	701a      	strb	r2, [r3, #0]
			hiscoreMenu = false;
 80021ee:	4b2f      	ldr	r3, [pc, #188]	; (80022ac <credits_Menu+0x28c>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	701a      	strb	r2, [r3, #0]
			highscoresAnim = false;
 80021f4:	4b2e      	ldr	r3, [pc, #184]	; (80022b0 <credits_Menu+0x290>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	701a      	strb	r2, [r3, #0]
			creditsMenu = false;
 80021fa:	4b2e      	ldr	r3, [pc, #184]	; (80022b4 <credits_Menu+0x294>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	701a      	strb	r2, [r3, #0]
		}
		if (creditsMenuIndexTemp == 1) {
 8002200:	4b21      	ldr	r3, [pc, #132]	; (8002288 <credits_Menu+0x268>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d10b      	bne.n	8002220 <credits_Menu+0x200>
			creditsMenu = false;
 8002208:	4b2a      	ldr	r3, [pc, #168]	; (80022b4 <credits_Menu+0x294>)
 800220a:	2200      	movs	r2, #0
 800220c:	701a      	strb	r2, [r3, #0]
			creditsMenuMarked = true;
 800220e:	4b2a      	ldr	r3, [pc, #168]	; (80022b8 <credits_Menu+0x298>)
 8002210:	2201      	movs	r2, #1
 8002212:	701a      	strb	r2, [r3, #0]
			leftArrowAnim = false;
 8002214:	4b1d      	ldr	r3, [pc, #116]	; (800228c <credits_Menu+0x26c>)
 8002216:	2200      	movs	r2, #0
 8002218:	701a      	strb	r2, [r3, #0]
			creditsMenuIndexTemp2 = 1;
 800221a:	4b28      	ldr	r3, [pc, #160]	; (80022bc <credits_Menu+0x29c>)
 800221c:	2201      	movs	r2, #1
 800221e:	601a      	str	r2, [r3, #0]
		}
		if (creditsMenuIndexTemp == 2) {
 8002220:	4b19      	ldr	r3, [pc, #100]	; (8002288 <credits_Menu+0x268>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2b02      	cmp	r3, #2
 8002226:	d10b      	bne.n	8002240 <credits_Menu+0x220>
			creditsMenu = false;
 8002228:	4b22      	ldr	r3, [pc, #136]	; (80022b4 <credits_Menu+0x294>)
 800222a:	2200      	movs	r2, #0
 800222c:	701a      	strb	r2, [r3, #0]
			creditsMenuMarked = true;
 800222e:	4b22      	ldr	r3, [pc, #136]	; (80022b8 <credits_Menu+0x298>)
 8002230:	2201      	movs	r2, #1
 8002232:	701a      	strb	r2, [r3, #0]
			leftArrowAnim = false;
 8002234:	4b15      	ldr	r3, [pc, #84]	; (800228c <credits_Menu+0x26c>)
 8002236:	2200      	movs	r2, #0
 8002238:	701a      	strb	r2, [r3, #0]
			creditsMenuIndexTemp2 = 2;
 800223a:	4b20      	ldr	r3, [pc, #128]	; (80022bc <credits_Menu+0x29c>)
 800223c:	2202      	movs	r2, #2
 800223e:	601a      	str	r2, [r3, #0]
		}
		if (creditsMenuIndexTemp == 3) {
 8002240:	4b11      	ldr	r3, [pc, #68]	; (8002288 <credits_Menu+0x268>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2b03      	cmp	r3, #3
 8002246:	d10b      	bne.n	8002260 <credits_Menu+0x240>
			creditsMenu = false;
 8002248:	4b1a      	ldr	r3, [pc, #104]	; (80022b4 <credits_Menu+0x294>)
 800224a:	2200      	movs	r2, #0
 800224c:	701a      	strb	r2, [r3, #0]
			creditsMenuMarked = true;
 800224e:	4b1a      	ldr	r3, [pc, #104]	; (80022b8 <credits_Menu+0x298>)
 8002250:	2201      	movs	r2, #1
 8002252:	701a      	strb	r2, [r3, #0]
			leftArrowAnim = false;
 8002254:	4b0d      	ldr	r3, [pc, #52]	; (800228c <credits_Menu+0x26c>)
 8002256:	2200      	movs	r2, #0
 8002258:	701a      	strb	r2, [r3, #0]
			creditsMenuIndexTemp2 = 3;
 800225a:	4b18      	ldr	r3, [pc, #96]	; (80022bc <credits_Menu+0x29c>)
 800225c:	2203      	movs	r2, #3
 800225e:	601a      	str	r2, [r3, #0]
		}
	}
}
 8002260:	bf00      	nop
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	200003b4 	.word	0x200003b4
 800226c:	200003d4 	.word	0x200003d4
 8002270:	0800ac48 	.word	0x0800ac48
 8002274:	0800ac58 	.word	0x0800ac58
 8002278:	0800ac68 	.word	0x0800ac68
 800227c:	0800ab50 	.word	0x0800ab50
 8002280:	2000001a 	.word	0x2000001a
 8002284:	20000019 	.word	0x20000019
 8002288:	200003b8 	.word	0x200003b8
 800228c:	200003c9 	.word	0x200003c9
 8002290:	200003d6 	.word	0x200003d6
 8002294:	0800ac2c 	.word	0x0800ac2c
 8002298:	0800ab6c 	.word	0x0800ab6c
 800229c:	2000001b 	.word	0x2000001b
 80022a0:	20000404 	.word	0x20000404
 80022a4:	200003cb 	.word	0x200003cb
 80022a8:	20000000 	.word	0x20000000
 80022ac:	200003c8 	.word	0x200003c8
 80022b0:	200003d1 	.word	0x200003d1
 80022b4:	200003d3 	.word	0x200003d3
 80022b8:	200003d7 	.word	0x200003d7
 80022bc:	200003c4 	.word	0x200003c4

080022c0 <credits_Menu_Marked>:

void credits_Menu_Marked() {
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af02      	add	r7, sp, #8
	switch (creditsMenuIndexTemp2) {
 80022c6:	4b5a      	ldr	r3, [pc, #360]	; (8002430 <credits_Menu_Marked+0x170>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d02f      	beq.n	800232e <credits_Menu_Marked+0x6e>
 80022ce:	2b03      	cmp	r3, #3
 80022d0:	d05b      	beq.n	800238a <credits_Menu_Marked+0xca>
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d000      	beq.n	80022d8 <credits_Menu_Marked+0x18>
		creditsAnim = false;
		creditsMenuIndexTemp = creditsMenuIndexTemp2;
		creditsMenuIndexTemp2 = 50;
		break;
	default:
		break;
 80022d6:	e08c      	b.n	80023f2 <credits_Menu_Marked+0x132>
		blockUp = true;
 80022d8:	4b56      	ldr	r3, [pc, #344]	; (8002434 <credits_Menu_Marked+0x174>)
 80022da:	2201      	movs	r2, #1
 80022dc:	701a      	strb	r2, [r3, #0]
		blockPress = false;
 80022de:	4b56      	ldr	r3, [pc, #344]	; (8002438 <credits_Menu_Marked+0x178>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	701a      	strb	r2, [r3, #0]
		lcd_cls();
 80022e4:	f001 fd66 	bl	8003db4 <lcd_cls>
		LCD_SetLocalization(0x03);
 80022e8:	2003      	movs	r0, #3
 80022ea:	f001 fdb9 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("Product Owner");
 80022ee:	4853      	ldr	r0, [pc, #332]	; (800243c <credits_Menu_Marked+0x17c>)
 80022f0:	f001 fdc6 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization(0x40);
 80022f4:	2040      	movs	r0, #64	; 0x40
 80022f6:	f001 fdb3 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("Zbigniew Jaryst");
 80022fa:	4851      	ldr	r0, [pc, #324]	; (8002440 <credits_Menu_Marked+0x180>)
 80022fc:	f001 fdc0 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization(0x54);
 8002300:	2054      	movs	r0, #84	; 0x54
 8002302:	f001 fdad 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("Back");
 8002306:	484f      	ldr	r0, [pc, #316]	; (8002444 <credits_Menu_Marked+0x184>)
 8002308:	f001 fdba 	bl	8003e80 <LCD_SendWord>
		creditsAnim = false;
 800230c:	4b4e      	ldr	r3, [pc, #312]	; (8002448 <credits_Menu_Marked+0x188>)
 800230e:	2200      	movs	r2, #0
 8002310:	701a      	strb	r2, [r3, #0]
		leftArrowAnim = false;
 8002312:	4b4e      	ldr	r3, [pc, #312]	; (800244c <credits_Menu_Marked+0x18c>)
 8002314:	2200      	movs	r2, #0
 8002316:	701a      	strb	r2, [r3, #0]
		creditsMenu = false;
 8002318:	4b4d      	ldr	r3, [pc, #308]	; (8002450 <credits_Menu_Marked+0x190>)
 800231a:	2200      	movs	r2, #0
 800231c:	701a      	strb	r2, [r3, #0]
		creditsMenuIndexTemp = creditsMenuIndexTemp2;
 800231e:	4b44      	ldr	r3, [pc, #272]	; (8002430 <credits_Menu_Marked+0x170>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a4c      	ldr	r2, [pc, #304]	; (8002454 <credits_Menu_Marked+0x194>)
 8002324:	6013      	str	r3, [r2, #0]
		creditsMenuIndexTemp2 = 50;
 8002326:	4b42      	ldr	r3, [pc, #264]	; (8002430 <credits_Menu_Marked+0x170>)
 8002328:	2232      	movs	r2, #50	; 0x32
 800232a:	601a      	str	r2, [r3, #0]
		break;
 800232c:	e061      	b.n	80023f2 <credits_Menu_Marked+0x132>
		blockUp = true;
 800232e:	4b41      	ldr	r3, [pc, #260]	; (8002434 <credits_Menu_Marked+0x174>)
 8002330:	2201      	movs	r2, #1
 8002332:	701a      	strb	r2, [r3, #0]
		blockDown = true;
 8002334:	4b48      	ldr	r3, [pc, #288]	; (8002458 <credits_Menu_Marked+0x198>)
 8002336:	2201      	movs	r2, #1
 8002338:	701a      	strb	r2, [r3, #0]
		blockPress = false;
 800233a:	4b3f      	ldr	r3, [pc, #252]	; (8002438 <credits_Menu_Marked+0x178>)
 800233c:	2200      	movs	r2, #0
 800233e:	701a      	strb	r2, [r3, #0]
		lcd_cls();
 8002340:	f001 fd38 	bl	8003db4 <lcd_cls>
		LCD_SetLocalization(0x04);
 8002344:	2004      	movs	r0, #4
 8002346:	f001 fd8b 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("Scrum Master");
 800234a:	4844      	ldr	r0, [pc, #272]	; (800245c <credits_Menu_Marked+0x19c>)
 800234c:	f001 fd98 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization(0x40);
 8002350:	2040      	movs	r0, #64	; 0x40
 8002352:	f001 fd85 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("Aleksander Galganski");
 8002356:	4842      	ldr	r0, [pc, #264]	; (8002460 <credits_Menu_Marked+0x1a0>)
 8002358:	f001 fd92 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization(0x54);
 800235c:	2054      	movs	r0, #84	; 0x54
 800235e:	f001 fd7f 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("Back");
 8002362:	4838      	ldr	r0, [pc, #224]	; (8002444 <credits_Menu_Marked+0x184>)
 8002364:	f001 fd8c 	bl	8003e80 <LCD_SendWord>
		creditsAnim = false;
 8002368:	4b37      	ldr	r3, [pc, #220]	; (8002448 <credits_Menu_Marked+0x188>)
 800236a:	2200      	movs	r2, #0
 800236c:	701a      	strb	r2, [r3, #0]
		leftArrowAnim = false;
 800236e:	4b37      	ldr	r3, [pc, #220]	; (800244c <credits_Menu_Marked+0x18c>)
 8002370:	2200      	movs	r2, #0
 8002372:	701a      	strb	r2, [r3, #0]
		creditsMenu = false;
 8002374:	4b36      	ldr	r3, [pc, #216]	; (8002450 <credits_Menu_Marked+0x190>)
 8002376:	2200      	movs	r2, #0
 8002378:	701a      	strb	r2, [r3, #0]
		creditsMenuIndexTemp = creditsMenuIndexTemp2;
 800237a:	4b2d      	ldr	r3, [pc, #180]	; (8002430 <credits_Menu_Marked+0x170>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a35      	ldr	r2, [pc, #212]	; (8002454 <credits_Menu_Marked+0x194>)
 8002380:	6013      	str	r3, [r2, #0]
		creditsMenuIndexTemp2 = 50;
 8002382:	4b2b      	ldr	r3, [pc, #172]	; (8002430 <credits_Menu_Marked+0x170>)
 8002384:	2232      	movs	r2, #50	; 0x32
 8002386:	601a      	str	r2, [r3, #0]
		break;
 8002388:	e033      	b.n	80023f2 <credits_Menu_Marked+0x132>
		blockUp = true;
 800238a:	4b2a      	ldr	r3, [pc, #168]	; (8002434 <credits_Menu_Marked+0x174>)
 800238c:	2201      	movs	r2, #1
 800238e:	701a      	strb	r2, [r3, #0]
		blockDown = true;
 8002390:	4b31      	ldr	r3, [pc, #196]	; (8002458 <credits_Menu_Marked+0x198>)
 8002392:	2201      	movs	r2, #1
 8002394:	701a      	strb	r2, [r3, #0]
		blockPress = false;
 8002396:	4b28      	ldr	r3, [pc, #160]	; (8002438 <credits_Menu_Marked+0x178>)
 8002398:	2200      	movs	r2, #0
 800239a:	701a      	strb	r2, [r3, #0]
		lcd_cls();
 800239c:	f001 fd0a 	bl	8003db4 <lcd_cls>
		LCD_SetLocalization(0x02);
 80023a0:	2002      	movs	r0, #2
 80023a2:	f001 fd5d 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("Development Team");
 80023a6:	482f      	ldr	r0, [pc, #188]	; (8002464 <credits_Menu_Marked+0x1a4>)
 80023a8:	f001 fd6a 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization(0x40);
 80023ac:	2040      	movs	r0, #64	; 0x40
 80023ae:	f001 fd57 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("Michal Kapala");
 80023b2:	482d      	ldr	r0, [pc, #180]	; (8002468 <credits_Menu_Marked+0x1a8>)
 80023b4:	f001 fd64 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization(0x14);
 80023b8:	2014      	movs	r0, #20
 80023ba:	f001 fd51 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("Bartosz Czarnecki");
 80023be:	482b      	ldr	r0, [pc, #172]	; (800246c <credits_Menu_Marked+0x1ac>)
 80023c0:	f001 fd5e 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization(0x54);
 80023c4:	2054      	movs	r0, #84	; 0x54
 80023c6:	f001 fd4b 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("Back");
 80023ca:	481e      	ldr	r0, [pc, #120]	; (8002444 <credits_Menu_Marked+0x184>)
 80023cc:	f001 fd58 	bl	8003e80 <LCD_SendWord>
		leftArrowAnim = false;
 80023d0:	4b1e      	ldr	r3, [pc, #120]	; (800244c <credits_Menu_Marked+0x18c>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	701a      	strb	r2, [r3, #0]
		creditsMenu = false;
 80023d6:	4b1e      	ldr	r3, [pc, #120]	; (8002450 <credits_Menu_Marked+0x190>)
 80023d8:	2200      	movs	r2, #0
 80023da:	701a      	strb	r2, [r3, #0]
		creditsAnim = false;
 80023dc:	4b1a      	ldr	r3, [pc, #104]	; (8002448 <credits_Menu_Marked+0x188>)
 80023de:	2200      	movs	r2, #0
 80023e0:	701a      	strb	r2, [r3, #0]
		creditsMenuIndexTemp = creditsMenuIndexTemp2;
 80023e2:	4b13      	ldr	r3, [pc, #76]	; (8002430 <credits_Menu_Marked+0x170>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a1b      	ldr	r2, [pc, #108]	; (8002454 <credits_Menu_Marked+0x194>)
 80023e8:	6013      	str	r3, [r2, #0]
		creditsMenuIndexTemp2 = 50;
 80023ea:	4b11      	ldr	r3, [pc, #68]	; (8002430 <credits_Menu_Marked+0x170>)
 80023ec:	2232      	movs	r2, #50	; 0x32
 80023ee:	601a      	str	r2, [r3, #0]
		break;
 80023f0:	bf00      	nop
	}
	if (backPicked) {
 80023f2:	4b1f      	ldr	r3, [pc, #124]	; (8002470 <credits_Menu_Marked+0x1b0>)
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d017      	beq.n	800242a <credits_Menu_Marked+0x16a>
		createInvertedWord("Back", 0x54, 4, 1, 0);
 80023fa:	2300      	movs	r3, #0
 80023fc:	9300      	str	r3, [sp, #0]
 80023fe:	2301      	movs	r3, #1
 8002400:	2204      	movs	r2, #4
 8002402:	2154      	movs	r1, #84	; 0x54
 8002404:	480f      	ldr	r0, [pc, #60]	; (8002444 <credits_Menu_Marked+0x184>)
 8002406:	f000 fe55 	bl	80030b4 <createInvertedWord>
		if (Press == GPIO_PIN_RESET) {
 800240a:	4b1a      	ldr	r3, [pc, #104]	; (8002474 <credits_Menu_Marked+0x1b4>)
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d10b      	bne.n	800242a <credits_Menu_Marked+0x16a>
			creditsMenu = true;
 8002412:	4b0f      	ldr	r3, [pc, #60]	; (8002450 <credits_Menu_Marked+0x190>)
 8002414:	2201      	movs	r2, #1
 8002416:	701a      	strb	r2, [r3, #0]
			creditsMenuMarked = false;
 8002418:	4b17      	ldr	r3, [pc, #92]	; (8002478 <credits_Menu_Marked+0x1b8>)
 800241a:	2200      	movs	r2, #0
 800241c:	701a      	strb	r2, [r3, #0]
			creditsMenuIndex = 0;
 800241e:	4b17      	ldr	r3, [pc, #92]	; (800247c <credits_Menu_Marked+0x1bc>)
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]
			backPicked = false;
 8002424:	4b12      	ldr	r3, [pc, #72]	; (8002470 <credits_Menu_Marked+0x1b0>)
 8002426:	2200      	movs	r2, #0
 8002428:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800242a:	bf00      	nop
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	200003c4 	.word	0x200003c4
 8002434:	2000001a 	.word	0x2000001a
 8002438:	20000019 	.word	0x20000019
 800243c:	0800ac48 	.word	0x0800ac48
 8002440:	0800ac7c 	.word	0x0800ac7c
 8002444:	0800ac2c 	.word	0x0800ac2c
 8002448:	200003d4 	.word	0x200003d4
 800244c:	200003c9 	.word	0x200003c9
 8002450:	200003d3 	.word	0x200003d3
 8002454:	200003b8 	.word	0x200003b8
 8002458:	2000001b 	.word	0x2000001b
 800245c:	0800ac58 	.word	0x0800ac58
 8002460:	0800ac8c 	.word	0x0800ac8c
 8002464:	0800ac68 	.word	0x0800ac68
 8002468:	0800aca4 	.word	0x0800aca4
 800246c:	0800acb4 	.word	0x0800acb4
 8002470:	200003d8 	.word	0x200003d8
 8002474:	20000404 	.word	0x20000404
 8002478:	200003d7 	.word	0x200003d7
 800247c:	200003b4 	.word	0x200003b4

08002480 <diodeArrayInit>:
#include "diode.h"
#include "stdint.h"

void diodeArrayInit() {
 8002480:	b490      	push	{r4, r7}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
	struct Diode DiodeTemp = { 0, true, false, false, false, false, -1 };
 8002486:	4a11      	ldr	r2, [pc, #68]	; (80024cc <diodeArrayInit+0x4c>)
 8002488:	463b      	mov	r3, r7
 800248a:	ca07      	ldmia	r2, {r0, r1, r2}
 800248c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	for (int i = 0; i < 256; i++) {
 8002490:	2300      	movs	r3, #0
 8002492:	60fb      	str	r3, [r7, #12]
 8002494:	e012      	b.n	80024bc <diodeArrayInit+0x3c>
		DiodeTemp.ID = (uint16_t) i;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	b29b      	uxth	r3, r3
 800249a:	803b      	strh	r3, [r7, #0]
		DiodeArray[i] = DiodeTemp;
 800249c:	490c      	ldr	r1, [pc, #48]	; (80024d0 <diodeArrayInit+0x50>)
 800249e:	68fa      	ldr	r2, [r7, #12]
 80024a0:	4613      	mov	r3, r2
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	4413      	add	r3, r2
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	440b      	add	r3, r1
 80024aa:	461c      	mov	r4, r3
 80024ac:	463b      	mov	r3, r7
 80024ae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80024b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	for (int i = 0; i < 256; i++) {
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	3301      	adds	r3, #1
 80024ba:	60fb      	str	r3, [r7, #12]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2bff      	cmp	r3, #255	; 0xff
 80024c0:	dde9      	ble.n	8002496 <diodeArrayInit+0x16>
	}
}
 80024c2:	bf00      	nop
 80024c4:	3710      	adds	r7, #16
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bc90      	pop	{r4, r7}
 80024ca:	4770      	bx	lr
 80024cc:	0800acc8 	.word	0x0800acc8
 80024d0:	20000410 	.word	0x20000410

080024d4 <MX_DMA_Init>:
/* USER CODE END 1 */
/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80024da:	4b10      	ldr	r3, [pc, #64]	; (800251c <MX_DMA_Init+0x48>)
 80024dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024de:	4a0f      	ldr	r2, [pc, #60]	; (800251c <MX_DMA_Init+0x48>)
 80024e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80024e4:	6313      	str	r3, [r2, #48]	; 0x30
 80024e6:	4b0d      	ldr	r3, [pc, #52]	; (800251c <MX_DMA_Init+0x48>)
 80024e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024ee:	607b      	str	r3, [r7, #4]
 80024f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80024f2:	2200      	movs	r2, #0
 80024f4:	2100      	movs	r1, #0
 80024f6:	2038      	movs	r0, #56	; 0x38
 80024f8:	f004 f9c1 	bl	800687e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80024fc:	2038      	movs	r0, #56	; 0x38
 80024fe:	f004 f9da 	bl	80068b6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8002502:	2200      	movs	r2, #0
 8002504:	2100      	movs	r1, #0
 8002506:	203b      	movs	r0, #59	; 0x3b
 8002508:	f004 f9b9 	bl	800687e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800250c:	203b      	movs	r0, #59	; 0x3b
 800250e:	f004 f9d2 	bl	80068b6 <HAL_NVIC_EnableIRQ>

}
 8002512:	bf00      	nop
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	40023800 	.word	0x40023800

08002520 <lcd_create_char>:

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup



void lcd_create_char(unsigned char *Pattern, const char Location) {
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	460b      	mov	r3, r1
 800252a:	70fb      	strb	r3, [r7, #3]
	int i = 0;
 800252c:	2300      	movs	r3, #0
 800252e:	60fb      	str	r3, [r7, #12]
	lcd_send_cmd(0x40 + (Location * 8));  //Send the Address of CGRAM
 8002530:	78fb      	ldrb	r3, [r7, #3]
 8002532:	3308      	adds	r3, #8
 8002534:	b2db      	uxtb	r3, r3
 8002536:	00db      	lsls	r3, r3, #3
 8002538:	b2db      	uxtb	r3, r3
 800253a:	4618      	mov	r0, r3
 800253c:	f000 f814 	bl	8002568 <lcd_send_cmd>
	for (i = 0; i < 8; i++)
 8002540:	2300      	movs	r3, #0
 8002542:	60fb      	str	r3, [r7, #12]
 8002544:	e009      	b.n	800255a <lcd_create_char+0x3a>
		lcd_send_data(Pattern[i]);  //Pass the bytes of pattern on LCD
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	4413      	add	r3, r2
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	4618      	mov	r0, r3
 8002550:	f000 f83a 	bl	80025c8 <lcd_send_data>
	for (i = 0; i < 8; i++)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	3301      	adds	r3, #1
 8002558:	60fb      	str	r3, [r7, #12]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2b07      	cmp	r3, #7
 800255e:	ddf2      	ble.n	8002546 <lcd_create_char+0x26>
}
 8002560:	bf00      	nop
 8002562:	3710      	adds	r7, #16
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <lcd_send_cmd>:

void lcd_send_cmd(char cmd) {
 8002568:	b580      	push	{r7, lr}
 800256a:	b086      	sub	sp, #24
 800256c:	af02      	add	r7, sp, #8
 800256e:	4603      	mov	r3, r0
 8002570:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd & 0xf0);
 8002572:	79fb      	ldrb	r3, [r7, #7]
 8002574:	f023 030f 	bic.w	r3, r3, #15
 8002578:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd << 4) & 0xf0);
 800257a:	79fb      	ldrb	r3, [r7, #7]
 800257c:	011b      	lsls	r3, r3, #4
 800257e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0C;  //en=1, rs=0
 8002580:	7bfb      	ldrb	r3, [r7, #15]
 8002582:	f043 030c 	orr.w	r3, r3, #12
 8002586:	b2db      	uxtb	r3, r3
 8002588:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x08;  //en=0, rs=0
 800258a:	7bfb      	ldrb	r3, [r7, #15]
 800258c:	f043 0308 	orr.w	r3, r3, #8
 8002590:	b2db      	uxtb	r3, r3
 8002592:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0C;  //en=1, rs=0
 8002594:	7bbb      	ldrb	r3, [r7, #14]
 8002596:	f043 030c 	orr.w	r3, r3, #12
 800259a:	b2db      	uxtb	r3, r3
 800259c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x08;  //en=0, rs=0
 800259e:	7bbb      	ldrb	r3, [r7, #14]
 80025a0:	f043 0308 	orr.w	r3, r3, #8
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c2, SLAVE_ADDRESS_LCD, (uint8_t*) data_t, 4,
 80025a8:	f107 0208 	add.w	r2, r7, #8
 80025ac:	2364      	movs	r3, #100	; 0x64
 80025ae:	9300      	str	r3, [sp, #0]
 80025b0:	2304      	movs	r3, #4
 80025b2:	214e      	movs	r1, #78	; 0x4e
 80025b4:	4803      	ldr	r0, [pc, #12]	; (80025c4 <lcd_send_cmd+0x5c>)
 80025b6:	f004 ffbd 	bl	8007534 <HAL_I2C_Master_Transmit>
			100);
}
 80025ba:	bf00      	nop
 80025bc:	3710      	adds	r7, #16
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	2000113c 	.word	0x2000113c

080025c8 <lcd_send_data>:

void lcd_send_data(char data) {
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b086      	sub	sp, #24
 80025cc:	af02      	add	r7, sp, #8
 80025ce:	4603      	mov	r3, r0
 80025d0:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data & 0xf0);
 80025d2:	79fb      	ldrb	r3, [r7, #7]
 80025d4:	f023 030f 	bic.w	r3, r3, #15
 80025d8:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xf0);
 80025da:	79fb      	ldrb	r3, [r7, #7]
 80025dc:	011b      	lsls	r3, r3, #4
 80025de:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0D;  //en=1, rs=1
 80025e0:	7bfb      	ldrb	r3, [r7, #15]
 80025e2:	f043 030d 	orr.w	r3, r3, #13
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x09;  //en=0, rs=1
 80025ea:	7bfb      	ldrb	r3, [r7, #15]
 80025ec:	f043 0309 	orr.w	r3, r3, #9
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0D;  //en=1, rs=1
 80025f4:	7bbb      	ldrb	r3, [r7, #14]
 80025f6:	f043 030d 	orr.w	r3, r3, #13
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x09;  //en=0, rs=1
 80025fe:	7bbb      	ldrb	r3, [r7, #14]
 8002600:	f043 0309 	orr.w	r3, r3, #9
 8002604:	b2db      	uxtb	r3, r3
 8002606:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c2, SLAVE_ADDRESS_LCD, (uint8_t*) data_t, 4,
 8002608:	f107 0208 	add.w	r2, r7, #8
 800260c:	2364      	movs	r3, #100	; 0x64
 800260e:	9300      	str	r3, [sp, #0]
 8002610:	2304      	movs	r3, #4
 8002612:	214e      	movs	r1, #78	; 0x4e
 8002614:	4803      	ldr	r0, [pc, #12]	; (8002624 <lcd_send_data+0x5c>)
 8002616:	f004 ff8d 	bl	8007534 <HAL_I2C_Master_Transmit>
			100);
}
 800261a:	bf00      	nop
 800261c:	3710      	adds	r7, #16
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	2000113c 	.word	0x2000113c

08002628 <lcd_clear>:

void lcd_clear(void) {
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x00);
 800262e:	2000      	movs	r0, #0
 8002630:	f7ff ff9a 	bl	8002568 <lcd_send_cmd>
	for (int i = 0; i < 100; i++) {
 8002634:	2300      	movs	r3, #0
 8002636:	607b      	str	r3, [r7, #4]
 8002638:	e005      	b.n	8002646 <lcd_clear+0x1e>
		lcd_send_data(' ');
 800263a:	2020      	movs	r0, #32
 800263c:	f7ff ffc4 	bl	80025c8 <lcd_send_data>
	for (int i = 0; i < 100; i++) {
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	3301      	adds	r3, #1
 8002644:	607b      	str	r3, [r7, #4]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2b63      	cmp	r3, #99	; 0x63
 800264a:	ddf6      	ble.n	800263a <lcd_clear+0x12>
	}
}
 800264c:	bf00      	nop
 800264e:	3708      	adds	r7, #8
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}

08002654 <lcd_init>:

void lcd_init(void) {
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8002658:	2032      	movs	r0, #50	; 0x32
 800265a:	f003 fabd 	bl	8005bd8 <HAL_Delay>
	lcd_send_cmd(0x30);
 800265e:	2030      	movs	r0, #48	; 0x30
 8002660:	f7ff ff82 	bl	8002568 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8002664:	2005      	movs	r0, #5
 8002666:	f003 fab7 	bl	8005bd8 <HAL_Delay>
	lcd_send_cmd(0x30);
 800266a:	2030      	movs	r0, #48	; 0x30
 800266c:	f7ff ff7c 	bl	8002568 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8002670:	2001      	movs	r0, #1
 8002672:	f003 fab1 	bl	8005bd8 <HAL_Delay>
	lcd_send_cmd(0x30);
 8002676:	2030      	movs	r0, #48	; 0x30
 8002678:	f7ff ff76 	bl	8002568 <lcd_send_cmd>
	HAL_Delay(10);
 800267c:	200a      	movs	r0, #10
 800267e:	f003 faab 	bl	8005bd8 <HAL_Delay>
	lcd_send_cmd(0x20);  // 4bit mode
 8002682:	2020      	movs	r0, #32
 8002684:	f7ff ff70 	bl	8002568 <lcd_send_cmd>
	HAL_Delay(10);
 8002688:	200a      	movs	r0, #10
 800268a:	f003 faa5 	bl	8005bd8 <HAL_Delay>

	// dislay initialisation
	lcd_send_cmd(0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800268e:	2028      	movs	r0, #40	; 0x28
 8002690:	f7ff ff6a 	bl	8002568 <lcd_send_cmd>
	HAL_Delay(1);
 8002694:	2001      	movs	r0, #1
 8002696:	f003 fa9f 	bl	8005bd8 <HAL_Delay>
	lcd_send_cmd(0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800269a:	2008      	movs	r0, #8
 800269c:	f7ff ff64 	bl	8002568 <lcd_send_cmd>
	HAL_Delay(1);
 80026a0:	2001      	movs	r0, #1
 80026a2:	f003 fa99 	bl	8005bd8 <HAL_Delay>
	lcd_send_cmd(0x01);  // clear display
 80026a6:	2001      	movs	r0, #1
 80026a8:	f7ff ff5e 	bl	8002568 <lcd_send_cmd>
	HAL_Delay(1);
 80026ac:	2001      	movs	r0, #1
 80026ae:	f003 fa93 	bl	8005bd8 <HAL_Delay>
	HAL_Delay(1);
 80026b2:	2001      	movs	r0, #1
 80026b4:	f003 fa90 	bl	8005bd8 <HAL_Delay>
	lcd_send_cmd(0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80026b8:	2006      	movs	r0, #6
 80026ba:	f7ff ff55 	bl	8002568 <lcd_send_cmd>
	HAL_Delay(1);
 80026be:	2001      	movs	r0, #1
 80026c0:	f003 fa8a 	bl	8005bd8 <HAL_Delay>
	lcd_send_cmd(0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80026c4:	200c      	movs	r0, #12
 80026c6:	f7ff ff4f 	bl	8002568 <lcd_send_cmd>
}
 80026ca:	bf00      	nop
 80026cc:	bd80      	pop	{r7, pc}
	...

080026d0 <introAnimation>:
#include "stdbool.h"

volatile int animationRound = 11;
bool intro = true;

void introAnimation(int i) {
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
	if (i == 10) {
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2b0a      	cmp	r3, #10
 80026dc:	d106      	bne.n	80026ec <introAnimation+0x1c>
		LCD_SetLocalization( 0x67);
 80026de:	2067      	movs	r0, #103	; 0x67
 80026e0:	f001 fbbe 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("e");
 80026e4:	48a4      	ldr	r0, [pc, #656]	; (8002978 <introAnimation+0x2a8>)
 80026e6:	f001 fbcb 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x54);
		LCD_SendWord("Level");

		createInvertedWord("2", 0x67, 1, 0x00);
	}
}
 80026ea:	e377      	b.n	8002ddc <introAnimation+0x70c>
	} else if (i == 9) {
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2b09      	cmp	r3, #9
 80026f0:	d10c      	bne.n	800270c <introAnimation+0x3c>
		LCD_SetLocalization( 0x67);
 80026f2:	2067      	movs	r0, #103	; 0x67
 80026f4:	f001 fbb4 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord(" ");
 80026f8:	48a0      	ldr	r0, [pc, #640]	; (800297c <introAnimation+0x2ac>)
 80026fa:	f001 fbc1 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x66);
 80026fe:	2066      	movs	r0, #102	; 0x66
 8002700:	f001 fbae 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("e");
 8002704:	489c      	ldr	r0, [pc, #624]	; (8002978 <introAnimation+0x2a8>)
 8002706:	f001 fbbb 	bl	8003e80 <LCD_SendWord>
}
 800270a:	e367      	b.n	8002ddc <introAnimation+0x70c>
	} else if (i == 8) {
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2b08      	cmp	r3, #8
 8002710:	d112      	bne.n	8002738 <introAnimation+0x68>
		LCD_SetLocalization( 0x54);
 8002712:	2054      	movs	r0, #84	; 0x54
 8002714:	f001 fba4 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("a");
 8002718:	4899      	ldr	r0, [pc, #612]	; (8002980 <introAnimation+0x2b0>)
 800271a:	f001 fbb1 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x66);
 800271e:	2066      	movs	r0, #102	; 0x66
 8002720:	f001 fb9e 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord(" ");
 8002724:	4895      	ldr	r0, [pc, #596]	; (800297c <introAnimation+0x2ac>)
 8002726:	f001 fbab 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x65);
 800272a:	2065      	movs	r0, #101	; 0x65
 800272c:	f001 fb98 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("e");
 8002730:	4891      	ldr	r0, [pc, #580]	; (8002978 <introAnimation+0x2a8>)
 8002732:	f001 fba5 	bl	8003e80 <LCD_SendWord>
}
 8002736:	e351      	b.n	8002ddc <introAnimation+0x70c>
	} else if (i == 7) {
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2b07      	cmp	r3, #7
 800273c:	d124      	bne.n	8002788 <introAnimation+0xb8>
		LCD_SetLocalization( 0x54);
 800273e:	2054      	movs	r0, #84	; 0x54
 8002740:	f001 fb8e 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord(" ");
 8002744:	488d      	ldr	r0, [pc, #564]	; (800297c <introAnimation+0x2ac>)
 8002746:	f001 fb9b 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x55);
 800274a:	2055      	movs	r0, #85	; 0x55
 800274c:	f001 fb88 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("a");
 8002750:	488b      	ldr	r0, [pc, #556]	; (8002980 <introAnimation+0x2b0>)
 8002752:	f001 fb95 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x14);
 8002756:	2014      	movs	r0, #20
 8002758:	f001 fb82 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("p");
 800275c:	4889      	ldr	r0, [pc, #548]	; (8002984 <introAnimation+0x2b4>)
 800275e:	f001 fb8f 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x27);
 8002762:	2027      	movs	r0, #39	; 0x27
 8002764:	f001 fb7c 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("r");
 8002768:	4887      	ldr	r0, [pc, #540]	; (8002988 <introAnimation+0x2b8>)
 800276a:	f001 fb89 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x65);
 800276e:	2065      	movs	r0, #101	; 0x65
 8002770:	f001 fb76 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord(" ");
 8002774:	4881      	ldr	r0, [pc, #516]	; (800297c <introAnimation+0x2ac>)
 8002776:	f001 fb83 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x64);
 800277a:	2064      	movs	r0, #100	; 0x64
 800277c:	f001 fb70 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("e");
 8002780:	487d      	ldr	r0, [pc, #500]	; (8002978 <introAnimation+0x2a8>)
 8002782:	f001 fb7d 	bl	8003e80 <LCD_SendWord>
}
 8002786:	e329      	b.n	8002ddc <introAnimation+0x70c>
	} else if (i == 6) {
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2b06      	cmp	r3, #6
 800278c:	d130      	bne.n	80027f0 <introAnimation+0x120>
		LCD_SetLocalization( 0x55);
 800278e:	2055      	movs	r0, #85	; 0x55
 8002790:	f001 fb66 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord(" ");
 8002794:	4879      	ldr	r0, [pc, #484]	; (800297c <introAnimation+0x2ac>)
 8002796:	f001 fb73 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x56);
 800279a:	2056      	movs	r0, #86	; 0x56
 800279c:	f001 fb60 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("a");
 80027a0:	4877      	ldr	r0, [pc, #476]	; (8002980 <introAnimation+0x2b0>)
 80027a2:	f001 fb6d 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x64);
 80027a6:	2064      	movs	r0, #100	; 0x64
 80027a8:	f001 fb5a 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord(" ");
 80027ac:	4873      	ldr	r0, [pc, #460]	; (800297c <introAnimation+0x2ac>)
 80027ae:	f001 fb67 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x63);
 80027b2:	2063      	movs	r0, #99	; 0x63
 80027b4:	f001 fb54 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("e");
 80027b8:	486f      	ldr	r0, [pc, #444]	; (8002978 <introAnimation+0x2a8>)
 80027ba:	f001 fb61 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x14);
 80027be:	2014      	movs	r0, #20
 80027c0:	f001 fb4e 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord(" ");
 80027c4:	486d      	ldr	r0, [pc, #436]	; (800297c <introAnimation+0x2ac>)
 80027c6:	f001 fb5b 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x27);
 80027ca:	2027      	movs	r0, #39	; 0x27
 80027cc:	f001 fb48 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord(" ");
 80027d0:	486a      	ldr	r0, [pc, #424]	; (800297c <introAnimation+0x2ac>)
 80027d2:	f001 fb55 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x15);
 80027d6:	2015      	movs	r0, #21
 80027d8:	f001 fb42 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("p");
 80027dc:	4869      	ldr	r0, [pc, #420]	; (8002984 <introAnimation+0x2b4>)
 80027de:	f001 fb4f 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x26);
 80027e2:	2026      	movs	r0, #38	; 0x26
 80027e4:	f001 fb3c 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("r");
 80027e8:	4867      	ldr	r0, [pc, #412]	; (8002988 <introAnimation+0x2b8>)
 80027ea:	f001 fb49 	bl	8003e80 <LCD_SendWord>
}
 80027ee:	e2f5      	b.n	8002ddc <introAnimation+0x70c>
	} else if (i == 5) {
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2b05      	cmp	r3, #5
 80027f4:	d148      	bne.n	8002888 <introAnimation+0x1b8>
		LCD_SetLocalization( 0x56);
 80027f6:	2056      	movs	r0, #86	; 0x56
 80027f8:	f001 fb32 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord(" ");
 80027fc:	485f      	ldr	r0, [pc, #380]	; (800297c <introAnimation+0x2ac>)
 80027fe:	f001 fb3f 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x57);
 8002802:	2057      	movs	r0, #87	; 0x57
 8002804:	f001 fb2c 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("a");
 8002808:	485d      	ldr	r0, [pc, #372]	; (8002980 <introAnimation+0x2b0>)
 800280a:	f001 fb39 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x63);
 800280e:	2063      	movs	r0, #99	; 0x63
 8002810:	f001 fb26 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord(" ");
 8002814:	4859      	ldr	r0, [pc, #356]	; (800297c <introAnimation+0x2ac>)
 8002816:	f001 fb33 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x62);
 800281a:	2062      	movs	r0, #98	; 0x62
 800281c:	f001 fb20 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("e");
 8002820:	4855      	ldr	r0, [pc, #340]	; (8002978 <introAnimation+0x2a8>)
 8002822:	f001 fb2d 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x15);
 8002826:	2015      	movs	r0, #21
 8002828:	f001 fb1a 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord(" ");
 800282c:	4853      	ldr	r0, [pc, #332]	; (800297c <introAnimation+0x2ac>)
 800282e:	f001 fb27 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x26);
 8002832:	2026      	movs	r0, #38	; 0x26
 8002834:	f001 fb14 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord(" ");
 8002838:	4850      	ldr	r0, [pc, #320]	; (800297c <introAnimation+0x2ac>)
 800283a:	f001 fb21 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x16);
 800283e:	2016      	movs	r0, #22
 8002840:	f001 fb0e 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("p");
 8002844:	484f      	ldr	r0, [pc, #316]	; (8002984 <introAnimation+0x2b4>)
 8002846:	f001 fb1b 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x25);
 800284a:	2025      	movs	r0, #37	; 0x25
 800284c:	f001 fb08 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("r");
 8002850:	484d      	ldr	r0, [pc, #308]	; (8002988 <introAnimation+0x2b8>)
 8002852:	f001 fb15 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x40);
 8002856:	2040      	movs	r0, #64	; 0x40
 8002858:	f001 fb02 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("S");
 800285c:	484b      	ldr	r0, [pc, #300]	; (800298c <introAnimation+0x2bc>)
 800285e:	f001 fb0f 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x53);
 8002862:	2053      	movs	r0, #83	; 0x53
 8002864:	f001 fafc 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("s");
 8002868:	4849      	ldr	r0, [pc, #292]	; (8002990 <introAnimation+0x2c0>)
 800286a:	f001 fb09 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x5F);
 800286e:	205f      	movs	r0, #95	; 0x5f
 8002870:	f001 faf6 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("v");
 8002874:	4847      	ldr	r0, [pc, #284]	; (8002994 <introAnimation+0x2c4>)
 8002876:	f001 fb03 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x5D);
 800287a:	205d      	movs	r0, #93	; 0x5d
 800287c:	f001 faf0 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("I");
 8002880:	4845      	ldr	r0, [pc, #276]	; (8002998 <introAnimation+0x2c8>)
 8002882:	f001 fafd 	bl	8003e80 <LCD_SendWord>
}
 8002886:	e2a9      	b.n	8002ddc <introAnimation+0x70c>
	} else if (i == 4) {
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2b04      	cmp	r3, #4
 800288c:	f040 808c 	bne.w	80029a8 <introAnimation+0x2d8>
		LCD_SetLocalization( 0x57);
 8002890:	2057      	movs	r0, #87	; 0x57
 8002892:	f001 fae5 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord(" ");
 8002896:	4839      	ldr	r0, [pc, #228]	; (800297c <introAnimation+0x2ac>)
 8002898:	f001 faf2 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x58);
 800289c:	2058      	movs	r0, #88	; 0x58
 800289e:	f001 fadf 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("a");
 80028a2:	4837      	ldr	r0, [pc, #220]	; (8002980 <introAnimation+0x2b0>)
 80028a4:	f001 faec 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x62);
 80028a8:	2062      	movs	r0, #98	; 0x62
 80028aa:	f001 fad9 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord(" ");
 80028ae:	4833      	ldr	r0, [pc, #204]	; (800297c <introAnimation+0x2ac>)
 80028b0:	f001 fae6 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x22);
 80028b4:	2022      	movs	r0, #34	; 0x22
 80028b6:	f001 fad3 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("e");
 80028ba:	482f      	ldr	r0, [pc, #188]	; (8002978 <introAnimation+0x2a8>)
 80028bc:	f001 fae0 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x16);
 80028c0:	2016      	movs	r0, #22
 80028c2:	f001 facd 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord(" ");
 80028c6:	482d      	ldr	r0, [pc, #180]	; (800297c <introAnimation+0x2ac>)
 80028c8:	f001 fada 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x25);
 80028cc:	2025      	movs	r0, #37	; 0x25
 80028ce:	f001 fac7 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord(" ");
 80028d2:	482a      	ldr	r0, [pc, #168]	; (800297c <introAnimation+0x2ac>)
 80028d4:	f001 fad4 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x17);
 80028d8:	2017      	movs	r0, #23
 80028da:	f001 fac1 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("p");
 80028de:	4829      	ldr	r0, [pc, #164]	; (8002984 <introAnimation+0x2b4>)
 80028e0:	f001 face 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x24);
 80028e4:	2024      	movs	r0, #36	; 0x24
 80028e6:	f001 fabb 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("r");
 80028ea:	4827      	ldr	r0, [pc, #156]	; (8002988 <introAnimation+0x2b8>)
 80028ec:	f001 fac8 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x40);
 80028f0:	2040      	movs	r0, #64	; 0x40
 80028f2:	f001 fab5 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord(" ");
 80028f6:	4821      	ldr	r0, [pc, #132]	; (800297c <introAnimation+0x2ac>)
 80028f8:	f001 fac2 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x53);
 80028fc:	2053      	movs	r0, #83	; 0x53
 80028fe:	f001 faaf 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord(" ");
 8002902:	481e      	ldr	r0, [pc, #120]	; (800297c <introAnimation+0x2ac>)
 8002904:	f001 fabc 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x41);
 8002908:	2041      	movs	r0, #65	; 0x41
 800290a:	f001 faa9 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("S");
 800290e:	481f      	ldr	r0, [pc, #124]	; (800298c <introAnimation+0x2bc>)
 8002910:	f001 fab6 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x52);
 8002914:	2052      	movs	r0, #82	; 0x52
 8002916:	f001 faa3 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("s");
 800291a:	481d      	ldr	r0, [pc, #116]	; (8002990 <introAnimation+0x2c0>)
 800291c:	f001 fab0 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x5A);
 8002920:	205a      	movs	r0, #90	; 0x5a
 8002922:	f001 fa9d 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("c");
 8002926:	481d      	ldr	r0, [pc, #116]	; (800299c <introAnimation+0x2cc>)
 8002928:	f001 faaa 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x61);
 800292c:	2061      	movs	r0, #97	; 0x61
 800292e:	f001 fa97 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("d");
 8002932:	481b      	ldr	r0, [pc, #108]	; (80029a0 <introAnimation+0x2d0>)
 8002934:	f001 faa4 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x5F);
 8002938:	205f      	movs	r0, #95	; 0x5f
 800293a:	f001 fa91 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord(" ");
 800293e:	480f      	ldr	r0, [pc, #60]	; (800297c <introAnimation+0x2ac>)
 8002940:	f001 fa9e 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x1F);
 8002944:	201f      	movs	r0, #31
 8002946:	f001 fa8b 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("v");
 800294a:	4812      	ldr	r0, [pc, #72]	; (8002994 <introAnimation+0x2c4>)
 800294c:	f001 fa98 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x5D);
 8002950:	205d      	movs	r0, #93	; 0x5d
 8002952:	f001 fa85 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord(" ");
 8002956:	4809      	ldr	r0, [pc, #36]	; (800297c <introAnimation+0x2ac>)
 8002958:	f001 fa92 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x1D);
 800295c:	201d      	movs	r0, #29
 800295e:	f001 fa7f 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("I");
 8002962:	480d      	ldr	r0, [pc, #52]	; (8002998 <introAnimation+0x2c8>)
 8002964:	f001 fa8c 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x5E);
 8002968:	205e      	movs	r0, #94	; 0x5e
 800296a:	f001 fa79 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("n");
 800296e:	480d      	ldr	r0, [pc, #52]	; (80029a4 <introAnimation+0x2d4>)
 8002970:	f001 fa86 	bl	8003e80 <LCD_SendWord>
}
 8002974:	e232      	b.n	8002ddc <introAnimation+0x70c>
 8002976:	bf00      	nop
 8002978:	0800acd4 	.word	0x0800acd4
 800297c:	0800acd8 	.word	0x0800acd8
 8002980:	0800acdc 	.word	0x0800acdc
 8002984:	0800ace0 	.word	0x0800ace0
 8002988:	0800ace4 	.word	0x0800ace4
 800298c:	0800ace8 	.word	0x0800ace8
 8002990:	0800acec 	.word	0x0800acec
 8002994:	0800acf0 	.word	0x0800acf0
 8002998:	0800acf4 	.word	0x0800acf4
 800299c:	0800acf8 	.word	0x0800acf8
 80029a0:	0800acfc 	.word	0x0800acfc
 80029a4:	0800ad00 	.word	0x0800ad00
	} else if (i == 3) {
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2b03      	cmp	r3, #3
 80029ac:	f040 8091 	bne.w	8002ad2 <introAnimation+0x402>
		LCD_SetLocalization( 0x58);
 80029b0:	2058      	movs	r0, #88	; 0x58
 80029b2:	f001 fa55 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord(" ");
 80029b6:	48d0      	ldr	r0, [pc, #832]	; (8002cf8 <introAnimation+0x628>)
 80029b8:	f001 fa62 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x59);
 80029bc:	2059      	movs	r0, #89	; 0x59
 80029be:	f001 fa4f 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("a");
 80029c2:	48ce      	ldr	r0, [pc, #824]	; (8002cfc <introAnimation+0x62c>)
 80029c4:	f001 fa5c 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x22);
 80029c8:	2022      	movs	r0, #34	; 0x22
 80029ca:	f001 fa49 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord(" ");
 80029ce:	48ca      	ldr	r0, [pc, #808]	; (8002cf8 <introAnimation+0x628>)
 80029d0:	f001 fa56 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x4E);
 80029d4:	204e      	movs	r0, #78	; 0x4e
 80029d6:	f001 fa43 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("e");
 80029da:	48c9      	ldr	r0, [pc, #804]	; (8002d00 <introAnimation+0x630>)
 80029dc:	f001 fa50 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x17);
 80029e0:	2017      	movs	r0, #23
 80029e2:	f001 fa3d 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord(" ");
 80029e6:	48c4      	ldr	r0, [pc, #784]	; (8002cf8 <introAnimation+0x628>)
 80029e8:	f001 fa4a 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x24);
 80029ec:	2024      	movs	r0, #36	; 0x24
 80029ee:	f001 fa37 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord(" ");
 80029f2:	48c1      	ldr	r0, [pc, #772]	; (8002cf8 <introAnimation+0x628>)
 80029f4:	f001 fa44 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x18);
 80029f8:	2018      	movs	r0, #24
 80029fa:	f001 fa31 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("p");
 80029fe:	48c1      	ldr	r0, [pc, #772]	; (8002d04 <introAnimation+0x634>)
 8002a00:	f001 fa3e 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x23);
 8002a04:	2023      	movs	r0, #35	; 0x23
 8002a06:	f001 fa2b 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("r");
 8002a0a:	48bf      	ldr	r0, [pc, #764]	; (8002d08 <introAnimation+0x638>)
 8002a0c:	f001 fa38 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x41);
 8002a10:	2041      	movs	r0, #65	; 0x41
 8002a12:	f001 fa25 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord(" ");
 8002a16:	48b8      	ldr	r0, [pc, #736]	; (8002cf8 <introAnimation+0x628>)
 8002a18:	f001 fa32 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x52);
 8002a1c:	2052      	movs	r0, #82	; 0x52
 8002a1e:	f001 fa1f 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord(" ");
 8002a22:	48b5      	ldr	r0, [pc, #724]	; (8002cf8 <introAnimation+0x628>)
 8002a24:	f001 fa2c 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x42);
 8002a28:	2042      	movs	r0, #66	; 0x42
 8002a2a:	f001 fa19 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("S");
 8002a2e:	48b7      	ldr	r0, [pc, #732]	; (8002d0c <introAnimation+0x63c>)
 8002a30:	f001 fa26 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x51);
 8002a34:	2051      	movs	r0, #81	; 0x51
 8002a36:	f001 fa13 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("s");
 8002a3a:	48b5      	ldr	r0, [pc, #724]	; (8002d10 <introAnimation+0x640>)
 8002a3c:	f001 fa20 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x5A);
 8002a40:	205a      	movs	r0, #90	; 0x5a
 8002a42:	f001 fa0d 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord(" ");
 8002a46:	48ac      	ldr	r0, [pc, #688]	; (8002cf8 <introAnimation+0x628>)
 8002a48:	f001 fa1a 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x61);
 8002a4c:	2061      	movs	r0, #97	; 0x61
 8002a4e:	f001 fa07 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord(" ");
 8002a52:	48a9      	ldr	r0, [pc, #676]	; (8002cf8 <introAnimation+0x628>)
 8002a54:	f001 fa14 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x1A);
 8002a58:	201a      	movs	r0, #26
 8002a5a:	f001 fa01 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("c");
 8002a5e:	48ad      	ldr	r0, [pc, #692]	; (8002d14 <introAnimation+0x644>)
 8002a60:	f001 fa0e 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x21);
 8002a64:	2021      	movs	r0, #33	; 0x21
 8002a66:	f001 f9fb 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("d");
 8002a6a:	48ab      	ldr	r0, [pc, #684]	; (8002d18 <introAnimation+0x648>)
 8002a6c:	f001 fa08 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x5B);
 8002a70:	205b      	movs	r0, #91	; 0x5b
 8002a72:	f001 f9f5 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("e");
 8002a76:	48a2      	ldr	r0, [pc, #648]	; (8002d00 <introAnimation+0x630>)
 8002a78:	f001 fa02 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x60);
 8002a7c:	2060      	movs	r0, #96	; 0x60
 8002a7e:	f001 f9ef 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("a");
 8002a82:	489e      	ldr	r0, [pc, #632]	; (8002cfc <introAnimation+0x62c>)
 8002a84:	f001 f9fc 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x1F);
 8002a88:	201f      	movs	r0, #31
 8002a8a:	f001 f9e9 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord(" ");
 8002a8e:	489a      	ldr	r0, [pc, #616]	; (8002cf8 <introAnimation+0x628>)
 8002a90:	f001 f9f6 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x4B);
 8002a94:	204b      	movs	r0, #75	; 0x4b
 8002a96:	f001 f9e3 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("v");
 8002a9a:	48a0      	ldr	r0, [pc, #640]	; (8002d1c <introAnimation+0x64c>)
 8002a9c:	f001 f9f0 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x5E);
 8002aa0:	205e      	movs	r0, #94	; 0x5e
 8002aa2:	f001 f9dd 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord(" ");
 8002aa6:	4894      	ldr	r0, [pc, #592]	; (8002cf8 <introAnimation+0x628>)
 8002aa8:	f001 f9ea 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x1D);
 8002aac:	201d      	movs	r0, #29
 8002aae:	f001 f9d7 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord(" ");
 8002ab2:	4891      	ldr	r0, [pc, #580]	; (8002cf8 <introAnimation+0x628>)
 8002ab4:	f001 f9e4 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x49);
 8002ab8:	2049      	movs	r0, #73	; 0x49
 8002aba:	f001 f9d1 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("I");
 8002abe:	4898      	ldr	r0, [pc, #608]	; (8002d20 <introAnimation+0x650>)
 8002ac0:	f001 f9de 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x1E);
 8002ac4:	201e      	movs	r0, #30
 8002ac6:	f001 f9cb 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("n");
 8002aca:	4896      	ldr	r0, [pc, #600]	; (8002d24 <introAnimation+0x654>)
 8002acc:	f001 f9d8 	bl	8003e80 <LCD_SendWord>
}
 8002ad0:	e184      	b.n	8002ddc <introAnimation+0x70c>
	} else if (i == 2) {
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	f040 809d 	bne.w	8002c14 <introAnimation+0x544>
		LCD_SetLocalization( 0x59);
 8002ada:	2059      	movs	r0, #89	; 0x59
 8002adc:	f001 f9c0 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord(" ");
 8002ae0:	4885      	ldr	r0, [pc, #532]	; (8002cf8 <introAnimation+0x628>)
 8002ae2:	f001 f9cd 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x19);
 8002ae6:	2019      	movs	r0, #25
 8002ae8:	f001 f9ba 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("a");
 8002aec:	4883      	ldr	r0, [pc, #524]	; (8002cfc <introAnimation+0x62c>)
 8002aee:	f001 f9c7 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x4E);
 8002af2:	204e      	movs	r0, #78	; 0x4e
 8002af4:	f001 f9b4 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord(" ");
 8002af8:	487f      	ldr	r0, [pc, #508]	; (8002cf8 <introAnimation+0x628>)
 8002afa:	f001 f9c1 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x0E);
 8002afe:	200e      	movs	r0, #14
 8002b00:	f001 f9ae 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("e");
 8002b04:	487e      	ldr	r0, [pc, #504]	; (8002d00 <introAnimation+0x630>)
 8002b06:	f001 f9bb 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x18);
 8002b0a:	2018      	movs	r0, #24
 8002b0c:	f001 f9a8 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord(" ");
 8002b10:	4879      	ldr	r0, [pc, #484]	; (8002cf8 <introAnimation+0x628>)
 8002b12:	f001 f9b5 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x23);
 8002b16:	2023      	movs	r0, #35	; 0x23
 8002b18:	f001 f9a2 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord(" ");
 8002b1c:	4876      	ldr	r0, [pc, #472]	; (8002cf8 <introAnimation+0x628>)
 8002b1e:	f001 f9af 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x44);
 8002b22:	2044      	movs	r0, #68	; 0x44
 8002b24:	f001 f99c 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("p");
 8002b28:	4876      	ldr	r0, [pc, #472]	; (8002d04 <introAnimation+0x634>)
 8002b2a:	f001 f9a9 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x4F);
 8002b2e:	204f      	movs	r0, #79	; 0x4f
 8002b30:	f001 f996 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("r");
 8002b34:	4874      	ldr	r0, [pc, #464]	; (8002d08 <introAnimation+0x638>)
 8002b36:	f001 f9a3 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x42);
 8002b3a:	2042      	movs	r0, #66	; 0x42
 8002b3c:	f001 f990 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord(" ");
 8002b40:	486d      	ldr	r0, [pc, #436]	; (8002cf8 <introAnimation+0x628>)
 8002b42:	f001 f99d 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x51);
 8002b46:	2051      	movs	r0, #81	; 0x51
 8002b48:	f001 f98a 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord(" ");
 8002b4c:	486a      	ldr	r0, [pc, #424]	; (8002cf8 <introAnimation+0x628>)
 8002b4e:	f001 f997 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x43);
 8002b52:	2043      	movs	r0, #67	; 0x43
 8002b54:	f001 f984 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("S");
 8002b58:	486c      	ldr	r0, [pc, #432]	; (8002d0c <introAnimation+0x63c>)
 8002b5a:	f001 f991 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x50);
 8002b5e:	2050      	movs	r0, #80	; 0x50
 8002b60:	f001 f97e 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("s");
 8002b64:	486a      	ldr	r0, [pc, #424]	; (8002d10 <introAnimation+0x640>)
 8002b66:	f001 f98b 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x1A);
 8002b6a:	201a      	movs	r0, #26
 8002b6c:	f001 f978 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord(" ");
 8002b70:	4861      	ldr	r0, [pc, #388]	; (8002cf8 <introAnimation+0x628>)
 8002b72:	f001 f985 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x21);
 8002b76:	2021      	movs	r0, #33	; 0x21
 8002b78:	f001 f972 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord(" ");
 8002b7c:	485e      	ldr	r0, [pc, #376]	; (8002cf8 <introAnimation+0x628>)
 8002b7e:	f001 f97f 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x46);
 8002b82:	2046      	movs	r0, #70	; 0x46
 8002b84:	f001 f96c 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("c");
 8002b88:	4862      	ldr	r0, [pc, #392]	; (8002d14 <introAnimation+0x644>)
 8002b8a:	f001 f979 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x4D);
 8002b8e:	204d      	movs	r0, #77	; 0x4d
 8002b90:	f001 f966 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("d");
 8002b94:	4860      	ldr	r0, [pc, #384]	; (8002d18 <introAnimation+0x648>)
 8002b96:	f001 f973 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x5B);
 8002b9a:	205b      	movs	r0, #91	; 0x5b
 8002b9c:	f001 f960 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord(" ");
 8002ba0:	4855      	ldr	r0, [pc, #340]	; (8002cf8 <introAnimation+0x628>)
 8002ba2:	f001 f96d 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x60);
 8002ba6:	2060      	movs	r0, #96	; 0x60
 8002ba8:	f001 f95a 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord(" ");
 8002bac:	4852      	ldr	r0, [pc, #328]	; (8002cf8 <introAnimation+0x628>)
 8002bae:	f001 f967 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x1B);
 8002bb2:	201b      	movs	r0, #27
 8002bb4:	f001 f954 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("e");
 8002bb8:	4851      	ldr	r0, [pc, #324]	; (8002d00 <introAnimation+0x630>)
 8002bba:	f001 f961 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x20);
 8002bbe:	2020      	movs	r0, #32
 8002bc0:	f001 f94e 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("a");
 8002bc4:	484d      	ldr	r0, [pc, #308]	; (8002cfc <introAnimation+0x62c>)
 8002bc6:	f001 f95b 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x4B);
 8002bca:	204b      	movs	r0, #75	; 0x4b
 8002bcc:	f001 f948 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord(" ");
 8002bd0:	4849      	ldr	r0, [pc, #292]	; (8002cf8 <introAnimation+0x628>)
 8002bd2:	f001 f955 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x0B);
 8002bd6:	200b      	movs	r0, #11
 8002bd8:	f001 f942 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("v");
 8002bdc:	484f      	ldr	r0, [pc, #316]	; (8002d1c <introAnimation+0x64c>)
 8002bde:	f001 f94f 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x1E);
 8002be2:	201e      	movs	r0, #30
 8002be4:	f001 f93c 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord(" ");
 8002be8:	4843      	ldr	r0, [pc, #268]	; (8002cf8 <introAnimation+0x628>)
 8002bea:	f001 f949 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x49);
 8002bee:	2049      	movs	r0, #73	; 0x49
 8002bf0:	f001 f936 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord(" ");
 8002bf4:	4840      	ldr	r0, [pc, #256]	; (8002cf8 <introAnimation+0x628>)
 8002bf6:	f001 f943 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x09);
 8002bfa:	2009      	movs	r0, #9
 8002bfc:	f001 f930 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("I");
 8002c00:	4847      	ldr	r0, [pc, #284]	; (8002d20 <introAnimation+0x650>)
 8002c02:	f001 f93d 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x4A);
 8002c06:	204a      	movs	r0, #74	; 0x4a
 8002c08:	f001 f92a 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("n");
 8002c0c:	4845      	ldr	r0, [pc, #276]	; (8002d24 <introAnimation+0x654>)
 8002c0e:	f001 f937 	bl	8003e80 <LCD_SendWord>
}
 8002c12:	e0e3      	b.n	8002ddc <introAnimation+0x70c>
	} else if (i == 1) {
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	f040 8086 	bne.w	8002d28 <introAnimation+0x658>
		LCD_SetLocalization( 0x19);
 8002c1c:	2019      	movs	r0, #25
 8002c1e:	f001 f91f 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord(" ");
 8002c22:	4835      	ldr	r0, [pc, #212]	; (8002cf8 <introAnimation+0x628>)
 8002c24:	f001 f92c 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x45);
 8002c28:	2045      	movs	r0, #69	; 0x45
 8002c2a:	f001 f919 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("a");
 8002c2e:	4833      	ldr	r0, [pc, #204]	; (8002cfc <introAnimation+0x62c>)
 8002c30:	f001 f926 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x44);
 8002c34:	2044      	movs	r0, #68	; 0x44
 8002c36:	f001 f913 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord(" ");
 8002c3a:	482f      	ldr	r0, [pc, #188]	; (8002cf8 <introAnimation+0x628>)
 8002c3c:	f001 f920 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x4F);
 8002c40:	204f      	movs	r0, #79	; 0x4f
 8002c42:	f001 f90d 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord(" ");
 8002c46:	482c      	ldr	r0, [pc, #176]	; (8002cf8 <introAnimation+0x628>)
 8002c48:	f001 f91a 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x43);
 8002c4c:	2043      	movs	r0, #67	; 0x43
 8002c4e:	f001 f907 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord(" ");
 8002c52:	4829      	ldr	r0, [pc, #164]	; (8002cf8 <introAnimation+0x628>)
 8002c54:	f001 f914 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x50);
 8002c58:	2050      	movs	r0, #80	; 0x50
 8002c5a:	f001 f901 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord(" ");
 8002c5e:	4826      	ldr	r0, [pc, #152]	; (8002cf8 <introAnimation+0x628>)
 8002c60:	f001 f90e 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x03);
 8002c64:	2003      	movs	r0, #3
 8002c66:	f001 f8fb 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("S");
 8002c6a:	4828      	ldr	r0, [pc, #160]	; (8002d0c <introAnimation+0x63c>)
 8002c6c:	f001 f908 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x10);
 8002c70:	2010      	movs	r0, #16
 8002c72:	f001 f8f5 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("s");
 8002c76:	4826      	ldr	r0, [pc, #152]	; (8002d10 <introAnimation+0x640>)
 8002c78:	f001 f902 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x46);
 8002c7c:	2046      	movs	r0, #70	; 0x46
 8002c7e:	f001 f8ef 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord(" ");
 8002c82:	481d      	ldr	r0, [pc, #116]	; (8002cf8 <introAnimation+0x628>)
 8002c84:	f001 f8fc 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x4D);
 8002c88:	204d      	movs	r0, #77	; 0x4d
 8002c8a:	f001 f8e9 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord(" ");
 8002c8e:	481a      	ldr	r0, [pc, #104]	; (8002cf8 <introAnimation+0x628>)
 8002c90:	f001 f8f6 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x06);
 8002c94:	2006      	movs	r0, #6
 8002c96:	f001 f8e3 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("c");
 8002c9a:	481e      	ldr	r0, [pc, #120]	; (8002d14 <introAnimation+0x644>)
 8002c9c:	f001 f8f0 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x0D);
 8002ca0:	200d      	movs	r0, #13
 8002ca2:	f001 f8dd 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("d");
 8002ca6:	481c      	ldr	r0, [pc, #112]	; (8002d18 <introAnimation+0x648>)
 8002ca8:	f001 f8ea 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x1B);
 8002cac:	201b      	movs	r0, #27
 8002cae:	f001 f8d7 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord(" ");
 8002cb2:	4811      	ldr	r0, [pc, #68]	; (8002cf8 <introAnimation+0x628>)
 8002cb4:	f001 f8e4 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x20);
 8002cb8:	2020      	movs	r0, #32
 8002cba:	f001 f8d1 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord(" ");
 8002cbe:	480e      	ldr	r0, [pc, #56]	; (8002cf8 <introAnimation+0x628>)
 8002cc0:	f001 f8de 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x47);
 8002cc4:	2047      	movs	r0, #71	; 0x47
 8002cc6:	f001 f8cb 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("e");
 8002cca:	480d      	ldr	r0, [pc, #52]	; (8002d00 <introAnimation+0x630>)
 8002ccc:	f001 f8d8 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x4C);
 8002cd0:	204c      	movs	r0, #76	; 0x4c
 8002cd2:	f001 f8c5 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("a");
 8002cd6:	4809      	ldr	r0, [pc, #36]	; (8002cfc <introAnimation+0x62c>)
 8002cd8:	f001 f8d2 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x4A);
 8002cdc:	204a      	movs	r0, #74	; 0x4a
 8002cde:	f001 f8bf 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord(" ");
 8002ce2:	4805      	ldr	r0, [pc, #20]	; (8002cf8 <introAnimation+0x628>)
 8002ce4:	f001 f8cc 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x0A);
 8002ce8:	200a      	movs	r0, #10
 8002cea:	f001 f8b9 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("n");
 8002cee:	480d      	ldr	r0, [pc, #52]	; (8002d24 <introAnimation+0x654>)
 8002cf0:	f001 f8c6 	bl	8003e80 <LCD_SendWord>
}
 8002cf4:	e072      	b.n	8002ddc <introAnimation+0x70c>
 8002cf6:	bf00      	nop
 8002cf8:	0800acd8 	.word	0x0800acd8
 8002cfc:	0800acdc 	.word	0x0800acdc
 8002d00:	0800acd4 	.word	0x0800acd4
 8002d04:	0800ace0 	.word	0x0800ace0
 8002d08:	0800ace4 	.word	0x0800ace4
 8002d0c:	0800ace8 	.word	0x0800ace8
 8002d10:	0800acec 	.word	0x0800acec
 8002d14:	0800acf8 	.word	0x0800acf8
 8002d18:	0800acfc 	.word	0x0800acfc
 8002d1c:	0800acf0 	.word	0x0800acf0
 8002d20:	0800acf4 	.word	0x0800acf4
 8002d24:	0800ad00 	.word	0x0800ad00
	} else if (i == 0) {
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d130      	bne.n	8002d90 <introAnimation+0x6c0>
		LCD_SetLocalization( 0x45);
 8002d2e:	2045      	movs	r0, #69	; 0x45
 8002d30:	f001 f896 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord(" ");
 8002d34:	482b      	ldr	r0, [pc, #172]	; (8002de4 <introAnimation+0x714>)
 8002d36:	f001 f8a3 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x05);
 8002d3a:	2005      	movs	r0, #5
 8002d3c:	f001 f890 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("a");
 8002d40:	4829      	ldr	r0, [pc, #164]	; (8002de8 <introAnimation+0x718>)
 8002d42:	f001 f89d 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x04);
 8002d46:	2004      	movs	r0, #4
 8002d48:	f001 f88a 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("p");
 8002d4c:	4827      	ldr	r0, [pc, #156]	; (8002dec <introAnimation+0x71c>)
 8002d4e:	f001 f897 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x0F);
 8002d52:	200f      	movs	r0, #15
 8002d54:	f001 f884 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("r");
 8002d58:	4825      	ldr	r0, [pc, #148]	; (8002df0 <introAnimation+0x720>)
 8002d5a:	f001 f891 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x47);
 8002d5e:	2047      	movs	r0, #71	; 0x47
 8002d60:	f001 f87e 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord(" ");
 8002d64:	481f      	ldr	r0, [pc, #124]	; (8002de4 <introAnimation+0x714>)
 8002d66:	f001 f88b 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x4C);
 8002d6a:	204c      	movs	r0, #76	; 0x4c
 8002d6c:	f001 f878 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord(" ");
 8002d70:	481c      	ldr	r0, [pc, #112]	; (8002de4 <introAnimation+0x714>)
 8002d72:	f001 f885 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x07);
 8002d76:	2007      	movs	r0, #7
 8002d78:	f001 f872 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("e");
 8002d7c:	481d      	ldr	r0, [pc, #116]	; (8002df4 <introAnimation+0x724>)
 8002d7e:	f001 f87f 	bl	8003e80 <LCD_SendWord>
		LCD_SetLocalization( 0x0C);
 8002d82:	200c      	movs	r0, #12
 8002d84:	f001 f86c 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("a");
 8002d88:	4817      	ldr	r0, [pc, #92]	; (8002de8 <introAnimation+0x718>)
 8002d8a:	f001 f879 	bl	8003e80 <LCD_SendWord>
}
 8002d8e:	e025      	b.n	8002ddc <introAnimation+0x70c>
	} else if (i == -4) {
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f113 0f04 	cmn.w	r3, #4
 8002d96:	d106      	bne.n	8002da6 <introAnimation+0x6d6>
		LCD_SetLocalization( 0x48);
 8002d98:	2048      	movs	r0, #72	; 0x48
 8002d9a:	f001 f861 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("MENU");
 8002d9e:	4816      	ldr	r0, [pc, #88]	; (8002df8 <introAnimation+0x728>)
 8002da0:	f001 f86e 	bl	8003e80 <LCD_SendWord>
}
 8002da4:	e01a      	b.n	8002ddc <introAnimation+0x70c>
	} else if (i == -7) {
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f113 0f07 	cmn.w	r3, #7
 8002dac:	d106      	bne.n	8002dbc <introAnimation+0x6ec>
		LCD_SetLocalization( 0x14);
 8002dae:	2014      	movs	r0, #20
 8002db0:	f001 f856 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("Start");
 8002db4:	4811      	ldr	r0, [pc, #68]	; (8002dfc <introAnimation+0x72c>)
 8002db6:	f001 f863 	bl	8003e80 <LCD_SendWord>
}
 8002dba:	e00f      	b.n	8002ddc <introAnimation+0x70c>
	} else if (i == -10) {
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f113 0f0a 	cmn.w	r3, #10
 8002dc2:	d10b      	bne.n	8002ddc <introAnimation+0x70c>
		LCD_SetLocalization( 0x54);
 8002dc4:	2054      	movs	r0, #84	; 0x54
 8002dc6:	f001 f84b 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("Level");
 8002dca:	480d      	ldr	r0, [pc, #52]	; (8002e00 <introAnimation+0x730>)
 8002dcc:	f001 f858 	bl	8003e80 <LCD_SendWord>
		createInvertedWord("2", 0x67, 1, 0x00);
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	2167      	movs	r1, #103	; 0x67
 8002dd6:	480b      	ldr	r0, [pc, #44]	; (8002e04 <introAnimation+0x734>)
 8002dd8:	f000 f96c 	bl	80030b4 <createInvertedWord>
}
 8002ddc:	bf00      	nop
 8002dde:	3708      	adds	r7, #8
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	0800acd8 	.word	0x0800acd8
 8002de8:	0800acdc 	.word	0x0800acdc
 8002dec:	0800ace0 	.word	0x0800ace0
 8002df0:	0800ace4 	.word	0x0800ace4
 8002df4:	0800acd4 	.word	0x0800acd4
 8002df8:	0800ad04 	.word	0x0800ad04
 8002dfc:	0800ad0c 	.word	0x0800ad0c
 8002e00:	0800ad14 	.word	0x0800ad14
 8002e04:	0800ad1c 	.word	0x0800ad1c

08002e08 <UP>:
#include "joystick.h"
#include "main.h"

volatile int *direction=0;
extern bool blockPress=true,blockUp=true, blockDown=true,blockRight=true,blockLeft=true;
bool UP() {
 8002e08:	b480      	push	{r7}
 8002e0a:	af00      	add	r7, sp, #0
	if (direction == 4)
 8002e0c:	4b05      	ldr	r3, [pc, #20]	; (8002e24 <UP+0x1c>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2b04      	cmp	r3, #4
 8002e12:	d101      	bne.n	8002e18 <UP+0x10>
		return true;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e000      	b.n	8002e1a <UP+0x12>
	else
		return false;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr
 8002e24:	200003e0 	.word	0x200003e0

08002e28 <DOWN>:
bool DOWN() {
 8002e28:	b480      	push	{r7}
 8002e2a:	af00      	add	r7, sp, #0
	if (direction == 2)
 8002e2c:	4b05      	ldr	r3, [pc, #20]	; (8002e44 <DOWN+0x1c>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d101      	bne.n	8002e38 <DOWN+0x10>
		return true;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e000      	b.n	8002e3a <DOWN+0x12>
	else
		return false;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr
 8002e44:	200003e0 	.word	0x200003e0

08002e48 <RIGHT>:
bool RIGHT() {
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
	if (direction == 3)
 8002e4c:	4b05      	ldr	r3, [pc, #20]	; (8002e64 <RIGHT+0x1c>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2b03      	cmp	r3, #3
 8002e52:	d101      	bne.n	8002e58 <RIGHT+0x10>
		return true;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e000      	b.n	8002e5a <RIGHT+0x12>
	else
		return false;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr
 8002e64:	200003e0 	.word	0x200003e0

08002e68 <LEFT>:
bool LEFT() {
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0
	if (direction == 1)
 8002e6c:	4b05      	ldr	r3, [pc, #20]	; (8002e84 <LEFT+0x1c>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d101      	bne.n	8002e78 <LEFT+0x10>
		return true;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e000      	b.n	8002e7a <LEFT+0x12>
	else
		return false;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr
 8002e84:	200003e0 	.word	0x200003e0

08002e88 <blockJoystick>:
void blockJoystick()
{
 8002e88:	b480      	push	{r7}
 8002e8a:	af00      	add	r7, sp, #0
	blockUp=true;
 8002e8c:	4b09      	ldr	r3, [pc, #36]	; (8002eb4 <blockJoystick+0x2c>)
 8002e8e:	2201      	movs	r2, #1
 8002e90:	701a      	strb	r2, [r3, #0]
	blockDown=true;
 8002e92:	4b09      	ldr	r3, [pc, #36]	; (8002eb8 <blockJoystick+0x30>)
 8002e94:	2201      	movs	r2, #1
 8002e96:	701a      	strb	r2, [r3, #0]
	blockRight=true;
 8002e98:	4b08      	ldr	r3, [pc, #32]	; (8002ebc <blockJoystick+0x34>)
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	701a      	strb	r2, [r3, #0]
	blockLeft=true;
 8002e9e:	4b08      	ldr	r3, [pc, #32]	; (8002ec0 <blockJoystick+0x38>)
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	701a      	strb	r2, [r3, #0]
	blockPress=true;
 8002ea4:	4b07      	ldr	r3, [pc, #28]	; (8002ec4 <blockJoystick+0x3c>)
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	701a      	strb	r2, [r3, #0]
}
 8002eaa:	bf00      	nop
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr
 8002eb4:	2000001a 	.word	0x2000001a
 8002eb8:	2000001b 	.word	0x2000001b
 8002ebc:	2000001c 	.word	0x2000001c
 8002ec0:	2000001d 	.word	0x2000001d
 8002ec4:	20000019 	.word	0x20000019

08002ec8 <unblockJoystick>:
void unblockJoystick()
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
	blockUp=false;
 8002ecc:	4b09      	ldr	r3, [pc, #36]	; (8002ef4 <unblockJoystick+0x2c>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	701a      	strb	r2, [r3, #0]
	blockDown=false;
 8002ed2:	4b09      	ldr	r3, [pc, #36]	; (8002ef8 <unblockJoystick+0x30>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	701a      	strb	r2, [r3, #0]
	blockRight=false;
 8002ed8:	4b08      	ldr	r3, [pc, #32]	; (8002efc <unblockJoystick+0x34>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	701a      	strb	r2, [r3, #0]
	blockLeft=false;
 8002ede:	4b08      	ldr	r3, [pc, #32]	; (8002f00 <unblockJoystick+0x38>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	701a      	strb	r2, [r3, #0]
	blockPress=false;
 8002ee4:	4b07      	ldr	r3, [pc, #28]	; (8002f04 <unblockJoystick+0x3c>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	701a      	strb	r2, [r3, #0]
}
 8002eea:	bf00      	nop
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr
 8002ef4:	2000001a 	.word	0x2000001a
 8002ef8:	2000001b 	.word	0x2000001b
 8002efc:	2000001c 	.word	0x2000001c
 8002f00:	2000001d 	.word	0x2000001d
 8002f04:	20000019 	.word	0x20000019

08002f08 <getJoystickLed>:
getJoystickLed() {
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	af00      	add	r7, sp, #0
	if (DOWN() && !blockDown) {
 8002f0c:	f7ff ff8c 	bl	8002e28 <DOWN>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d00c      	beq.n	8002f30 <getJoystickLed+0x28>
 8002f16:	4b37      	ldr	r3, [pc, #220]	; (8002ff4 <getJoystickLed+0xec>)
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	f083 0301 	eor.w	r3, r3, #1
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d005      	beq.n	8002f30 <getJoystickLed+0x28>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8002f24:	2201      	movs	r2, #1
 8002f26:	2180      	movs	r1, #128	; 0x80
 8002f28:	4833      	ldr	r0, [pc, #204]	; (8002ff8 <getJoystickLed+0xf0>)
 8002f2a:	f004 fa3f 	bl	80073ac <HAL_GPIO_WritePin>
 8002f2e:	e016      	b.n	8002f5e <getJoystickLed+0x56>
	} else if (UP() && !blockUp) {
 8002f30:	f7ff ff6a 	bl	8002e08 <UP>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d00c      	beq.n	8002f54 <getJoystickLed+0x4c>
 8002f3a:	4b30      	ldr	r3, [pc, #192]	; (8002ffc <getJoystickLed+0xf4>)
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	f083 0301 	eor.w	r3, r3, #1
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d005      	beq.n	8002f54 <getJoystickLed+0x4c>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8002f48:	2201      	movs	r2, #1
 8002f4a:	2180      	movs	r1, #128	; 0x80
 8002f4c:	482a      	ldr	r0, [pc, #168]	; (8002ff8 <getJoystickLed+0xf0>)
 8002f4e:	f004 fa2d 	bl	80073ac <HAL_GPIO_WritePin>
 8002f52:	e004      	b.n	8002f5e <getJoystickLed+0x56>
	} else {
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8002f54:	2200      	movs	r2, #0
 8002f56:	2180      	movs	r1, #128	; 0x80
 8002f58:	4827      	ldr	r0, [pc, #156]	; (8002ff8 <getJoystickLed+0xf0>)
 8002f5a:	f004 fa27 	bl	80073ac <HAL_GPIO_WritePin>
	}

	if (RIGHT() && !blockRight) {
 8002f5e:	f7ff ff73 	bl	8002e48 <RIGHT>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d00c      	beq.n	8002f82 <getJoystickLed+0x7a>
 8002f68:	4b25      	ldr	r3, [pc, #148]	; (8003000 <getJoystickLed+0xf8>)
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	f083 0301 	eor.w	r3, r3, #1
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d005      	beq.n	8002f82 <getJoystickLed+0x7a>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8002f76:	2201      	movs	r2, #1
 8002f78:	2101      	movs	r1, #1
 8002f7a:	481f      	ldr	r0, [pc, #124]	; (8002ff8 <getJoystickLed+0xf0>)
 8002f7c:	f004 fa16 	bl	80073ac <HAL_GPIO_WritePin>
 8002f80:	e004      	b.n	8002f8c <getJoystickLed+0x84>
	} else {
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8002f82:	2200      	movs	r2, #0
 8002f84:	2101      	movs	r1, #1
 8002f86:	481c      	ldr	r0, [pc, #112]	; (8002ff8 <getJoystickLed+0xf0>)
 8002f88:	f004 fa10 	bl	80073ac <HAL_GPIO_WritePin>
	}

	if (LEFT() && !blockLeft) {
 8002f8c:	f7ff ff6c 	bl	8002e68 <LEFT>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d00d      	beq.n	8002fb2 <getJoystickLed+0xaa>
 8002f96:	4b1b      	ldr	r3, [pc, #108]	; (8003004 <getJoystickLed+0xfc>)
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	f083 0301 	eor.w	r3, r3, #1
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d006      	beq.n	8002fb2 <getJoystickLed+0xaa>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002faa:	4813      	ldr	r0, [pc, #76]	; (8002ff8 <getJoystickLed+0xf0>)
 8002fac:	f004 f9fe 	bl	80073ac <HAL_GPIO_WritePin>
 8002fb0:	e005      	b.n	8002fbe <getJoystickLed+0xb6>
	} else {
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002fb8:	480f      	ldr	r0, [pc, #60]	; (8002ff8 <getJoystickLed+0xf0>)
 8002fba:	f004 f9f7 	bl	80073ac <HAL_GPIO_WritePin>
	}
	Press = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 8002fbe:	2108      	movs	r1, #8
 8002fc0:	4811      	ldr	r0, [pc, #68]	; (8003008 <getJoystickLed+0x100>)
 8002fc2:	f004 f9db 	bl	800737c <HAL_GPIO_ReadPin>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	461a      	mov	r2, r3
 8002fca:	4b10      	ldr	r3, [pc, #64]	; (800300c <getJoystickLed+0x104>)
 8002fcc:	701a      	strb	r2, [r3, #0]

			if (Press == GPIO_PIN_RESET && !blockPress)
 8002fce:	4b0f      	ldr	r3, [pc, #60]	; (800300c <getJoystickLed+0x104>)
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d10b      	bne.n	8002fee <getJoystickLed+0xe6>
 8002fd6:	4b0e      	ldr	r3, [pc, #56]	; (8003010 <getJoystickLed+0x108>)
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	f083 0301 	eor.w	r3, r3, #1
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d004      	beq.n	8002fee <getJoystickLed+0xe6>
				HAL_GPIO_TogglePin(GPIOB,
 8002fe4:	f244 0181 	movw	r1, #16513	; 0x4081
 8002fe8:	4803      	ldr	r0, [pc, #12]	; (8002ff8 <getJoystickLed+0xf0>)
 8002fea:	f004 f9f8 	bl	80073de <HAL_GPIO_TogglePin>
				GPIO_PIN_0 | GPIO_PIN_7 | GPIO_PIN_14);
}
 8002fee:	bf00      	nop
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	2000001b 	.word	0x2000001b
 8002ff8:	40020400 	.word	0x40020400
 8002ffc:	2000001a 	.word	0x2000001a
 8003000:	2000001c 	.word	0x2000001c
 8003004:	2000001d 	.word	0x2000001d
 8003008:	40020000 	.word	0x40020000
 800300c:	20000404 	.word	0x20000404
 8003010:	20000019 	.word	0x20000019

08003014 <getJoystickDirection>:

void *getJoystickDirection(uint32_t VR[2])
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
	if (VR[0] >= 3700) {
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f640 6273 	movw	r2, #3699	; 0xe73
 8003024:	4293      	cmp	r3, r2
 8003026:	d903      	bls.n	8003030 <getJoystickDirection+0x1c>
		direction = 1; //LEFT
 8003028:	4b16      	ldr	r3, [pc, #88]	; (8003084 <getJoystickDirection+0x70>)
 800302a:	2201      	movs	r2, #1
 800302c:	601a      	str	r2, [r3, #0]
 800302e:	e022      	b.n	8003076 <getJoystickDirection+0x62>
	} else if (VR[1] >= 3700) {
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	3304      	adds	r3, #4
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f640 6273 	movw	r2, #3699	; 0xe73
 800303a:	4293      	cmp	r3, r2
 800303c:	d903      	bls.n	8003046 <getJoystickDirection+0x32>
		direction = 2; //DOWN
 800303e:	4b11      	ldr	r3, [pc, #68]	; (8003084 <getJoystickDirection+0x70>)
 8003040:	2202      	movs	r2, #2
 8003042:	601a      	str	r2, [r3, #0]
 8003044:	e017      	b.n	8003076 <getJoystickDirection+0x62>
	} else if (VR[0] <= 1700) {
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f240 62a4 	movw	r2, #1700	; 0x6a4
 800304e:	4293      	cmp	r3, r2
 8003050:	d803      	bhi.n	800305a <getJoystickDirection+0x46>
		direction = 3; //RIGHT
 8003052:	4b0c      	ldr	r3, [pc, #48]	; (8003084 <getJoystickDirection+0x70>)
 8003054:	2203      	movs	r2, #3
 8003056:	601a      	str	r2, [r3, #0]
 8003058:	e00d      	b.n	8003076 <getJoystickDirection+0x62>
	} else if (VR[1] <= 1700) {
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	3304      	adds	r3, #4
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8003064:	4293      	cmp	r3, r2
 8003066:	d803      	bhi.n	8003070 <getJoystickDirection+0x5c>
		direction = 4; //UP
 8003068:	4b06      	ldr	r3, [pc, #24]	; (8003084 <getJoystickDirection+0x70>)
 800306a:	2204      	movs	r2, #4
 800306c:	601a      	str	r2, [r3, #0]
 800306e:	e002      	b.n	8003076 <getJoystickDirection+0x62>
	} else {
		direction = 0;
 8003070:	4b04      	ldr	r3, [pc, #16]	; (8003084 <getJoystickDirection+0x70>)
 8003072:	2200      	movs	r2, #0
 8003074:	601a      	str	r2, [r3, #0]
	}
}
 8003076:	bf00      	nop
 8003078:	4618      	mov	r0, r3
 800307a:	370c      	adds	r7, #12
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr
 8003084:	200003e0 	.word	0x200003e0

08003088 <createChar>:
unsigned char ienemy3Right4[] =
		{ 0x08, 0x10, 0x18, 0x0C, 0x1E, 0x1A, 0x0A, 0x0C };
unsigned char line[] = { 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04 };
unsigned char left_arrow[] = { 0x00, 0x04, 0x0C, 0x1F, 0x0C, 0x04, 0x00, 0x00 };

void createChar(char Loc, unsigned char Symbol[], int Index) {
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	4603      	mov	r3, r0
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	607a      	str	r2, [r7, #4]
 8003094:	73fb      	strb	r3, [r7, #15]
	lcd_create_char(Symbol, Index);
 8003096:	6879      	ldr	r1, [r7, #4]
 8003098:	68b8      	ldr	r0, [r7, #8]
 800309a:	f7ff fa41 	bl	8002520 <lcd_create_char>
	LCD_SetLocalization( Loc);
 800309e:	7bfb      	ldrb	r3, [r7, #15]
 80030a0:	4618      	mov	r0, r3
 80030a2:	f000 fedd 	bl	8003e60 <LCD_SetLocalization>
	lcd_send_data(Index);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f7ff fa8e 	bl	80025c8 <lcd_send_data>
}
 80030ac:	bf00      	nop
 80030ae:	3710      	adds	r7, #16
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <createInvertedWord>:

void createInvertedWord(char Word[], char Loc, int Length, int Index,
		int Section) {
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b088      	sub	sp, #32
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	607a      	str	r2, [r7, #4]
 80030be:	603b      	str	r3, [r7, #0]
 80030c0:	460b      	mov	r3, r1
 80030c2:	72fb      	strb	r3, [r7, #11]
	char Inc = 0x01;
 80030c4:	2301      	movs	r3, #1
 80030c6:	75fb      	strb	r3, [r7, #23]
	char Symbol;
	bool passed = false;
 80030c8:	2300      	movs	r3, #0
 80030ca:	77fb      	strb	r3, [r7, #31]
	for (int i = 0; i < Length; i++) {
 80030cc:	2300      	movs	r3, #0
 80030ce:	61bb      	str	r3, [r7, #24]
 80030d0:	f000 be2e 	b.w	8003d30 <createInvertedWord+0xc7c>
		Index++;
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	3301      	adds	r3, #1
 80030d8:	603b      	str	r3, [r7, #0]
		if (Index == 8)
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	2b08      	cmp	r3, #8
 80030de:	d101      	bne.n	80030e4 <createInvertedWord+0x30>
			Index = 0;
 80030e0:	2300      	movs	r3, #0
 80030e2:	603b      	str	r3, [r7, #0]
		if (passed) {
 80030e4:	7ffb      	ldrb	r3, [r7, #31]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d005      	beq.n	80030f6 <createInvertedWord+0x42>
			Loc += Inc;
 80030ea:	7afa      	ldrb	r2, [r7, #11]
 80030ec:	7dfb      	ldrb	r3, [r7, #23]
 80030ee:	4413      	add	r3, r2
 80030f0:	72fb      	strb	r3, [r7, #11]
			passed = false;
 80030f2:	2300      	movs	r3, #0
 80030f4:	77fb      	strb	r3, [r7, #31]
		}
		Symbol = Word[i];
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	68fa      	ldr	r2, [r7, #12]
 80030fa:	4413      	add	r3, r2
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	75bb      	strb	r3, [r7, #22]
		if (Section == 0) {
 8003100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003102:	2b00      	cmp	r3, #0
 8003104:	f040 82ec 	bne.w	80036e0 <createInvertedWord+0x62c>
			switch (Symbol) {
 8003108:	7dbb      	ldrb	r3, [r7, #22]
 800310a:	3b31      	subs	r3, #49	; 0x31
 800310c:	2b49      	cmp	r3, #73	; 0x49
 800310e:	f200 8605 	bhi.w	8003d1c <createInvertedWord+0xc68>
 8003112:	a201      	add	r2, pc, #4	; (adr r2, 8003118 <createInvertedWord+0x64>)
 8003114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003118:	080036cf 	.word	0x080036cf
 800311c:	08003699 	.word	0x08003699
 8003120:	08003d1d 	.word	0x08003d1d
 8003124:	08003d1d 	.word	0x08003d1d
 8003128:	08003d1d 	.word	0x08003d1d
 800312c:	08003d1d 	.word	0x08003d1d
 8003130:	08003d1d 	.word	0x08003d1d
 8003134:	080036ab 	.word	0x080036ab
 8003138:	08003d1d 	.word	0x08003d1d
 800313c:	08003d1d 	.word	0x08003d1d
 8003140:	08003d1d 	.word	0x08003d1d
 8003144:	08003d1d 	.word	0x08003d1d
 8003148:	08003d1d 	.word	0x08003d1d
 800314c:	08003d1d 	.word	0x08003d1d
 8003150:	08003d1d 	.word	0x08003d1d
 8003154:	08003d1d 	.word	0x08003d1d
 8003158:	08003435 	.word	0x08003435
 800315c:	08003449 	.word	0x08003449
 8003160:	0800345d 	.word	0x0800345d
 8003164:	08003471 	.word	0x08003471
 8003168:	08003485 	.word	0x08003485
 800316c:	08003499 	.word	0x08003499
 8003170:	080034ad 	.word	0x080034ad
 8003174:	080034c1 	.word	0x080034c1
 8003178:	080034d5 	.word	0x080034d5
 800317c:	080034e9 	.word	0x080034e9
 8003180:	080034fd 	.word	0x080034fd
 8003184:	08003511 	.word	0x08003511
 8003188:	08003525 	.word	0x08003525
 800318c:	08003537 	.word	0x08003537
 8003190:	080035e5 	.word	0x080035e5
 8003194:	080035f7 	.word	0x080035f7
 8003198:	08003d1d 	.word	0x08003d1d
 800319c:	08003609 	.word	0x08003609
 80031a0:	0800361b 	.word	0x0800361b
 80031a4:	0800362d 	.word	0x0800362d
 80031a8:	0800363f 	.word	0x0800363f
 80031ac:	080036bd 	.word	0x080036bd
 80031b0:	08003651 	.word	0x08003651
 80031b4:	08003663 	.word	0x08003663
 80031b8:	08003675 	.word	0x08003675
 80031bc:	08003687 	.word	0x08003687
 80031c0:	08003d1d 	.word	0x08003d1d
 80031c4:	08003d1d 	.word	0x08003d1d
 80031c8:	08003d1d 	.word	0x08003d1d
 80031cc:	08003d1d 	.word	0x08003d1d
 80031d0:	08003d1d 	.word	0x08003d1d
 80031d4:	08003d1d 	.word	0x08003d1d
 80031d8:	08003241 	.word	0x08003241
 80031dc:	08003255 	.word	0x08003255
 80031e0:	08003269 	.word	0x08003269
 80031e4:	0800327d 	.word	0x0800327d
 80031e8:	08003291 	.word	0x08003291
 80031ec:	080032a5 	.word	0x080032a5
 80031f0:	080032b9 	.word	0x080032b9
 80031f4:	080032cd 	.word	0x080032cd
 80031f8:	080032e1 	.word	0x080032e1
 80031fc:	080032f5 	.word	0x080032f5
 8003200:	08003309 	.word	0x08003309
 8003204:	0800331d 	.word	0x0800331d
 8003208:	08003331 	.word	0x08003331
 800320c:	08003345 	.word	0x08003345
 8003210:	08003359 	.word	0x08003359
 8003214:	0800336d 	.word	0x0800336d
 8003218:	08003d1d 	.word	0x08003d1d
 800321c:	08003381 	.word	0x08003381
 8003220:	08003395 	.word	0x08003395
 8003224:	080033a9 	.word	0x080033a9
 8003228:	080033bd 	.word	0x080033bd
 800322c:	08003421 	.word	0x08003421
 8003230:	080033d1 	.word	0x080033d1
 8003234:	080033e5 	.word	0x080033e5
 8003238:	080033f9 	.word	0x080033f9
 800323c:	0800340d 	.word	0x0800340d
			case 'a':
				createChar(Loc, A2, Index);
 8003240:	7afb      	ldrb	r3, [r7, #11]
 8003242:	683a      	ldr	r2, [r7, #0]
 8003244:	49c0      	ldr	r1, [pc, #768]	; (8003548 <createInvertedWord+0x494>)
 8003246:	4618      	mov	r0, r3
 8003248:	f7ff ff1e 	bl	8003088 <createChar>
				passed = true;
 800324c:	2301      	movs	r3, #1
 800324e:	77fb      	strb	r3, [r7, #31]
				break;
 8003250:	f000 bd6b 	b.w	8003d2a <createInvertedWord+0xc76>
			case 'b':
				createChar(Loc, B2, Index);
 8003254:	7afb      	ldrb	r3, [r7, #11]
 8003256:	683a      	ldr	r2, [r7, #0]
 8003258:	49bc      	ldr	r1, [pc, #752]	; (800354c <createInvertedWord+0x498>)
 800325a:	4618      	mov	r0, r3
 800325c:	f7ff ff14 	bl	8003088 <createChar>
				passed = true;
 8003260:	2301      	movs	r3, #1
 8003262:	77fb      	strb	r3, [r7, #31]
				break;
 8003264:	f000 bd61 	b.w	8003d2a <createInvertedWord+0xc76>
			case 'c':
				createChar(Loc, C2, Index);
 8003268:	7afb      	ldrb	r3, [r7, #11]
 800326a:	683a      	ldr	r2, [r7, #0]
 800326c:	49b8      	ldr	r1, [pc, #736]	; (8003550 <createInvertedWord+0x49c>)
 800326e:	4618      	mov	r0, r3
 8003270:	f7ff ff0a 	bl	8003088 <createChar>
				passed = true;
 8003274:	2301      	movs	r3, #1
 8003276:	77fb      	strb	r3, [r7, #31]
				break;
 8003278:	f000 bd57 	b.w	8003d2a <createInvertedWord+0xc76>
			case 'd':
				createChar(Loc, D2, Index);
 800327c:	7afb      	ldrb	r3, [r7, #11]
 800327e:	683a      	ldr	r2, [r7, #0]
 8003280:	49b4      	ldr	r1, [pc, #720]	; (8003554 <createInvertedWord+0x4a0>)
 8003282:	4618      	mov	r0, r3
 8003284:	f7ff ff00 	bl	8003088 <createChar>
				passed = true;
 8003288:	2301      	movs	r3, #1
 800328a:	77fb      	strb	r3, [r7, #31]
				break;
 800328c:	f000 bd4d 	b.w	8003d2a <createInvertedWord+0xc76>
			case 'e':
				createChar(Loc, E2, Index);
 8003290:	7afb      	ldrb	r3, [r7, #11]
 8003292:	683a      	ldr	r2, [r7, #0]
 8003294:	49b0      	ldr	r1, [pc, #704]	; (8003558 <createInvertedWord+0x4a4>)
 8003296:	4618      	mov	r0, r3
 8003298:	f7ff fef6 	bl	8003088 <createChar>
				passed = true;
 800329c:	2301      	movs	r3, #1
 800329e:	77fb      	strb	r3, [r7, #31]
				break;
 80032a0:	f000 bd43 	b.w	8003d2a <createInvertedWord+0xc76>
			case 'f':
				createChar(Loc, F2, Index);
 80032a4:	7afb      	ldrb	r3, [r7, #11]
 80032a6:	683a      	ldr	r2, [r7, #0]
 80032a8:	49ac      	ldr	r1, [pc, #688]	; (800355c <createInvertedWord+0x4a8>)
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7ff feec 	bl	8003088 <createChar>
				passed = true;
 80032b0:	2301      	movs	r3, #1
 80032b2:	77fb      	strb	r3, [r7, #31]
				break;
 80032b4:	f000 bd39 	b.w	8003d2a <createInvertedWord+0xc76>
			case 'g':
				createChar(Loc, G2, Index);
 80032b8:	7afb      	ldrb	r3, [r7, #11]
 80032ba:	683a      	ldr	r2, [r7, #0]
 80032bc:	49a8      	ldr	r1, [pc, #672]	; (8003560 <createInvertedWord+0x4ac>)
 80032be:	4618      	mov	r0, r3
 80032c0:	f7ff fee2 	bl	8003088 <createChar>
				passed = true;
 80032c4:	2301      	movs	r3, #1
 80032c6:	77fb      	strb	r3, [r7, #31]
				break;
 80032c8:	f000 bd2f 	b.w	8003d2a <createInvertedWord+0xc76>
			case 'h':
				createChar(Loc, H2, Index);
 80032cc:	7afb      	ldrb	r3, [r7, #11]
 80032ce:	683a      	ldr	r2, [r7, #0]
 80032d0:	49a4      	ldr	r1, [pc, #656]	; (8003564 <createInvertedWord+0x4b0>)
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7ff fed8 	bl	8003088 <createChar>
				passed = true;
 80032d8:	2301      	movs	r3, #1
 80032da:	77fb      	strb	r3, [r7, #31]
				break;
 80032dc:	f000 bd25 	b.w	8003d2a <createInvertedWord+0xc76>
			case 'i':
				createChar(Loc, I2, Index);
 80032e0:	7afb      	ldrb	r3, [r7, #11]
 80032e2:	683a      	ldr	r2, [r7, #0]
 80032e4:	49a0      	ldr	r1, [pc, #640]	; (8003568 <createInvertedWord+0x4b4>)
 80032e6:	4618      	mov	r0, r3
 80032e8:	f7ff fece 	bl	8003088 <createChar>
				passed = true;
 80032ec:	2301      	movs	r3, #1
 80032ee:	77fb      	strb	r3, [r7, #31]
				break;
 80032f0:	f000 bd1b 	b.w	8003d2a <createInvertedWord+0xc76>
			case 'j':
				createChar(Loc, J2, Index);
 80032f4:	7afb      	ldrb	r3, [r7, #11]
 80032f6:	683a      	ldr	r2, [r7, #0]
 80032f8:	499c      	ldr	r1, [pc, #624]	; (800356c <createInvertedWord+0x4b8>)
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7ff fec4 	bl	8003088 <createChar>
				passed = true;
 8003300:	2301      	movs	r3, #1
 8003302:	77fb      	strb	r3, [r7, #31]
				break;
 8003304:	f000 bd11 	b.w	8003d2a <createInvertedWord+0xc76>
			case 'k':
				createChar(Loc, K2, Index);
 8003308:	7afb      	ldrb	r3, [r7, #11]
 800330a:	683a      	ldr	r2, [r7, #0]
 800330c:	4998      	ldr	r1, [pc, #608]	; (8003570 <createInvertedWord+0x4bc>)
 800330e:	4618      	mov	r0, r3
 8003310:	f7ff feba 	bl	8003088 <createChar>
				passed = true;
 8003314:	2301      	movs	r3, #1
 8003316:	77fb      	strb	r3, [r7, #31]
				break;
 8003318:	f000 bd07 	b.w	8003d2a <createInvertedWord+0xc76>
			case 'l':
				createChar(Loc, L2, Index);
 800331c:	7afb      	ldrb	r3, [r7, #11]
 800331e:	683a      	ldr	r2, [r7, #0]
 8003320:	4994      	ldr	r1, [pc, #592]	; (8003574 <createInvertedWord+0x4c0>)
 8003322:	4618      	mov	r0, r3
 8003324:	f7ff feb0 	bl	8003088 <createChar>
				passed = true;
 8003328:	2301      	movs	r3, #1
 800332a:	77fb      	strb	r3, [r7, #31]
				break;
 800332c:	f000 bcfd 	b.w	8003d2a <createInvertedWord+0xc76>
			case 'm':
				createChar(Loc, M2, Index);
 8003330:	7afb      	ldrb	r3, [r7, #11]
 8003332:	683a      	ldr	r2, [r7, #0]
 8003334:	4990      	ldr	r1, [pc, #576]	; (8003578 <createInvertedWord+0x4c4>)
 8003336:	4618      	mov	r0, r3
 8003338:	f7ff fea6 	bl	8003088 <createChar>
				passed = true;
 800333c:	2301      	movs	r3, #1
 800333e:	77fb      	strb	r3, [r7, #31]
				break;
 8003340:	f000 bcf3 	b.w	8003d2a <createInvertedWord+0xc76>
			case 'n':
				createChar(Loc, N2, Index);
 8003344:	7afb      	ldrb	r3, [r7, #11]
 8003346:	683a      	ldr	r2, [r7, #0]
 8003348:	498c      	ldr	r1, [pc, #560]	; (800357c <createInvertedWord+0x4c8>)
 800334a:	4618      	mov	r0, r3
 800334c:	f7ff fe9c 	bl	8003088 <createChar>
				passed = true;
 8003350:	2301      	movs	r3, #1
 8003352:	77fb      	strb	r3, [r7, #31]
				break;
 8003354:	f000 bce9 	b.w	8003d2a <createInvertedWord+0xc76>
			case 'o':
				createChar(Loc, O2, Index);
 8003358:	7afb      	ldrb	r3, [r7, #11]
 800335a:	683a      	ldr	r2, [r7, #0]
 800335c:	4988      	ldr	r1, [pc, #544]	; (8003580 <createInvertedWord+0x4cc>)
 800335e:	4618      	mov	r0, r3
 8003360:	f7ff fe92 	bl	8003088 <createChar>
				passed = true;
 8003364:	2301      	movs	r3, #1
 8003366:	77fb      	strb	r3, [r7, #31]
				break;
 8003368:	f000 bcdf 	b.w	8003d2a <createInvertedWord+0xc76>
			case 'p':
				createChar(Loc, P2, Index);
 800336c:	7afb      	ldrb	r3, [r7, #11]
 800336e:	683a      	ldr	r2, [r7, #0]
 8003370:	4984      	ldr	r1, [pc, #528]	; (8003584 <createInvertedWord+0x4d0>)
 8003372:	4618      	mov	r0, r3
 8003374:	f7ff fe88 	bl	8003088 <createChar>
				passed = true;
 8003378:	2301      	movs	r3, #1
 800337a:	77fb      	strb	r3, [r7, #31]
				break;
 800337c:	f000 bcd5 	b.w	8003d2a <createInvertedWord+0xc76>
			case 'r':
				createChar(Loc, R2, Index);
 8003380:	7afb      	ldrb	r3, [r7, #11]
 8003382:	683a      	ldr	r2, [r7, #0]
 8003384:	4980      	ldr	r1, [pc, #512]	; (8003588 <createInvertedWord+0x4d4>)
 8003386:	4618      	mov	r0, r3
 8003388:	f7ff fe7e 	bl	8003088 <createChar>
				passed = true;
 800338c:	2301      	movs	r3, #1
 800338e:	77fb      	strb	r3, [r7, #31]
				break;
 8003390:	f000 bccb 	b.w	8003d2a <createInvertedWord+0xc76>
			case 's':
				createChar(Loc, S2, Index);
 8003394:	7afb      	ldrb	r3, [r7, #11]
 8003396:	683a      	ldr	r2, [r7, #0]
 8003398:	497c      	ldr	r1, [pc, #496]	; (800358c <createInvertedWord+0x4d8>)
 800339a:	4618      	mov	r0, r3
 800339c:	f7ff fe74 	bl	8003088 <createChar>
				passed = true;
 80033a0:	2301      	movs	r3, #1
 80033a2:	77fb      	strb	r3, [r7, #31]
				break;
 80033a4:	f000 bcc1 	b.w	8003d2a <createInvertedWord+0xc76>
			case 't':
				createChar(Loc, T2, Index);
 80033a8:	7afb      	ldrb	r3, [r7, #11]
 80033aa:	683a      	ldr	r2, [r7, #0]
 80033ac:	4978      	ldr	r1, [pc, #480]	; (8003590 <createInvertedWord+0x4dc>)
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7ff fe6a 	bl	8003088 <createChar>
				passed = true;
 80033b4:	2301      	movs	r3, #1
 80033b6:	77fb      	strb	r3, [r7, #31]
				break;
 80033b8:	f000 bcb7 	b.w	8003d2a <createInvertedWord+0xc76>
			case 'u':
				createChar(Loc, U2, Index);
 80033bc:	7afb      	ldrb	r3, [r7, #11]
 80033be:	683a      	ldr	r2, [r7, #0]
 80033c0:	4974      	ldr	r1, [pc, #464]	; (8003594 <createInvertedWord+0x4e0>)
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7ff fe60 	bl	8003088 <createChar>
				passed = true;
 80033c8:	2301      	movs	r3, #1
 80033ca:	77fb      	strb	r3, [r7, #31]
				break;
 80033cc:	f000 bcad 	b.w	8003d2a <createInvertedWord+0xc76>
			case 'w':
				createChar(Loc, W2, Index);
 80033d0:	7afb      	ldrb	r3, [r7, #11]
 80033d2:	683a      	ldr	r2, [r7, #0]
 80033d4:	4970      	ldr	r1, [pc, #448]	; (8003598 <createInvertedWord+0x4e4>)
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7ff fe56 	bl	8003088 <createChar>
				passed = true;
 80033dc:	2301      	movs	r3, #1
 80033de:	77fb      	strb	r3, [r7, #31]
				break;
 80033e0:	f000 bca3 	b.w	8003d2a <createInvertedWord+0xc76>
			case 'x':
				createChar(Loc, X2, Index);
 80033e4:	7afb      	ldrb	r3, [r7, #11]
 80033e6:	683a      	ldr	r2, [r7, #0]
 80033e8:	496c      	ldr	r1, [pc, #432]	; (800359c <createInvertedWord+0x4e8>)
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7ff fe4c 	bl	8003088 <createChar>
				passed = true;
 80033f0:	2301      	movs	r3, #1
 80033f2:	77fb      	strb	r3, [r7, #31]
				break;
 80033f4:	f000 bc99 	b.w	8003d2a <createInvertedWord+0xc76>
			case 'y':
				createChar(Loc, Y2, Index);
 80033f8:	7afb      	ldrb	r3, [r7, #11]
 80033fa:	683a      	ldr	r2, [r7, #0]
 80033fc:	4968      	ldr	r1, [pc, #416]	; (80035a0 <createInvertedWord+0x4ec>)
 80033fe:	4618      	mov	r0, r3
 8003400:	f7ff fe42 	bl	8003088 <createChar>
				passed = true;
 8003404:	2301      	movs	r3, #1
 8003406:	77fb      	strb	r3, [r7, #31]
				break;
 8003408:	f000 bc8f 	b.w	8003d2a <createInvertedWord+0xc76>
			case 'z':
				createChar(Loc, Z2, Index);
 800340c:	7afb      	ldrb	r3, [r7, #11]
 800340e:	683a      	ldr	r2, [r7, #0]
 8003410:	4964      	ldr	r1, [pc, #400]	; (80035a4 <createInvertedWord+0x4f0>)
 8003412:	4618      	mov	r0, r3
 8003414:	f7ff fe38 	bl	8003088 <createChar>
				passed = true;
 8003418:	2301      	movs	r3, #1
 800341a:	77fb      	strb	r3, [r7, #31]
				break;
 800341c:	f000 bc85 	b.w	8003d2a <createInvertedWord+0xc76>
			case 'v':
				createChar(Loc, V2, Index);
 8003420:	7afb      	ldrb	r3, [r7, #11]
 8003422:	683a      	ldr	r2, [r7, #0]
 8003424:	4960      	ldr	r1, [pc, #384]	; (80035a8 <createInvertedWord+0x4f4>)
 8003426:	4618      	mov	r0, r3
 8003428:	f7ff fe2e 	bl	8003088 <createChar>
				passed = true;
 800342c:	2301      	movs	r3, #1
 800342e:	77fb      	strb	r3, [r7, #31]
				break;
 8003430:	f000 bc7b 	b.w	8003d2a <createInvertedWord+0xc76>
			case 'A':
				createChar(Loc, A1, Index);
 8003434:	7afb      	ldrb	r3, [r7, #11]
 8003436:	683a      	ldr	r2, [r7, #0]
 8003438:	495c      	ldr	r1, [pc, #368]	; (80035ac <createInvertedWord+0x4f8>)
 800343a:	4618      	mov	r0, r3
 800343c:	f7ff fe24 	bl	8003088 <createChar>
				passed = true;
 8003440:	2301      	movs	r3, #1
 8003442:	77fb      	strb	r3, [r7, #31]
				break;
 8003444:	f000 bc71 	b.w	8003d2a <createInvertedWord+0xc76>
			case 'B':
				createChar(Loc, B1, Index);
 8003448:	7afb      	ldrb	r3, [r7, #11]
 800344a:	683a      	ldr	r2, [r7, #0]
 800344c:	4958      	ldr	r1, [pc, #352]	; (80035b0 <createInvertedWord+0x4fc>)
 800344e:	4618      	mov	r0, r3
 8003450:	f7ff fe1a 	bl	8003088 <createChar>
				passed = true;
 8003454:	2301      	movs	r3, #1
 8003456:	77fb      	strb	r3, [r7, #31]
				break;
 8003458:	f000 bc67 	b.w	8003d2a <createInvertedWord+0xc76>
			case 'C':
				createChar(Loc, C1, Index);
 800345c:	7afb      	ldrb	r3, [r7, #11]
 800345e:	683a      	ldr	r2, [r7, #0]
 8003460:	4954      	ldr	r1, [pc, #336]	; (80035b4 <createInvertedWord+0x500>)
 8003462:	4618      	mov	r0, r3
 8003464:	f7ff fe10 	bl	8003088 <createChar>
				passed = true;
 8003468:	2301      	movs	r3, #1
 800346a:	77fb      	strb	r3, [r7, #31]
				break;
 800346c:	f000 bc5d 	b.w	8003d2a <createInvertedWord+0xc76>
			case 'D':
				createChar(Loc, D1, Index);
 8003470:	7afb      	ldrb	r3, [r7, #11]
 8003472:	683a      	ldr	r2, [r7, #0]
 8003474:	4950      	ldr	r1, [pc, #320]	; (80035b8 <createInvertedWord+0x504>)
 8003476:	4618      	mov	r0, r3
 8003478:	f7ff fe06 	bl	8003088 <createChar>
				passed = true;
 800347c:	2301      	movs	r3, #1
 800347e:	77fb      	strb	r3, [r7, #31]
				break;
 8003480:	f000 bc53 	b.w	8003d2a <createInvertedWord+0xc76>
			case 'E':
				createChar(Loc, E1, Index);
 8003484:	7afb      	ldrb	r3, [r7, #11]
 8003486:	683a      	ldr	r2, [r7, #0]
 8003488:	494c      	ldr	r1, [pc, #304]	; (80035bc <createInvertedWord+0x508>)
 800348a:	4618      	mov	r0, r3
 800348c:	f7ff fdfc 	bl	8003088 <createChar>
				passed = true;
 8003490:	2301      	movs	r3, #1
 8003492:	77fb      	strb	r3, [r7, #31]
				break;
 8003494:	f000 bc49 	b.w	8003d2a <createInvertedWord+0xc76>
			case 'F':
				createChar(Loc, F1, Index);
 8003498:	7afb      	ldrb	r3, [r7, #11]
 800349a:	683a      	ldr	r2, [r7, #0]
 800349c:	4948      	ldr	r1, [pc, #288]	; (80035c0 <createInvertedWord+0x50c>)
 800349e:	4618      	mov	r0, r3
 80034a0:	f7ff fdf2 	bl	8003088 <createChar>
				passed = true;
 80034a4:	2301      	movs	r3, #1
 80034a6:	77fb      	strb	r3, [r7, #31]
				break;
 80034a8:	f000 bc3f 	b.w	8003d2a <createInvertedWord+0xc76>
			case 'G':
				createChar(Loc, G1, Index);
 80034ac:	7afb      	ldrb	r3, [r7, #11]
 80034ae:	683a      	ldr	r2, [r7, #0]
 80034b0:	4944      	ldr	r1, [pc, #272]	; (80035c4 <createInvertedWord+0x510>)
 80034b2:	4618      	mov	r0, r3
 80034b4:	f7ff fde8 	bl	8003088 <createChar>
				passed = true;
 80034b8:	2301      	movs	r3, #1
 80034ba:	77fb      	strb	r3, [r7, #31]
				break;
 80034bc:	f000 bc35 	b.w	8003d2a <createInvertedWord+0xc76>
			case 'H':
				createChar(Loc, H1, Index);
 80034c0:	7afb      	ldrb	r3, [r7, #11]
 80034c2:	683a      	ldr	r2, [r7, #0]
 80034c4:	4940      	ldr	r1, [pc, #256]	; (80035c8 <createInvertedWord+0x514>)
 80034c6:	4618      	mov	r0, r3
 80034c8:	f7ff fdde 	bl	8003088 <createChar>
				passed = true;
 80034cc:	2301      	movs	r3, #1
 80034ce:	77fb      	strb	r3, [r7, #31]
				break;
 80034d0:	f000 bc2b 	b.w	8003d2a <createInvertedWord+0xc76>
			case 'I':
				createChar(Loc, T1, Index);
 80034d4:	7afb      	ldrb	r3, [r7, #11]
 80034d6:	683a      	ldr	r2, [r7, #0]
 80034d8:	493c      	ldr	r1, [pc, #240]	; (80035cc <createInvertedWord+0x518>)
 80034da:	4618      	mov	r0, r3
 80034dc:	f7ff fdd4 	bl	8003088 <createChar>
				passed = true;
 80034e0:	2301      	movs	r3, #1
 80034e2:	77fb      	strb	r3, [r7, #31]
				break;
 80034e4:	f000 bc21 	b.w	8003d2a <createInvertedWord+0xc76>
			case 'J':
				createChar(Loc, J1, Index);
 80034e8:	7afb      	ldrb	r3, [r7, #11]
 80034ea:	683a      	ldr	r2, [r7, #0]
 80034ec:	4938      	ldr	r1, [pc, #224]	; (80035d0 <createInvertedWord+0x51c>)
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7ff fdca 	bl	8003088 <createChar>
				passed = true;
 80034f4:	2301      	movs	r3, #1
 80034f6:	77fb      	strb	r3, [r7, #31]
				break;
 80034f8:	f000 bc17 	b.w	8003d2a <createInvertedWord+0xc76>
			case 'K':
				createChar(Loc, K1, Index);
 80034fc:	7afb      	ldrb	r3, [r7, #11]
 80034fe:	683a      	ldr	r2, [r7, #0]
 8003500:	4934      	ldr	r1, [pc, #208]	; (80035d4 <createInvertedWord+0x520>)
 8003502:	4618      	mov	r0, r3
 8003504:	f7ff fdc0 	bl	8003088 <createChar>
				passed = true;
 8003508:	2301      	movs	r3, #1
 800350a:	77fb      	strb	r3, [r7, #31]
				break;
 800350c:	f000 bc0d 	b.w	8003d2a <createInvertedWord+0xc76>
			case 'L':
				createChar(Loc, L1, Index);
 8003510:	7afb      	ldrb	r3, [r7, #11]
 8003512:	683a      	ldr	r2, [r7, #0]
 8003514:	4930      	ldr	r1, [pc, #192]	; (80035d8 <createInvertedWord+0x524>)
 8003516:	4618      	mov	r0, r3
 8003518:	f7ff fdb6 	bl	8003088 <createChar>
				passed = true;
 800351c:	2301      	movs	r3, #1
 800351e:	77fb      	strb	r3, [r7, #31]
				break;
 8003520:	f000 bc03 	b.w	8003d2a <createInvertedWord+0xc76>
			case 'M':
				createChar(Loc, M1, Index);
 8003524:	7afb      	ldrb	r3, [r7, #11]
 8003526:	683a      	ldr	r2, [r7, #0]
 8003528:	492c      	ldr	r1, [pc, #176]	; (80035dc <createInvertedWord+0x528>)
 800352a:	4618      	mov	r0, r3
 800352c:	f7ff fdac 	bl	8003088 <createChar>
				passed = true;
 8003530:	2301      	movs	r3, #1
 8003532:	77fb      	strb	r3, [r7, #31]
				break;
 8003534:	e3f9      	b.n	8003d2a <createInvertedWord+0xc76>
			case 'N':
				createChar(Loc, N1, Index);
 8003536:	7afb      	ldrb	r3, [r7, #11]
 8003538:	683a      	ldr	r2, [r7, #0]
 800353a:	4929      	ldr	r1, [pc, #164]	; (80035e0 <createInvertedWord+0x52c>)
 800353c:	4618      	mov	r0, r3
 800353e:	f7ff fda3 	bl	8003088 <createChar>
				passed = true;
 8003542:	2301      	movs	r3, #1
 8003544:	77fb      	strb	r3, [r7, #31]
				break;
 8003546:	e3f0      	b.n	8003d2a <createInvertedWord+0xc76>
 8003548:	200000e0 	.word	0x200000e0
 800354c:	200000e8 	.word	0x200000e8
 8003550:	200000f0 	.word	0x200000f0
 8003554:	200000f8 	.word	0x200000f8
 8003558:	20000100 	.word	0x20000100
 800355c:	20000108 	.word	0x20000108
 8003560:	20000110 	.word	0x20000110
 8003564:	20000118 	.word	0x20000118
 8003568:	20000120 	.word	0x20000120
 800356c:	20000128 	.word	0x20000128
 8003570:	20000130 	.word	0x20000130
 8003574:	20000138 	.word	0x20000138
 8003578:	20000140 	.word	0x20000140
 800357c:	20000148 	.word	0x20000148
 8003580:	20000150 	.word	0x20000150
 8003584:	20000158 	.word	0x20000158
 8003588:	20000160 	.word	0x20000160
 800358c:	20000168 	.word	0x20000168
 8003590:	20000170 	.word	0x20000170
 8003594:	20000178 	.word	0x20000178
 8003598:	20000180 	.word	0x20000180
 800359c:	20000188 	.word	0x20000188
 80035a0:	20000190 	.word	0x20000190
 80035a4:	20000198 	.word	0x20000198
 80035a8:	200001a0 	.word	0x200001a0
 80035ac:	20000020 	.word	0x20000020
 80035b0:	20000028 	.word	0x20000028
 80035b4:	20000030 	.word	0x20000030
 80035b8:	20000038 	.word	0x20000038
 80035bc:	20000040 	.word	0x20000040
 80035c0:	20000048 	.word	0x20000048
 80035c4:	20000050 	.word	0x20000050
 80035c8:	20000058 	.word	0x20000058
 80035cc:	200000a8 	.word	0x200000a8
 80035d0:	20000060 	.word	0x20000060
 80035d4:	20000068 	.word	0x20000068
 80035d8:	20000070 	.word	0x20000070
 80035dc:	20000078 	.word	0x20000078
 80035e0:	20000080 	.word	0x20000080
			case 'O':
				createChar(Loc, O1, Index);
 80035e4:	7afb      	ldrb	r3, [r7, #11]
 80035e6:	683a      	ldr	r2, [r7, #0]
 80035e8:	49c0      	ldr	r1, [pc, #768]	; (80038ec <createInvertedWord+0x838>)
 80035ea:	4618      	mov	r0, r3
 80035ec:	f7ff fd4c 	bl	8003088 <createChar>
				passed = true;
 80035f0:	2301      	movs	r3, #1
 80035f2:	77fb      	strb	r3, [r7, #31]
				break;
 80035f4:	e399      	b.n	8003d2a <createInvertedWord+0xc76>
			case 'P':
				createChar(Loc, P1, Index);
 80035f6:	7afb      	ldrb	r3, [r7, #11]
 80035f8:	683a      	ldr	r2, [r7, #0]
 80035fa:	49bd      	ldr	r1, [pc, #756]	; (80038f0 <createInvertedWord+0x83c>)
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7ff fd43 	bl	8003088 <createChar>
				passed = true;
 8003602:	2301      	movs	r3, #1
 8003604:	77fb      	strb	r3, [r7, #31]
				break;
 8003606:	e390      	b.n	8003d2a <createInvertedWord+0xc76>
			case 'R':
				createChar(Loc, R1, Index);
 8003608:	7afb      	ldrb	r3, [r7, #11]
 800360a:	683a      	ldr	r2, [r7, #0]
 800360c:	49b9      	ldr	r1, [pc, #740]	; (80038f4 <createInvertedWord+0x840>)
 800360e:	4618      	mov	r0, r3
 8003610:	f7ff fd3a 	bl	8003088 <createChar>
				passed = true;
 8003614:	2301      	movs	r3, #1
 8003616:	77fb      	strb	r3, [r7, #31]
				break;
 8003618:	e387      	b.n	8003d2a <createInvertedWord+0xc76>
			case 'S':
				createChar(Loc, S1, Index);
 800361a:	7afb      	ldrb	r3, [r7, #11]
 800361c:	683a      	ldr	r2, [r7, #0]
 800361e:	49b6      	ldr	r1, [pc, #728]	; (80038f8 <createInvertedWord+0x844>)
 8003620:	4618      	mov	r0, r3
 8003622:	f7ff fd31 	bl	8003088 <createChar>
				passed = true;
 8003626:	2301      	movs	r3, #1
 8003628:	77fb      	strb	r3, [r7, #31]
				break;
 800362a:	e37e      	b.n	8003d2a <createInvertedWord+0xc76>
			case 'T':
				createChar(Loc, T1, Index);
 800362c:	7afb      	ldrb	r3, [r7, #11]
 800362e:	683a      	ldr	r2, [r7, #0]
 8003630:	49b2      	ldr	r1, [pc, #712]	; (80038fc <createInvertedWord+0x848>)
 8003632:	4618      	mov	r0, r3
 8003634:	f7ff fd28 	bl	8003088 <createChar>
				passed = true;
 8003638:	2301      	movs	r3, #1
 800363a:	77fb      	strb	r3, [r7, #31]
				break;
 800363c:	e375      	b.n	8003d2a <createInvertedWord+0xc76>
			case 'U':
				createChar(Loc, U1, Index);
 800363e:	7afb      	ldrb	r3, [r7, #11]
 8003640:	683a      	ldr	r2, [r7, #0]
 8003642:	49af      	ldr	r1, [pc, #700]	; (8003900 <createInvertedWord+0x84c>)
 8003644:	4618      	mov	r0, r3
 8003646:	f7ff fd1f 	bl	8003088 <createChar>
				passed = true;
 800364a:	2301      	movs	r3, #1
 800364c:	77fb      	strb	r3, [r7, #31]
				break;
 800364e:	e36c      	b.n	8003d2a <createInvertedWord+0xc76>
			case 'W':
				createChar(Loc, W1, Index);
 8003650:	7afb      	ldrb	r3, [r7, #11]
 8003652:	683a      	ldr	r2, [r7, #0]
 8003654:	49ab      	ldr	r1, [pc, #684]	; (8003904 <createInvertedWord+0x850>)
 8003656:	4618      	mov	r0, r3
 8003658:	f7ff fd16 	bl	8003088 <createChar>
				passed = true;
 800365c:	2301      	movs	r3, #1
 800365e:	77fb      	strb	r3, [r7, #31]
				break;
 8003660:	e363      	b.n	8003d2a <createInvertedWord+0xc76>
			case 'X':
				createChar(Loc, X1, Index);
 8003662:	7afb      	ldrb	r3, [r7, #11]
 8003664:	683a      	ldr	r2, [r7, #0]
 8003666:	49a8      	ldr	r1, [pc, #672]	; (8003908 <createInvertedWord+0x854>)
 8003668:	4618      	mov	r0, r3
 800366a:	f7ff fd0d 	bl	8003088 <createChar>
				passed = true;
 800366e:	2301      	movs	r3, #1
 8003670:	77fb      	strb	r3, [r7, #31]
				break;
 8003672:	e35a      	b.n	8003d2a <createInvertedWord+0xc76>
			case 'Y':
				createChar(Loc, Y1, Index);
 8003674:	7afb      	ldrb	r3, [r7, #11]
 8003676:	683a      	ldr	r2, [r7, #0]
 8003678:	49a4      	ldr	r1, [pc, #656]	; (800390c <createInvertedWord+0x858>)
 800367a:	4618      	mov	r0, r3
 800367c:	f7ff fd04 	bl	8003088 <createChar>
				passed = true;
 8003680:	2301      	movs	r3, #1
 8003682:	77fb      	strb	r3, [r7, #31]
				break;
 8003684:	e351      	b.n	8003d2a <createInvertedWord+0xc76>
			case 'Z':
				createChar(Loc, Z1, Index);
 8003686:	7afb      	ldrb	r3, [r7, #11]
 8003688:	683a      	ldr	r2, [r7, #0]
 800368a:	49a1      	ldr	r1, [pc, #644]	; (8003910 <createInvertedWord+0x85c>)
 800368c:	4618      	mov	r0, r3
 800368e:	f7ff fcfb 	bl	8003088 <createChar>
				passed = true;
 8003692:	2301      	movs	r3, #1
 8003694:	77fb      	strb	r3, [r7, #31]
				break;
 8003696:	e348      	b.n	8003d2a <createInvertedWord+0xc76>
			case '2':
				createChar(Loc, downArrow, Index);
 8003698:	7afb      	ldrb	r3, [r7, #11]
 800369a:	683a      	ldr	r2, [r7, #0]
 800369c:	499d      	ldr	r1, [pc, #628]	; (8003914 <createInvertedWord+0x860>)
 800369e:	4618      	mov	r0, r3
 80036a0:	f7ff fcf2 	bl	8003088 <createChar>
				passed = true;
 80036a4:	2301      	movs	r3, #1
 80036a6:	77fb      	strb	r3, [r7, #31]
				break;
 80036a8:	e33f      	b.n	8003d2a <createInvertedWord+0xc76>
			case '8':
				createChar(Loc, upArrow, Index);
 80036aa:	7afb      	ldrb	r3, [r7, #11]
 80036ac:	683a      	ldr	r2, [r7, #0]
 80036ae:	499a      	ldr	r1, [pc, #616]	; (8003918 <createInvertedWord+0x864>)
 80036b0:	4618      	mov	r0, r3
 80036b2:	f7ff fce9 	bl	8003088 <createChar>
				passed = true;
 80036b6:	2301      	movs	r3, #1
 80036b8:	77fb      	strb	r3, [r7, #31]
				break;
 80036ba:	e336      	b.n	8003d2a <createInvertedWord+0xc76>
			case 'V':
				createChar(Loc, V1, Index);
 80036bc:	7afb      	ldrb	r3, [r7, #11]
 80036be:	683a      	ldr	r2, [r7, #0]
 80036c0:	4996      	ldr	r1, [pc, #600]	; (800391c <createInvertedWord+0x868>)
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7ff fce0 	bl	8003088 <createChar>
				passed = true;
 80036c8:	2301      	movs	r3, #1
 80036ca:	77fb      	strb	r3, [r7, #31]
				break;
 80036cc:	e32d      	b.n	8003d2a <createInvertedWord+0xc76>
			case '1':
				createChar(Loc, Space, Index);
 80036ce:	7afb      	ldrb	r3, [r7, #11]
 80036d0:	683a      	ldr	r2, [r7, #0]
 80036d2:	4993      	ldr	r1, [pc, #588]	; (8003920 <createInvertedWord+0x86c>)
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7ff fcd7 	bl	8003088 <createChar>
				passed = true;
 80036da:	2301      	movs	r3, #1
 80036dc:	77fb      	strb	r3, [r7, #31]
				break;
 80036de:	e324      	b.n	8003d2a <createInvertedWord+0xc76>
			default:
				break;
			}
		} else if (Section == 1) {
 80036e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	f040 81c6 	bne.w	8003a74 <createInvertedWord+0x9c0>
			switch (Symbol) {
 80036e8:	7dbb      	ldrb	r3, [r7, #22]
 80036ea:	3b31      	subs	r3, #49	; 0x31
 80036ec:	2b3d      	cmp	r3, #61	; 0x3d
 80036ee:	f200 8317 	bhi.w	8003d20 <createInvertedWord+0xc6c>
 80036f2:	a201      	add	r2, pc, #4	; (adr r2, 80036f8 <createInvertedWord+0x644>)
 80036f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036f8:	08003803 	.word	0x08003803
 80036fc:	08003815 	.word	0x08003815
 8003700:	08003827 	.word	0x08003827
 8003704:	08003839 	.word	0x08003839
 8003708:	0800384b 	.word	0x0800384b
 800370c:	0800385d 	.word	0x0800385d
 8003710:	0800386f 	.word	0x0800386f
 8003714:	08003881 	.word	0x08003881
 8003718:	08003893 	.word	0x08003893
 800371c:	08003d21 	.word	0x08003d21
 8003720:	08003d21 	.word	0x08003d21
 8003724:	08003d21 	.word	0x08003d21
 8003728:	08003d21 	.word	0x08003d21
 800372c:	08003d21 	.word	0x08003d21
 8003730:	08003d21 	.word	0x08003d21
 8003734:	08003d21 	.word	0x08003d21
 8003738:	080038c9 	.word	0x080038c9
 800373c:	080038db 	.word	0x080038db
 8003740:	08003955 	.word	0x08003955
 8003744:	08003967 	.word	0x08003967
 8003748:	08003d21 	.word	0x08003d21
 800374c:	08003d21 	.word	0x08003d21
 8003750:	08003d21 	.word	0x08003d21
 8003754:	08003d21 	.word	0x08003d21
 8003758:	08003d21 	.word	0x08003d21
 800375c:	08003d21 	.word	0x08003d21
 8003760:	08003d21 	.word	0x08003d21
 8003764:	080038a5 	.word	0x080038a5
 8003768:	08003d21 	.word	0x08003d21
 800376c:	08003d21 	.word	0x08003d21
 8003770:	08003d21 	.word	0x08003d21
 8003774:	08003d21 	.word	0x08003d21
 8003778:	08003d21 	.word	0x08003d21
 800377c:	080038b7 	.word	0x080038b7
 8003780:	080037f1 	.word	0x080037f1
 8003784:	08003d21 	.word	0x08003d21
 8003788:	08003d21 	.word	0x08003d21
 800378c:	08003d21 	.word	0x08003d21
 8003790:	08003d21 	.word	0x08003d21
 8003794:	08003d21 	.word	0x08003d21
 8003798:	08003d21 	.word	0x08003d21
 800379c:	08003d21 	.word	0x08003d21
 80037a0:	08003d21 	.word	0x08003d21
 80037a4:	08003d21 	.word	0x08003d21
 80037a8:	08003d21 	.word	0x08003d21
 80037ac:	08003d21 	.word	0x08003d21
 80037b0:	08003d21 	.word	0x08003d21
 80037b4:	08003d21 	.word	0x08003d21
 80037b8:	08003979 	.word	0x08003979
 80037bc:	0800398b 	.word	0x0800398b
 80037c0:	0800399d 	.word	0x0800399d
 80037c4:	080039af 	.word	0x080039af
 80037c8:	080039c1 	.word	0x080039c1
 80037cc:	080039d3 	.word	0x080039d3
 80037d0:	080039e5 	.word	0x080039e5
 80037d4:	080039f7 	.word	0x080039f7
 80037d8:	08003a09 	.word	0x08003a09
 80037dc:	08003a1b 	.word	0x08003a1b
 80037e0:	08003a2d 	.word	0x08003a2d
 80037e4:	08003a3f 	.word	0x08003a3f
 80037e8:	08003a51 	.word	0x08003a51
 80037ec:	08003a63 	.word	0x08003a63
			case 'S':
				createChar(Loc, Space, Index);
 80037f0:	7afb      	ldrb	r3, [r7, #11]
 80037f2:	683a      	ldr	r2, [r7, #0]
 80037f4:	494a      	ldr	r1, [pc, #296]	; (8003920 <createInvertedWord+0x86c>)
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7ff fc46 	bl	8003088 <createChar>
				passed = true;
 80037fc:	2301      	movs	r3, #1
 80037fe:	77fb      	strb	r3, [r7, #31]
				break;
 8003800:	e293      	b.n	8003d2a <createInvertedWord+0xc76>
			case '1':
				createChar(Loc, shootingSpace_1_1, Index);
 8003802:	7afb      	ldrb	r3, [r7, #11]
 8003804:	683a      	ldr	r2, [r7, #0]
 8003806:	4947      	ldr	r1, [pc, #284]	; (8003924 <createInvertedWord+0x870>)
 8003808:	4618      	mov	r0, r3
 800380a:	f7ff fc3d 	bl	8003088 <createChar>
				passed = true;
 800380e:	2301      	movs	r3, #1
 8003810:	77fb      	strb	r3, [r7, #31]
				break;
 8003812:	e28a      	b.n	8003d2a <createInvertedWord+0xc76>
			case '2':
				createChar(Loc, shootingSpace_2_1, Index);
 8003814:	7afb      	ldrb	r3, [r7, #11]
 8003816:	683a      	ldr	r2, [r7, #0]
 8003818:	4943      	ldr	r1, [pc, #268]	; (8003928 <createInvertedWord+0x874>)
 800381a:	4618      	mov	r0, r3
 800381c:	f7ff fc34 	bl	8003088 <createChar>
				passed = true;
 8003820:	2301      	movs	r3, #1
 8003822:	77fb      	strb	r3, [r7, #31]
				break;
 8003824:	e281      	b.n	8003d2a <createInvertedWord+0xc76>
			case '3':
				createChar(Loc, shootingSpace_3_1, Index);
 8003826:	7afb      	ldrb	r3, [r7, #11]
 8003828:	683a      	ldr	r2, [r7, #0]
 800382a:	4940      	ldr	r1, [pc, #256]	; (800392c <createInvertedWord+0x878>)
 800382c:	4618      	mov	r0, r3
 800382e:	f7ff fc2b 	bl	8003088 <createChar>
				passed = true;
 8003832:	2301      	movs	r3, #1
 8003834:	77fb      	strb	r3, [r7, #31]
				break;
 8003836:	e278      	b.n	8003d2a <createInvertedWord+0xc76>
			case '4':
				createChar(Loc, shootingSpace_4_1, Index);
 8003838:	7afb      	ldrb	r3, [r7, #11]
 800383a:	683a      	ldr	r2, [r7, #0]
 800383c:	493c      	ldr	r1, [pc, #240]	; (8003930 <createInvertedWord+0x87c>)
 800383e:	4618      	mov	r0, r3
 8003840:	f7ff fc22 	bl	8003088 <createChar>
				passed = true;
 8003844:	2301      	movs	r3, #1
 8003846:	77fb      	strb	r3, [r7, #31]
				break;
 8003848:	e26f      	b.n	8003d2a <createInvertedWord+0xc76>
			case '5':
				createChar(Loc, shootingSpace_5_1, Index);
 800384a:	7afb      	ldrb	r3, [r7, #11]
 800384c:	683a      	ldr	r2, [r7, #0]
 800384e:	4939      	ldr	r1, [pc, #228]	; (8003934 <createInvertedWord+0x880>)
 8003850:	4618      	mov	r0, r3
 8003852:	f7ff fc19 	bl	8003088 <createChar>
				passed = true;
 8003856:	2301      	movs	r3, #1
 8003858:	77fb      	strb	r3, [r7, #31]
				break;
 800385a:	e266      	b.n	8003d2a <createInvertedWord+0xc76>
			case '6':
				createChar(Loc, shootingSpace_1_2, Index);
 800385c:	7afb      	ldrb	r3, [r7, #11]
 800385e:	683a      	ldr	r2, [r7, #0]
 8003860:	4935      	ldr	r1, [pc, #212]	; (8003938 <createInvertedWord+0x884>)
 8003862:	4618      	mov	r0, r3
 8003864:	f7ff fc10 	bl	8003088 <createChar>
				passed = true;
 8003868:	2301      	movs	r3, #1
 800386a:	77fb      	strb	r3, [r7, #31]
				break;
 800386c:	e25d      	b.n	8003d2a <createInvertedWord+0xc76>
			case '7':
				createChar(Loc, shootingSpace_2_2, Index);
 800386e:	7afb      	ldrb	r3, [r7, #11]
 8003870:	683a      	ldr	r2, [r7, #0]
 8003872:	4932      	ldr	r1, [pc, #200]	; (800393c <createInvertedWord+0x888>)
 8003874:	4618      	mov	r0, r3
 8003876:	f7ff fc07 	bl	8003088 <createChar>
				passed = true;
 800387a:	2301      	movs	r3, #1
 800387c:	77fb      	strb	r3, [r7, #31]
				break;
 800387e:	e254      	b.n	8003d2a <createInvertedWord+0xc76>
			case '8':
				createChar(Loc, shootingSpace_3_2, Index);
 8003880:	7afb      	ldrb	r3, [r7, #11]
 8003882:	683a      	ldr	r2, [r7, #0]
 8003884:	492e      	ldr	r1, [pc, #184]	; (8003940 <createInvertedWord+0x88c>)
 8003886:	4618      	mov	r0, r3
 8003888:	f7ff fbfe 	bl	8003088 <createChar>
				passed = true;
 800388c:	2301      	movs	r3, #1
 800388e:	77fb      	strb	r3, [r7, #31]
				break;
 8003890:	e24b      	b.n	8003d2a <createInvertedWord+0xc76>
			case '9':
				createChar(Loc, shootingSpace_3_2, Index);
 8003892:	7afb      	ldrb	r3, [r7, #11]
 8003894:	683a      	ldr	r2, [r7, #0]
 8003896:	492a      	ldr	r1, [pc, #168]	; (8003940 <createInvertedWord+0x88c>)
 8003898:	4618      	mov	r0, r3
 800389a:	f7ff fbf5 	bl	8003088 <createChar>
				passed = true;
 800389e:	2301      	movs	r3, #1
 80038a0:	77fb      	strb	r3, [r7, #31]
				break;
 80038a2:	e242      	b.n	8003d2a <createInvertedWord+0xc76>
			case 'L':
				createChar(Loc, enemyLeft, Index);
 80038a4:	7afb      	ldrb	r3, [r7, #11]
 80038a6:	683a      	ldr	r2, [r7, #0]
 80038a8:	4926      	ldr	r1, [pc, #152]	; (8003944 <createInvertedWord+0x890>)
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7ff fbec 	bl	8003088 <createChar>
				passed = true;
 80038b0:	2301      	movs	r3, #1
 80038b2:	77fb      	strb	r3, [r7, #31]
				break;
 80038b4:	e239      	b.n	8003d2a <createInvertedWord+0xc76>
			case 'R':
				createChar(Loc, enemyRight, Index);
 80038b6:	7afb      	ldrb	r3, [r7, #11]
 80038b8:	683a      	ldr	r2, [r7, #0]
 80038ba:	4923      	ldr	r1, [pc, #140]	; (8003948 <createInvertedWord+0x894>)
 80038bc:	4618      	mov	r0, r3
 80038be:	f7ff fbe3 	bl	8003088 <createChar>
				passed = true;
 80038c2:	2301      	movs	r3, #1
 80038c4:	77fb      	strb	r3, [r7, #31]
				break;
 80038c6:	e230      	b.n	8003d2a <createInvertedWord+0xc76>
			case 'A':
				createChar(Loc, enemyRight2, Index);
 80038c8:	7afb      	ldrb	r3, [r7, #11]
 80038ca:	683a      	ldr	r2, [r7, #0]
 80038cc:	491f      	ldr	r1, [pc, #124]	; (800394c <createInvertedWord+0x898>)
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7ff fbda 	bl	8003088 <createChar>
				passed = true;
 80038d4:	2301      	movs	r3, #1
 80038d6:	77fb      	strb	r3, [r7, #31]
				break;
 80038d8:	e227      	b.n	8003d2a <createInvertedWord+0xc76>
			case 'B':
				createChar(Loc, enemyLeft2, Index);
 80038da:	7afb      	ldrb	r3, [r7, #11]
 80038dc:	683a      	ldr	r2, [r7, #0]
 80038de:	491c      	ldr	r1, [pc, #112]	; (8003950 <createInvertedWord+0x89c>)
 80038e0:	4618      	mov	r0, r3
 80038e2:	f7ff fbd1 	bl	8003088 <createChar>
				passed = true;
 80038e6:	2301      	movs	r3, #1
 80038e8:	77fb      	strb	r3, [r7, #31]
				break;
 80038ea:	e21e      	b.n	8003d2a <createInvertedWord+0xc76>
 80038ec:	20000088 	.word	0x20000088
 80038f0:	20000090 	.word	0x20000090
 80038f4:	20000098 	.word	0x20000098
 80038f8:	200000a0 	.word	0x200000a0
 80038fc:	200000a8 	.word	0x200000a8
 8003900:	200000b0 	.word	0x200000b0
 8003904:	200000b8 	.word	0x200000b8
 8003908:	200000c0 	.word	0x200000c0
 800390c:	200000c8 	.word	0x200000c8
 8003910:	200000d0 	.word	0x200000d0
 8003914:	200001a8 	.word	0x200001a8
 8003918:	200001b0 	.word	0x200001b0
 800391c:	200000d8 	.word	0x200000d8
 8003920:	200001b8 	.word	0x200001b8
 8003924:	200001c0 	.word	0x200001c0
 8003928:	200001c8 	.word	0x200001c8
 800392c:	200001d0 	.word	0x200001d0
 8003930:	200001d8 	.word	0x200001d8
 8003934:	200001e0 	.word	0x200001e0
 8003938:	200001e8 	.word	0x200001e8
 800393c:	200001f0 	.word	0x200001f0
 8003940:	200001f8 	.word	0x200001f8
 8003944:	20000208 	.word	0x20000208
 8003948:	20000200 	.word	0x20000200
 800394c:	20000218 	.word	0x20000218
 8003950:	20000210 	.word	0x20000210
			case 'C':
				createChar(Loc, enemyLeft3, Index);
 8003954:	7afb      	ldrb	r3, [r7, #11]
 8003956:	683a      	ldr	r2, [r7, #0]
 8003958:	49c2      	ldr	r1, [pc, #776]	; (8003c64 <createInvertedWord+0xbb0>)
 800395a:	4618      	mov	r0, r3
 800395c:	f7ff fb94 	bl	8003088 <createChar>
				passed = true;
 8003960:	2301      	movs	r3, #1
 8003962:	77fb      	strb	r3, [r7, #31]
				break;
 8003964:	e1e1      	b.n	8003d2a <createInvertedWord+0xc76>
			case 'D':
				createChar(Loc, enemyLeft4, Index);
 8003966:	7afb      	ldrb	r3, [r7, #11]
 8003968:	683a      	ldr	r2, [r7, #0]
 800396a:	49bf      	ldr	r1, [pc, #764]	; (8003c68 <createInvertedWord+0xbb4>)
 800396c:	4618      	mov	r0, r3
 800396e:	f7ff fb8b 	bl	8003088 <createChar>
				passed = true;
 8003972:	2301      	movs	r3, #1
 8003974:	77fb      	strb	r3, [r7, #31]
				break;
 8003976:	e1d8      	b.n	8003d2a <createInvertedWord+0xc76>
			case 'a':
				createChar(Loc, enemy2Left, Index);
 8003978:	7afb      	ldrb	r3, [r7, #11]
 800397a:	683a      	ldr	r2, [r7, #0]
 800397c:	49bb      	ldr	r1, [pc, #748]	; (8003c6c <createInvertedWord+0xbb8>)
 800397e:	4618      	mov	r0, r3
 8003980:	f7ff fb82 	bl	8003088 <createChar>
				passed = true;
 8003984:	2301      	movs	r3, #1
 8003986:	77fb      	strb	r3, [r7, #31]
				break;
 8003988:	e1cf      	b.n	8003d2a <createInvertedWord+0xc76>
			case 'b':
				createChar(Loc, enemy2Left2, Index);
 800398a:	7afb      	ldrb	r3, [r7, #11]
 800398c:	683a      	ldr	r2, [r7, #0]
 800398e:	49b8      	ldr	r1, [pc, #736]	; (8003c70 <createInvertedWord+0xbbc>)
 8003990:	4618      	mov	r0, r3
 8003992:	f7ff fb79 	bl	8003088 <createChar>
				passed = true;
 8003996:	2301      	movs	r3, #1
 8003998:	77fb      	strb	r3, [r7, #31]
				break;
 800399a:	e1c6      	b.n	8003d2a <createInvertedWord+0xc76>
			case 'c':
				createChar(Loc, enemy2Left3, Index);
 800399c:	7afb      	ldrb	r3, [r7, #11]
 800399e:	683a      	ldr	r2, [r7, #0]
 80039a0:	49b4      	ldr	r1, [pc, #720]	; (8003c74 <createInvertedWord+0xbc0>)
 80039a2:	4618      	mov	r0, r3
 80039a4:	f7ff fb70 	bl	8003088 <createChar>
				passed = true;
 80039a8:	2301      	movs	r3, #1
 80039aa:	77fb      	strb	r3, [r7, #31]
				break;
 80039ac:	e1bd      	b.n	8003d2a <createInvertedWord+0xc76>
			case 'd':
				createChar(Loc, enemy2Left4, Index);
 80039ae:	7afb      	ldrb	r3, [r7, #11]
 80039b0:	683a      	ldr	r2, [r7, #0]
 80039b2:	49b1      	ldr	r1, [pc, #708]	; (8003c78 <createInvertedWord+0xbc4>)
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7ff fb67 	bl	8003088 <createChar>
				passed = true;
 80039ba:	2301      	movs	r3, #1
 80039bc:	77fb      	strb	r3, [r7, #31]
				break;
 80039be:	e1b4      	b.n	8003d2a <createInvertedWord+0xc76>
			case 'e':
				createChar(Loc, enemy2Left5, Index);
 80039c0:	7afb      	ldrb	r3, [r7, #11]
 80039c2:	683a      	ldr	r2, [r7, #0]
 80039c4:	49ad      	ldr	r1, [pc, #692]	; (8003c7c <createInvertedWord+0xbc8>)
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7ff fb5e 	bl	8003088 <createChar>
				passed = true;
 80039cc:	2301      	movs	r3, #1
 80039ce:	77fb      	strb	r3, [r7, #31]
				break;
 80039d0:	e1ab      	b.n	8003d2a <createInvertedWord+0xc76>
			case 'f':
				createChar(Loc, enemy2Right, Index);
 80039d2:	7afb      	ldrb	r3, [r7, #11]
 80039d4:	683a      	ldr	r2, [r7, #0]
 80039d6:	49aa      	ldr	r1, [pc, #680]	; (8003c80 <createInvertedWord+0xbcc>)
 80039d8:	4618      	mov	r0, r3
 80039da:	f7ff fb55 	bl	8003088 <createChar>
				passed = true;
 80039de:	2301      	movs	r3, #1
 80039e0:	77fb      	strb	r3, [r7, #31]
				break;
 80039e2:	e1a2      	b.n	8003d2a <createInvertedWord+0xc76>
			case 'g':
				createChar(Loc, enemy2Right2, Index);
 80039e4:	7afb      	ldrb	r3, [r7, #11]
 80039e6:	683a      	ldr	r2, [r7, #0]
 80039e8:	49a6      	ldr	r1, [pc, #664]	; (8003c84 <createInvertedWord+0xbd0>)
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7ff fb4c 	bl	8003088 <createChar>
				passed = true;
 80039f0:	2301      	movs	r3, #1
 80039f2:	77fb      	strb	r3, [r7, #31]
				break;
 80039f4:	e199      	b.n	8003d2a <createInvertedWord+0xc76>
			case 'h':
				createChar(Loc, enemy2Right3, Index);
 80039f6:	7afb      	ldrb	r3, [r7, #11]
 80039f8:	683a      	ldr	r2, [r7, #0]
 80039fa:	49a3      	ldr	r1, [pc, #652]	; (8003c88 <createInvertedWord+0xbd4>)
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7ff fb43 	bl	8003088 <createChar>
				passed = true;
 8003a02:	2301      	movs	r3, #1
 8003a04:	77fb      	strb	r3, [r7, #31]
				break;
 8003a06:	e190      	b.n	8003d2a <createInvertedWord+0xc76>
			case 'i':
				createChar(Loc, enemy2Right4, Index);
 8003a08:	7afb      	ldrb	r3, [r7, #11]
 8003a0a:	683a      	ldr	r2, [r7, #0]
 8003a0c:	499f      	ldr	r1, [pc, #636]	; (8003c8c <createInvertedWord+0xbd8>)
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7ff fb3a 	bl	8003088 <createChar>
				passed = true;
 8003a14:	2301      	movs	r3, #1
 8003a16:	77fb      	strb	r3, [r7, #31]
				break;
 8003a18:	e187      	b.n	8003d2a <createInvertedWord+0xc76>
			case 'j':
				createChar(Loc, enemy2Right5, Index);
 8003a1a:	7afb      	ldrb	r3, [r7, #11]
 8003a1c:	683a      	ldr	r2, [r7, #0]
 8003a1e:	499c      	ldr	r1, [pc, #624]	; (8003c90 <createInvertedWord+0xbdc>)
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7ff fb31 	bl	8003088 <createChar>
				passed = true;
 8003a26:	2301      	movs	r3, #1
 8003a28:	77fb      	strb	r3, [r7, #31]
				break;
 8003a2a:	e17e      	b.n	8003d2a <createInvertedWord+0xc76>
			case 'k':
				createChar(Loc, enemy3Right, Index);
 8003a2c:	7afb      	ldrb	r3, [r7, #11]
 8003a2e:	683a      	ldr	r2, [r7, #0]
 8003a30:	4998      	ldr	r1, [pc, #608]	; (8003c94 <createInvertedWord+0xbe0>)
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7ff fb28 	bl	8003088 <createChar>
				passed = true;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	77fb      	strb	r3, [r7, #31]
				break;
 8003a3c:	e175      	b.n	8003d2a <createInvertedWord+0xc76>
			case 'l':
				createChar(Loc, enemy3Right2, Index);
 8003a3e:	7afb      	ldrb	r3, [r7, #11]
 8003a40:	683a      	ldr	r2, [r7, #0]
 8003a42:	4995      	ldr	r1, [pc, #596]	; (8003c98 <createInvertedWord+0xbe4>)
 8003a44:	4618      	mov	r0, r3
 8003a46:	f7ff fb1f 	bl	8003088 <createChar>
				passed = true;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	77fb      	strb	r3, [r7, #31]
				break;
 8003a4e:	e16c      	b.n	8003d2a <createInvertedWord+0xc76>
			case 'm':
				createChar(Loc, enemy3Right3, Index);
 8003a50:	7afb      	ldrb	r3, [r7, #11]
 8003a52:	683a      	ldr	r2, [r7, #0]
 8003a54:	4991      	ldr	r1, [pc, #580]	; (8003c9c <createInvertedWord+0xbe8>)
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7ff fb16 	bl	8003088 <createChar>
				passed = true;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	77fb      	strb	r3, [r7, #31]
				break;
 8003a60:	e163      	b.n	8003d2a <createInvertedWord+0xc76>
			case 'n':
				createChar(Loc, enemy3Right4, Index);
 8003a62:	7afb      	ldrb	r3, [r7, #11]
 8003a64:	683a      	ldr	r2, [r7, #0]
 8003a66:	498e      	ldr	r1, [pc, #568]	; (8003ca0 <createInvertedWord+0xbec>)
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f7ff fb0d 	bl	8003088 <createChar>
				passed = true;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	77fb      	strb	r3, [r7, #31]
				break;
 8003a72:	e15a      	b.n	8003d2a <createInvertedWord+0xc76>
			default:
				break;
			}
		} else if (Section == 2) {
 8003a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	f040 8154 	bne.w	8003d24 <createInvertedWord+0xc70>
			switch (Symbol) {
 8003a7c:	7dbb      	ldrb	r3, [r7, #22]
 8003a7e:	3b30      	subs	r3, #48	; 0x30
 8003a80:	2b3f      	cmp	r3, #63	; 0x3f
 8003a82:	f200 8151 	bhi.w	8003d28 <createInvertedWord+0xc74>
 8003a86:	a201      	add	r2, pc, #4	; (adr r2, 8003a8c <createInvertedWord+0x9d8>)
 8003a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a8c:	08003c2f 	.word	0x08003c2f
 8003a90:	08003b8d 	.word	0x08003b8d
 8003a94:	08003b9f 	.word	0x08003b9f
 8003a98:	08003bb1 	.word	0x08003bb1
 8003a9c:	08003bc3 	.word	0x08003bc3
 8003aa0:	08003bd5 	.word	0x08003bd5
 8003aa4:	08003be7 	.word	0x08003be7
 8003aa8:	08003bf9 	.word	0x08003bf9
 8003aac:	08003c0b 	.word	0x08003c0b
 8003ab0:	08003c1d 	.word	0x08003c1d
 8003ab4:	08003d29 	.word	0x08003d29
 8003ab8:	08003d29 	.word	0x08003d29
 8003abc:	08003d29 	.word	0x08003d29
 8003ac0:	08003d29 	.word	0x08003d29
 8003ac4:	08003d29 	.word	0x08003d29
 8003ac8:	08003d29 	.word	0x08003d29
 8003acc:	08003d29 	.word	0x08003d29
 8003ad0:	08003c41 	.word	0x08003c41
 8003ad4:	08003c53 	.word	0x08003c53
 8003ad8:	08003cd5 	.word	0x08003cd5
 8003adc:	08003ce7 	.word	0x08003ce7
 8003ae0:	08003d29 	.word	0x08003d29
 8003ae4:	08003d29 	.word	0x08003d29
 8003ae8:	08003d29 	.word	0x08003d29
 8003aec:	08003d29 	.word	0x08003d29
 8003af0:	08003d29 	.word	0x08003d29
 8003af4:	08003d29 	.word	0x08003d29
 8003af8:	08003d29 	.word	0x08003d29
 8003afc:	08003d29 	.word	0x08003d29
 8003b00:	08003d29 	.word	0x08003d29
 8003b04:	08003d29 	.word	0x08003d29
 8003b08:	08003d29 	.word	0x08003d29
 8003b0c:	08003d29 	.word	0x08003d29
 8003b10:	08003d29 	.word	0x08003d29
 8003b14:	08003d29 	.word	0x08003d29
 8003b18:	08003d29 	.word	0x08003d29
 8003b1c:	08003d29 	.word	0x08003d29
 8003b20:	08003d29 	.word	0x08003d29
 8003b24:	08003d29 	.word	0x08003d29
 8003b28:	08003d29 	.word	0x08003d29
 8003b2c:	08003d29 	.word	0x08003d29
 8003b30:	08003d29 	.word	0x08003d29
 8003b34:	08003d29 	.word	0x08003d29
 8003b38:	08003d29 	.word	0x08003d29
 8003b3c:	08003d29 	.word	0x08003d29
 8003b40:	08003d29 	.word	0x08003d29
 8003b44:	08003d29 	.word	0x08003d29
 8003b48:	08003d29 	.word	0x08003d29
 8003b4c:	08003d29 	.word	0x08003d29
 8003b50:	08003d29 	.word	0x08003d29
 8003b54:	08003d29 	.word	0x08003d29
 8003b58:	08003d29 	.word	0x08003d29
 8003b5c:	08003d29 	.word	0x08003d29
 8003b60:	08003d29 	.word	0x08003d29
 8003b64:	08003d29 	.word	0x08003d29
 8003b68:	08003d29 	.word	0x08003d29
 8003b6c:	08003d29 	.word	0x08003d29
 8003b70:	08003d29 	.word	0x08003d29
 8003b74:	08003d29 	.word	0x08003d29
 8003b78:	08003d29 	.word	0x08003d29
 8003b7c:	08003cf9 	.word	0x08003cf9
 8003b80:	08003d29 	.word	0x08003d29
 8003b84:	08003d29 	.word	0x08003d29
 8003b88:	08003d0b 	.word	0x08003d0b
			case '1':
				createChar(Loc, ienemy2Left, Index);
 8003b8c:	7afb      	ldrb	r3, [r7, #11]
 8003b8e:	683a      	ldr	r2, [r7, #0]
 8003b90:	4944      	ldr	r1, [pc, #272]	; (8003ca4 <createInvertedWord+0xbf0>)
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7ff fa78 	bl	8003088 <createChar>
				passed = true;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	77fb      	strb	r3, [r7, #31]
				break;
 8003b9c:	e0c5      	b.n	8003d2a <createInvertedWord+0xc76>
			case '2':
				createChar(Loc, ienemy2Left2, Index);
 8003b9e:	7afb      	ldrb	r3, [r7, #11]
 8003ba0:	683a      	ldr	r2, [r7, #0]
 8003ba2:	4941      	ldr	r1, [pc, #260]	; (8003ca8 <createInvertedWord+0xbf4>)
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f7ff fa6f 	bl	8003088 <createChar>
				passed = true;
 8003baa:	2301      	movs	r3, #1
 8003bac:	77fb      	strb	r3, [r7, #31]
				break;
 8003bae:	e0bc      	b.n	8003d2a <createInvertedWord+0xc76>
			case '3':
				createChar(Loc, ienemy2Left3, Index);
 8003bb0:	7afb      	ldrb	r3, [r7, #11]
 8003bb2:	683a      	ldr	r2, [r7, #0]
 8003bb4:	493d      	ldr	r1, [pc, #244]	; (8003cac <createInvertedWord+0xbf8>)
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7ff fa66 	bl	8003088 <createChar>
				passed = true;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	77fb      	strb	r3, [r7, #31]
				break;
 8003bc0:	e0b3      	b.n	8003d2a <createInvertedWord+0xc76>
			case '4':
				createChar(Loc, ienemy2Left4, Index);
 8003bc2:	7afb      	ldrb	r3, [r7, #11]
 8003bc4:	683a      	ldr	r2, [r7, #0]
 8003bc6:	493a      	ldr	r1, [pc, #232]	; (8003cb0 <createInvertedWord+0xbfc>)
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f7ff fa5d 	bl	8003088 <createChar>
				passed = true;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	77fb      	strb	r3, [r7, #31]
				break;
 8003bd2:	e0aa      	b.n	8003d2a <createInvertedWord+0xc76>
			case '5':
				createChar(Loc, ienemy2Left5, Index);
 8003bd4:	7afb      	ldrb	r3, [r7, #11]
 8003bd6:	683a      	ldr	r2, [r7, #0]
 8003bd8:	4936      	ldr	r1, [pc, #216]	; (8003cb4 <createInvertedWord+0xc00>)
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f7ff fa54 	bl	8003088 <createChar>
				passed = true;
 8003be0:	2301      	movs	r3, #1
 8003be2:	77fb      	strb	r3, [r7, #31]
				break;
 8003be4:	e0a1      	b.n	8003d2a <createInvertedWord+0xc76>
			case '6':
				createChar(Loc, ienemy2Right, Index);
 8003be6:	7afb      	ldrb	r3, [r7, #11]
 8003be8:	683a      	ldr	r2, [r7, #0]
 8003bea:	4933      	ldr	r1, [pc, #204]	; (8003cb8 <createInvertedWord+0xc04>)
 8003bec:	4618      	mov	r0, r3
 8003bee:	f7ff fa4b 	bl	8003088 <createChar>
				passed = true;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	77fb      	strb	r3, [r7, #31]
				break;
 8003bf6:	e098      	b.n	8003d2a <createInvertedWord+0xc76>
			case '7':
				createChar(Loc, ienemy2Right2, Index);
 8003bf8:	7afb      	ldrb	r3, [r7, #11]
 8003bfa:	683a      	ldr	r2, [r7, #0]
 8003bfc:	492f      	ldr	r1, [pc, #188]	; (8003cbc <createInvertedWord+0xc08>)
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7ff fa42 	bl	8003088 <createChar>
				passed = true;
 8003c04:	2301      	movs	r3, #1
 8003c06:	77fb      	strb	r3, [r7, #31]
				break;
 8003c08:	e08f      	b.n	8003d2a <createInvertedWord+0xc76>
			case '8':
				createChar(Loc, ienemy2Right3, Index);
 8003c0a:	7afb      	ldrb	r3, [r7, #11]
 8003c0c:	683a      	ldr	r2, [r7, #0]
 8003c0e:	492c      	ldr	r1, [pc, #176]	; (8003cc0 <createInvertedWord+0xc0c>)
 8003c10:	4618      	mov	r0, r3
 8003c12:	f7ff fa39 	bl	8003088 <createChar>
				passed = true;
 8003c16:	2301      	movs	r3, #1
 8003c18:	77fb      	strb	r3, [r7, #31]
				break;
 8003c1a:	e086      	b.n	8003d2a <createInvertedWord+0xc76>
			case '9':
				createChar(Loc, ienemy2Right4, Index);
 8003c1c:	7afb      	ldrb	r3, [r7, #11]
 8003c1e:	683a      	ldr	r2, [r7, #0]
 8003c20:	4928      	ldr	r1, [pc, #160]	; (8003cc4 <createInvertedWord+0xc10>)
 8003c22:	4618      	mov	r0, r3
 8003c24:	f7ff fa30 	bl	8003088 <createChar>
				passed = true;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	77fb      	strb	r3, [r7, #31]
				break;
 8003c2c:	e07d      	b.n	8003d2a <createInvertedWord+0xc76>
			case '0':
				createChar(Loc, ienemy2Right5, Index);
 8003c2e:	7afb      	ldrb	r3, [r7, #11]
 8003c30:	683a      	ldr	r2, [r7, #0]
 8003c32:	4925      	ldr	r1, [pc, #148]	; (8003cc8 <createInvertedWord+0xc14>)
 8003c34:	4618      	mov	r0, r3
 8003c36:	f7ff fa27 	bl	8003088 <createChar>
				passed = true;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	77fb      	strb	r3, [r7, #31]
				break;
 8003c3e:	e074      	b.n	8003d2a <createInvertedWord+0xc76>
			case 'A':
				createChar(Loc, ienemy3Right, Index);
 8003c40:	7afb      	ldrb	r3, [r7, #11]
 8003c42:	683a      	ldr	r2, [r7, #0]
 8003c44:	4921      	ldr	r1, [pc, #132]	; (8003ccc <createInvertedWord+0xc18>)
 8003c46:	4618      	mov	r0, r3
 8003c48:	f7ff fa1e 	bl	8003088 <createChar>
				passed = true;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	77fb      	strb	r3, [r7, #31]
				break;
 8003c50:	e06b      	b.n	8003d2a <createInvertedWord+0xc76>
			case 'B':
				createChar(Loc, ienemy3Right2, Index);
 8003c52:	7afb      	ldrb	r3, [r7, #11]
 8003c54:	683a      	ldr	r2, [r7, #0]
 8003c56:	491e      	ldr	r1, [pc, #120]	; (8003cd0 <createInvertedWord+0xc1c>)
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f7ff fa15 	bl	8003088 <createChar>
				passed = true;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	77fb      	strb	r3, [r7, #31]
				break;
 8003c62:	e062      	b.n	8003d2a <createInvertedWord+0xc76>
 8003c64:	20000220 	.word	0x20000220
 8003c68:	20000228 	.word	0x20000228
 8003c6c:	20000230 	.word	0x20000230
 8003c70:	20000238 	.word	0x20000238
 8003c74:	20000240 	.word	0x20000240
 8003c78:	20000248 	.word	0x20000248
 8003c7c:	20000250 	.word	0x20000250
 8003c80:	20000258 	.word	0x20000258
 8003c84:	20000260 	.word	0x20000260
 8003c88:	20000268 	.word	0x20000268
 8003c8c:	20000270 	.word	0x20000270
 8003c90:	20000278 	.word	0x20000278
 8003c94:	20000280 	.word	0x20000280
 8003c98:	20000288 	.word	0x20000288
 8003c9c:	20000290 	.word	0x20000290
 8003ca0:	20000298 	.word	0x20000298
 8003ca4:	200002a0 	.word	0x200002a0
 8003ca8:	200002a8 	.word	0x200002a8
 8003cac:	200002b0 	.word	0x200002b0
 8003cb0:	200002b8 	.word	0x200002b8
 8003cb4:	200002c0 	.word	0x200002c0
 8003cb8:	200002c8 	.word	0x200002c8
 8003cbc:	200002d0 	.word	0x200002d0
 8003cc0:	200002d8 	.word	0x200002d8
 8003cc4:	200002e0 	.word	0x200002e0
 8003cc8:	200002e8 	.word	0x200002e8
 8003ccc:	200002f0 	.word	0x200002f0
 8003cd0:	200002f8 	.word	0x200002f8
			case 'C':
				createChar(Loc, ienemy3Right3, Index);
 8003cd4:	7afb      	ldrb	r3, [r7, #11]
 8003cd6:	683a      	ldr	r2, [r7, #0]
 8003cd8:	491a      	ldr	r1, [pc, #104]	; (8003d44 <createInvertedWord+0xc90>)
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7ff f9d4 	bl	8003088 <createChar>
				passed = true;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	77fb      	strb	r3, [r7, #31]
				break;
 8003ce4:	e021      	b.n	8003d2a <createInvertedWord+0xc76>
			case 'D':
				createChar(Loc, ienemy3Right4, Index);
 8003ce6:	7afb      	ldrb	r3, [r7, #11]
 8003ce8:	683a      	ldr	r2, [r7, #0]
 8003cea:	4917      	ldr	r1, [pc, #92]	; (8003d48 <createInvertedWord+0xc94>)
 8003cec:	4618      	mov	r0, r3
 8003cee:	f7ff f9cb 	bl	8003088 <createChar>
				passed = true;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	77fb      	strb	r3, [r7, #31]
				break;
 8003cf6:	e018      	b.n	8003d2a <createInvertedWord+0xc76>
			case 'l':
				createChar(Loc, line, Index);
 8003cf8:	7afb      	ldrb	r3, [r7, #11]
 8003cfa:	683a      	ldr	r2, [r7, #0]
 8003cfc:	4913      	ldr	r1, [pc, #76]	; (8003d4c <createInvertedWord+0xc98>)
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f7ff f9c2 	bl	8003088 <createChar>
				passed = true;
 8003d04:	2301      	movs	r3, #1
 8003d06:	77fb      	strb	r3, [r7, #31]
				break;
 8003d08:	e00f      	b.n	8003d2a <createInvertedWord+0xc76>
			case 'o':
				createChar(Loc, left_arrow, Index);
 8003d0a:	7afb      	ldrb	r3, [r7, #11]
 8003d0c:	683a      	ldr	r2, [r7, #0]
 8003d0e:	4910      	ldr	r1, [pc, #64]	; (8003d50 <createInvertedWord+0xc9c>)
 8003d10:	4618      	mov	r0, r3
 8003d12:	f7ff f9b9 	bl	8003088 <createChar>
				passed = true;
 8003d16:	2301      	movs	r3, #1
 8003d18:	77fb      	strb	r3, [r7, #31]
				break;
 8003d1a:	e006      	b.n	8003d2a <createInvertedWord+0xc76>
				break;
 8003d1c:	bf00      	nop
 8003d1e:	e004      	b.n	8003d2a <createInvertedWord+0xc76>
				break;
 8003d20:	bf00      	nop
 8003d22:	e002      	b.n	8003d2a <createInvertedWord+0xc76>
			default:
				break;
			}
		}
 8003d24:	bf00      	nop
 8003d26:	e000      	b.n	8003d2a <createInvertedWord+0xc76>
				break;
 8003d28:	bf00      	nop
	for (int i = 0; i < Length; i++) {
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	61bb      	str	r3, [r7, #24]
 8003d30:	69ba      	ldr	r2, [r7, #24]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	f6ff a9cd 	blt.w	80030d4 <createInvertedWord+0x20>
	}
}
 8003d3a:	bf00      	nop
 8003d3c:	3720      	adds	r7, #32
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	20000300 	.word	0x20000300
 8003d48:	20000308 	.word	0x20000308
 8003d4c:	20000310 	.word	0x20000310
 8003d50:	20000318 	.word	0x20000318

08003d54 <lcd_clear_1>:
#include "lcdcommands.h"

void lcd_clear_1()
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	af00      	add	r7, sp, #0
	LCD_SetLocalization(0x00);
 8003d58:	2000      	movs	r0, #0
 8003d5a:	f000 f881 	bl	8003e60 <LCD_SetLocalization>
	LCD_SendWord("                    ");
 8003d5e:	4802      	ldr	r0, [pc, #8]	; (8003d68 <lcd_clear_1+0x14>)
 8003d60:	f000 f88e 	bl	8003e80 <LCD_SendWord>
}
 8003d64:	bf00      	nop
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	0800ad20 	.word	0x0800ad20

08003d6c <lcd_clear_2>:
void lcd_clear_2()
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	af00      	add	r7, sp, #0
	LCD_SetLocalization(0x40);
 8003d70:	2040      	movs	r0, #64	; 0x40
 8003d72:	f000 f875 	bl	8003e60 <LCD_SetLocalization>
	LCD_SendWord("                    ");
 8003d76:	4802      	ldr	r0, [pc, #8]	; (8003d80 <lcd_clear_2+0x14>)
 8003d78:	f000 f882 	bl	8003e80 <LCD_SendWord>
}
 8003d7c:	bf00      	nop
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	0800ad20 	.word	0x0800ad20

08003d84 <lcd_clear_3>:
void lcd_clear_3()
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	af00      	add	r7, sp, #0
	LCD_SetLocalization(0x14);
 8003d88:	2014      	movs	r0, #20
 8003d8a:	f000 f869 	bl	8003e60 <LCD_SetLocalization>
	LCD_SendWord("                    ");
 8003d8e:	4802      	ldr	r0, [pc, #8]	; (8003d98 <lcd_clear_3+0x14>)
 8003d90:	f000 f876 	bl	8003e80 <LCD_SendWord>
}
 8003d94:	bf00      	nop
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	0800ad20 	.word	0x0800ad20

08003d9c <lcd_clear_4>:
void lcd_clear_4()
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	af00      	add	r7, sp, #0
	LCD_SetLocalization(0x54);
 8003da0:	2054      	movs	r0, #84	; 0x54
 8003da2:	f000 f85d 	bl	8003e60 <LCD_SetLocalization>
	LCD_SendWord("                    ");
 8003da6:	4802      	ldr	r0, [pc, #8]	; (8003db0 <lcd_clear_4+0x14>)
 8003da8:	f000 f86a 	bl	8003e80 <LCD_SendWord>
}
 8003dac:	bf00      	nop
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	0800ad20 	.word	0x0800ad20

08003db4 <lcd_cls>:
void lcd_cls()
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	af00      	add	r7, sp, #0
	LCD_SetLocalization(0x00);
 8003db8:	2000      	movs	r0, #0
 8003dba:	f000 f851 	bl	8003e60 <LCD_SetLocalization>
	LCD_SendWord("                    ");
 8003dbe:	480b      	ldr	r0, [pc, #44]	; (8003dec <lcd_cls+0x38>)
 8003dc0:	f000 f85e 	bl	8003e80 <LCD_SendWord>
	LCD_SetLocalization(0x40);
 8003dc4:	2040      	movs	r0, #64	; 0x40
 8003dc6:	f000 f84b 	bl	8003e60 <LCD_SetLocalization>
	LCD_SendWord("                    ");
 8003dca:	4808      	ldr	r0, [pc, #32]	; (8003dec <lcd_cls+0x38>)
 8003dcc:	f000 f858 	bl	8003e80 <LCD_SendWord>
	LCD_SetLocalization(0x14);
 8003dd0:	2014      	movs	r0, #20
 8003dd2:	f000 f845 	bl	8003e60 <LCD_SetLocalization>
	LCD_SendWord("                    ");
 8003dd6:	4805      	ldr	r0, [pc, #20]	; (8003dec <lcd_cls+0x38>)
 8003dd8:	f000 f852 	bl	8003e80 <LCD_SendWord>
	LCD_SetLocalization(0x54);
 8003ddc:	2054      	movs	r0, #84	; 0x54
 8003dde:	f000 f83f 	bl	8003e60 <LCD_SetLocalization>
	LCD_SendWord("                    ");
 8003de2:	4802      	ldr	r0, [pc, #8]	; (8003dec <lcd_cls+0x38>)
 8003de4:	f000 f84c 	bl	8003e80 <LCD_SendWord>
}
 8003de8:	bf00      	nop
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	0800ad20 	.word	0x0800ad20

08003df0 <lcd_special_cls>:
void lcd_special_cls()
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	af00      	add	r7, sp, #0
	LCD_SetLocalization(0x00);
 8003df4:	2000      	movs	r0, #0
 8003df6:	f000 f833 	bl	8003e60 <LCD_SetLocalization>
	LCD_SendWord("                   ");
 8003dfa:	480b      	ldr	r0, [pc, #44]	; (8003e28 <lcd_special_cls+0x38>)
 8003dfc:	f000 f840 	bl	8003e80 <LCD_SendWord>
	LCD_SetLocalization(0x40);
 8003e00:	2040      	movs	r0, #64	; 0x40
 8003e02:	f000 f82d 	bl	8003e60 <LCD_SetLocalization>
	LCD_SendWord("                    ");
 8003e06:	4809      	ldr	r0, [pc, #36]	; (8003e2c <lcd_special_cls+0x3c>)
 8003e08:	f000 f83a 	bl	8003e80 <LCD_SendWord>
	LCD_SetLocalization(0x14);
 8003e0c:	2014      	movs	r0, #20
 8003e0e:	f000 f827 	bl	8003e60 <LCD_SetLocalization>
	LCD_SendWord("                   ");
 8003e12:	4805      	ldr	r0, [pc, #20]	; (8003e28 <lcd_special_cls+0x38>)
 8003e14:	f000 f834 	bl	8003e80 <LCD_SendWord>
	LCD_SetLocalization(0x54);
 8003e18:	2054      	movs	r0, #84	; 0x54
 8003e1a:	f000 f821 	bl	8003e60 <LCD_SetLocalization>
	LCD_SendWord("                   ");
 8003e1e:	4802      	ldr	r0, [pc, #8]	; (8003e28 <lcd_special_cls+0x38>)
 8003e20:	f000 f82e 	bl	8003e80 <LCD_SendWord>
}
 8003e24:	bf00      	nop
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	0800ad38 	.word	0x0800ad38
 8003e2c:	0800ad20 	.word	0x0800ad20

08003e30 <lcd_clear_3_8_lines>:
{
	LCD_SetLocalization(0x40);
	LCD_SendWord("        ");
}
void lcd_clear_3_8_lines()
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	af00      	add	r7, sp, #0
	LCD_SetLocalization(0x14);
 8003e34:	2014      	movs	r0, #20
 8003e36:	f000 f813 	bl	8003e60 <LCD_SetLocalization>
	LCD_SendWord("        ");
 8003e3a:	4802      	ldr	r0, [pc, #8]	; (8003e44 <lcd_clear_3_8_lines+0x14>)
 8003e3c:	f000 f820 	bl	8003e80 <LCD_SendWord>
}
 8003e40:	bf00      	nop
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	0800ad4c 	.word	0x0800ad4c

08003e48 <lcd_clear_4_8_lines>:
void lcd_clear_4_8_lines()
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	af00      	add	r7, sp, #0
	LCD_SetLocalization(0x54);
 8003e4c:	2054      	movs	r0, #84	; 0x54
 8003e4e:	f000 f807 	bl	8003e60 <LCD_SetLocalization>
	LCD_SendWord("        ");
 8003e52:	4802      	ldr	r0, [pc, #8]	; (8003e5c <lcd_clear_4_8_lines+0x14>)
 8003e54:	f000 f814 	bl	8003e80 <LCD_SendWord>
}
 8003e58:	bf00      	nop
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	0800ad4c 	.word	0x0800ad4c

08003e60 <LCD_SetLocalization>:

void LCD_SetLocalization(char Loc)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b082      	sub	sp, #8
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	4603      	mov	r3, r0
 8003e68:	71fb      	strb	r3, [r7, #7]
	lcd_send_cmd(0x80 | Loc);
 8003e6a:	79fb      	ldrb	r3, [r7, #7]
 8003e6c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	4618      	mov	r0, r3
 8003e74:	f7fe fb78 	bl	8002568 <lcd_send_cmd>
}
 8003e78:	bf00      	nop
 8003e7a:	3708      	adds	r7, #8
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <LCD_SendWord>:

void LCD_SendWord(char *Word)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
	while (*Word)
 8003e88:	e006      	b.n	8003e98 <LCD_SendWord+0x18>
		lcd_send_data(*Word++);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	1c5a      	adds	r2, r3, #1
 8003e8e:	607a      	str	r2, [r7, #4]
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	4618      	mov	r0, r3
 8003e94:	f7fe fb98 	bl	80025c8 <lcd_send_data>
	while (*Word)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d1f4      	bne.n	8003e8a <LCD_SendWord+0xa>
}
 8003ea0:	bf00      	nop
 8003ea2:	3708      	adds	r7, #8
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <printDots>:
#include "stdbool.h"
#include "loading.h"
volatile int iDot = 0, iSpace = -1, iSpace2 = 0;
bool dots = false, miniDuel = false, enemySpace = false;
bool gameStarted = false;
void printDots() {
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	af00      	add	r7, sp, #0
	switch (iDot) {
 8003eac:	4b35      	ldr	r3, [pc, #212]	; (8003f84 <printDots+0xdc>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2b07      	cmp	r3, #7
 8003eb2:	d84f      	bhi.n	8003f54 <printDots+0xac>
 8003eb4:	a201      	add	r2, pc, #4	; (adr r2, 8003ebc <printDots+0x14>)
 8003eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eba:	bf00      	nop
 8003ebc:	08003edd 	.word	0x08003edd
 8003ec0:	08003eef 	.word	0x08003eef
 8003ec4:	08003efd 	.word	0x08003efd
 8003ec8:	08003f0b 	.word	0x08003f0b
 8003ecc:	08003f19 	.word	0x08003f19
 8003ed0:	08003f2b 	.word	0x08003f2b
 8003ed4:	08003f39 	.word	0x08003f39
 8003ed8:	08003f47 	.word	0x08003f47
	case 0:
		LCD_SetLocalization(0x21);
 8003edc:	2021      	movs	r0, #33	; 0x21
 8003ede:	f7ff ffbf 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord(".");
 8003ee2:	4829      	ldr	r0, [pc, #164]	; (8003f88 <printDots+0xe0>)
 8003ee4:	f7ff ffcc 	bl	8003e80 <LCD_SendWord>
		lcd_clear_1();
 8003ee8:	f7ff ff34 	bl	8003d54 <lcd_clear_1>
		break;
 8003eec:	e033      	b.n	8003f56 <printDots+0xae>
	case 1:
		LCD_SetLocalization(0x22);
 8003eee:	2022      	movs	r0, #34	; 0x22
 8003ef0:	f7ff ffb6 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord(".");
 8003ef4:	4824      	ldr	r0, [pc, #144]	; (8003f88 <printDots+0xe0>)
 8003ef6:	f7ff ffc3 	bl	8003e80 <LCD_SendWord>
		break;
 8003efa:	e02c      	b.n	8003f56 <printDots+0xae>
	case 2:
		LCD_SetLocalization(0x23);
 8003efc:	2023      	movs	r0, #35	; 0x23
 8003efe:	f7ff ffaf 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord(".");
 8003f02:	4821      	ldr	r0, [pc, #132]	; (8003f88 <printDots+0xe0>)
 8003f04:	f7ff ffbc 	bl	8003e80 <LCD_SendWord>
		break;
 8003f08:	e025      	b.n	8003f56 <printDots+0xae>
	case 3:
		LCD_SetLocalization(0x21);
 8003f0a:	2021      	movs	r0, #33	; 0x21
 8003f0c:	f7ff ffa8 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("   ");
 8003f10:	481e      	ldr	r0, [pc, #120]	; (8003f8c <printDots+0xe4>)
 8003f12:	f7ff ffb5 	bl	8003e80 <LCD_SendWord>
		break;
 8003f16:	e01e      	b.n	8003f56 <printDots+0xae>
	case 4:
		LCD_SetLocalization(0x21);
 8003f18:	2021      	movs	r0, #33	; 0x21
 8003f1a:	f7ff ffa1 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord(".");
 8003f1e:	481a      	ldr	r0, [pc, #104]	; (8003f88 <printDots+0xe0>)
 8003f20:	f7ff ffae 	bl	8003e80 <LCD_SendWord>
		lcd_clear_1();
 8003f24:	f7ff ff16 	bl	8003d54 <lcd_clear_1>
		break;
 8003f28:	e015      	b.n	8003f56 <printDots+0xae>
	case 5:
		LCD_SetLocalization(0x22);
 8003f2a:	2022      	movs	r0, #34	; 0x22
 8003f2c:	f7ff ff98 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord(".");
 8003f30:	4815      	ldr	r0, [pc, #84]	; (8003f88 <printDots+0xe0>)
 8003f32:	f7ff ffa5 	bl	8003e80 <LCD_SendWord>
		break;
 8003f36:	e00e      	b.n	8003f56 <printDots+0xae>
	case 6:
		LCD_SetLocalization(0x23);
 8003f38:	2023      	movs	r0, #35	; 0x23
 8003f3a:	f7ff ff91 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord(".");
 8003f3e:	4812      	ldr	r0, [pc, #72]	; (8003f88 <printDots+0xe0>)
 8003f40:	f7ff ff9e 	bl	8003e80 <LCD_SendWord>
		break;
 8003f44:	e007      	b.n	8003f56 <printDots+0xae>
	case 7:
		LCD_SetLocalization(0x21);
 8003f46:	2021      	movs	r0, #33	; 0x21
 8003f48:	f7ff ff8a 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("   ");
 8003f4c:	480f      	ldr	r0, [pc, #60]	; (8003f8c <printDots+0xe4>)
 8003f4e:	f7ff ff97 	bl	8003e80 <LCD_SendWord>
		break;
 8003f52:	e000      	b.n	8003f56 <printDots+0xae>
	default:
		break;
 8003f54:	bf00      	nop
	}
	if (iDot >= 0 && iDot < 7) {
 8003f56:	4b0b      	ldr	r3, [pc, #44]	; (8003f84 <printDots+0xdc>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	db09      	blt.n	8003f72 <printDots+0xca>
 8003f5e:	4b09      	ldr	r3, [pc, #36]	; (8003f84 <printDots+0xdc>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2b06      	cmp	r3, #6
 8003f64:	dc05      	bgt.n	8003f72 <printDots+0xca>
		iDot++;
 8003f66:	4b07      	ldr	r3, [pc, #28]	; (8003f84 <printDots+0xdc>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	3301      	adds	r3, #1
 8003f6c:	4a05      	ldr	r2, [pc, #20]	; (8003f84 <printDots+0xdc>)
 8003f6e:	6013      	str	r3, [r2, #0]
 8003f70:	e005      	b.n	8003f7e <printDots+0xd6>

	} else {
		iDot = 0;
 8003f72:	4b04      	ldr	r3, [pc, #16]	; (8003f84 <printDots+0xdc>)
 8003f74:	2200      	movs	r2, #0
 8003f76:	601a      	str	r2, [r3, #0]
		dots = false;
 8003f78:	4b05      	ldr	r3, [pc, #20]	; (8003f90 <printDots+0xe8>)
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	701a      	strb	r2, [r3, #0]
	}
}
 8003f7e:	bf00      	nop
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	200003e4 	.word	0x200003e4
 8003f88:	0800ad58 	.word	0x0800ad58
 8003f8c:	0800ad5c 	.word	0x0800ad5c
 8003f90:	200003ec 	.word	0x200003ec

08003f94 <enemyAboveWord>:
void enemyAboveWord() {
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af02      	add	r7, sp, #8
	switch (iSpace2) {
 8003f9a:	4bc7      	ldr	r3, [pc, #796]	; (80042b8 <enemyAboveWord+0x324>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2b12      	cmp	r3, #18
 8003fa0:	f200 8212 	bhi.w	80043c8 <enemyAboveWord+0x434>
 8003fa4:	a201      	add	r2, pc, #4	; (adr r2, 8003fac <enemyAboveWord+0x18>)
 8003fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003faa:	bf00      	nop
 8003fac:	08003ff9 	.word	0x08003ff9
 8003fb0:	0800401f 	.word	0x0800401f
 8003fb4:	08004051 	.word	0x08004051
 8003fb8:	08004083 	.word	0x08004083
 8003fbc:	080040b5 	.word	0x080040b5
 8003fc0:	080040e7 	.word	0x080040e7
 8003fc4:	08004115 	.word	0x08004115
 8003fc8:	08004137 	.word	0x08004137
 8003fcc:	08004169 	.word	0x08004169
 8003fd0:	0800419b 	.word	0x0800419b
 8003fd4:	080041cd 	.word	0x080041cd
 8003fd8:	080041ff 	.word	0x080041ff
 8003fdc:	0800422d 	.word	0x0800422d
 8003fe0:	08004253 	.word	0x08004253
 8003fe4:	08004285 	.word	0x08004285
 8003fe8:	08004331 	.word	0x08004331
 8003fec:	08004363 	.word	0x08004363
 8003ff0:	08004395 	.word	0x08004395
 8003ff4:	080043c3 	.word	0x080043c3
	case 0:
		lcd_clear_1();
 8003ff8:	f7ff feac 	bl	8003d54 <lcd_clear_1>
		createInvertedWord("a", 0x46, 1, 4, 1);
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	9300      	str	r3, [sp, #0]
 8004000:	2304      	movs	r3, #4
 8004002:	2201      	movs	r2, #1
 8004004:	2146      	movs	r1, #70	; 0x46
 8004006:	48ad      	ldr	r0, [pc, #692]	; (80042bc <enemyAboveWord+0x328>)
 8004008:	f7ff f854 	bl	80030b4 <createInvertedWord>
		createInvertedWord("f", 0x47, 1, 5, 1);
 800400c:	2301      	movs	r3, #1
 800400e:	9300      	str	r3, [sp, #0]
 8004010:	2305      	movs	r3, #5
 8004012:	2201      	movs	r2, #1
 8004014:	2147      	movs	r1, #71	; 0x47
 8004016:	48aa      	ldr	r0, [pc, #680]	; (80042c0 <enemyAboveWord+0x32c>)
 8004018:	f7ff f84c 	bl	80030b4 <createInvertedWord>
		break;
 800401c:	e1d5      	b.n	80043ca <enemyAboveWord+0x436>
	case 1:
		createInvertedWord("b", 0x46, 1, 4, 1);
 800401e:	2301      	movs	r3, #1
 8004020:	9300      	str	r3, [sp, #0]
 8004022:	2304      	movs	r3, #4
 8004024:	2201      	movs	r2, #1
 8004026:	2146      	movs	r1, #70	; 0x46
 8004028:	48a6      	ldr	r0, [pc, #664]	; (80042c4 <enemyAboveWord+0x330>)
 800402a:	f7ff f843 	bl	80030b4 <createInvertedWord>
		createInvertedWord("g", 0x47, 1, 5, 1);
 800402e:	2301      	movs	r3, #1
 8004030:	9300      	str	r3, [sp, #0]
 8004032:	2305      	movs	r3, #5
 8004034:	2201      	movs	r2, #1
 8004036:	2147      	movs	r1, #71	; 0x47
 8004038:	48a3      	ldr	r0, [pc, #652]	; (80042c8 <enemyAboveWord+0x334>)
 800403a:	f7ff f83b 	bl	80030b4 <createInvertedWord>
		createInvertedWord("k", 0x48, 1, 6, 1);
 800403e:	2301      	movs	r3, #1
 8004040:	9300      	str	r3, [sp, #0]
 8004042:	2306      	movs	r3, #6
 8004044:	2201      	movs	r2, #1
 8004046:	2148      	movs	r1, #72	; 0x48
 8004048:	48a0      	ldr	r0, [pc, #640]	; (80042cc <enemyAboveWord+0x338>)
 800404a:	f7ff f833 	bl	80030b4 <createInvertedWord>
		break;
 800404e:	e1bc      	b.n	80043ca <enemyAboveWord+0x436>
	case 2:
		createInvertedWord("3", 0x46, 1, 4, 2);
 8004050:	2302      	movs	r3, #2
 8004052:	9300      	str	r3, [sp, #0]
 8004054:	2304      	movs	r3, #4
 8004056:	2201      	movs	r2, #1
 8004058:	2146      	movs	r1, #70	; 0x46
 800405a:	489d      	ldr	r0, [pc, #628]	; (80042d0 <enemyAboveWord+0x33c>)
 800405c:	f7ff f82a 	bl	80030b4 <createInvertedWord>
		createInvertedWord("8", 0x47, 1, 5, 2);
 8004060:	2302      	movs	r3, #2
 8004062:	9300      	str	r3, [sp, #0]
 8004064:	2305      	movs	r3, #5
 8004066:	2201      	movs	r2, #1
 8004068:	2147      	movs	r1, #71	; 0x47
 800406a:	489a      	ldr	r0, [pc, #616]	; (80042d4 <enemyAboveWord+0x340>)
 800406c:	f7ff f822 	bl	80030b4 <createInvertedWord>
		createInvertedWord("B", 0x48, 1, 6, 2);
 8004070:	2302      	movs	r3, #2
 8004072:	9300      	str	r3, [sp, #0]
 8004074:	2306      	movs	r3, #6
 8004076:	2201      	movs	r2, #1
 8004078:	2148      	movs	r1, #72	; 0x48
 800407a:	4897      	ldr	r0, [pc, #604]	; (80042d8 <enemyAboveWord+0x344>)
 800407c:	f7ff f81a 	bl	80030b4 <createInvertedWord>
		break;
 8004080:	e1a3      	b.n	80043ca <enemyAboveWord+0x436>
	case 3:
		createInvertedWord("4", 0x46, 1, 4, 2);
 8004082:	2302      	movs	r3, #2
 8004084:	9300      	str	r3, [sp, #0]
 8004086:	2304      	movs	r3, #4
 8004088:	2201      	movs	r2, #1
 800408a:	2146      	movs	r1, #70	; 0x46
 800408c:	4893      	ldr	r0, [pc, #588]	; (80042dc <enemyAboveWord+0x348>)
 800408e:	f7ff f811 	bl	80030b4 <createInvertedWord>
		createInvertedWord("9", 0x47, 1, 5, 2);
 8004092:	2302      	movs	r3, #2
 8004094:	9300      	str	r3, [sp, #0]
 8004096:	2305      	movs	r3, #5
 8004098:	2201      	movs	r2, #1
 800409a:	2147      	movs	r1, #71	; 0x47
 800409c:	4890      	ldr	r0, [pc, #576]	; (80042e0 <enemyAboveWord+0x34c>)
 800409e:	f7ff f809 	bl	80030b4 <createInvertedWord>
		createInvertedWord("C", 0x48, 1, 6, 2);
 80040a2:	2302      	movs	r3, #2
 80040a4:	9300      	str	r3, [sp, #0]
 80040a6:	2306      	movs	r3, #6
 80040a8:	2201      	movs	r2, #1
 80040aa:	2148      	movs	r1, #72	; 0x48
 80040ac:	488d      	ldr	r0, [pc, #564]	; (80042e4 <enemyAboveWord+0x350>)
 80040ae:	f7ff f801 	bl	80030b4 <createInvertedWord>
		break;
 80040b2:	e18a      	b.n	80043ca <enemyAboveWord+0x436>
	case 4:
		createInvertedWord("e", 0x46, 1, 4, 1);
 80040b4:	2301      	movs	r3, #1
 80040b6:	9300      	str	r3, [sp, #0]
 80040b8:	2304      	movs	r3, #4
 80040ba:	2201      	movs	r2, #1
 80040bc:	2146      	movs	r1, #70	; 0x46
 80040be:	488a      	ldr	r0, [pc, #552]	; (80042e8 <enemyAboveWord+0x354>)
 80040c0:	f7fe fff8 	bl	80030b4 <createInvertedWord>
		createInvertedWord("j", 0x47, 1, 5, 1);
 80040c4:	2301      	movs	r3, #1
 80040c6:	9300      	str	r3, [sp, #0]
 80040c8:	2305      	movs	r3, #5
 80040ca:	2201      	movs	r2, #1
 80040cc:	2147      	movs	r1, #71	; 0x47
 80040ce:	4887      	ldr	r0, [pc, #540]	; (80042ec <enemyAboveWord+0x358>)
 80040d0:	f7fe fff0 	bl	80030b4 <createInvertedWord>
		createInvertedWord("n", 0x48, 1, 6, 1);
 80040d4:	2301      	movs	r3, #1
 80040d6:	9300      	str	r3, [sp, #0]
 80040d8:	2306      	movs	r3, #6
 80040da:	2201      	movs	r2, #1
 80040dc:	2148      	movs	r1, #72	; 0x48
 80040de:	4884      	ldr	r0, [pc, #528]	; (80042f0 <enemyAboveWord+0x35c>)
 80040e0:	f7fe ffe8 	bl	80030b4 <createInvertedWord>
		break;
 80040e4:	e171      	b.n	80043ca <enemyAboveWord+0x436>
	case 5:
		LCD_SetLocalization(0x46);
 80040e6:	2046      	movs	r0, #70	; 0x46
 80040e8:	f7ff feba 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord(" ");
 80040ec:	4881      	ldr	r0, [pc, #516]	; (80042f4 <enemyAboveWord+0x360>)
 80040ee:	f7ff fec7 	bl	8003e80 <LCD_SendWord>
		createInvertedWord("a", 0x47, 1, 5, 1);
 80040f2:	2301      	movs	r3, #1
 80040f4:	9300      	str	r3, [sp, #0]
 80040f6:	2305      	movs	r3, #5
 80040f8:	2201      	movs	r2, #1
 80040fa:	2147      	movs	r1, #71	; 0x47
 80040fc:	486f      	ldr	r0, [pc, #444]	; (80042bc <enemyAboveWord+0x328>)
 80040fe:	f7fe ffd9 	bl	80030b4 <createInvertedWord>
		createInvertedWord("f", 0x48, 1, 6, 1);
 8004102:	2301      	movs	r3, #1
 8004104:	9300      	str	r3, [sp, #0]
 8004106:	2306      	movs	r3, #6
 8004108:	2201      	movs	r2, #1
 800410a:	2148      	movs	r1, #72	; 0x48
 800410c:	486c      	ldr	r0, [pc, #432]	; (80042c0 <enemyAboveWord+0x32c>)
 800410e:	f7fe ffd1 	bl	80030b4 <createInvertedWord>
		break;
 8004112:	e15a      	b.n	80043ca <enemyAboveWord+0x436>
	case 6:
		createInvertedWord("1", 0x47, 1, 4, 2);
 8004114:	2302      	movs	r3, #2
 8004116:	9300      	str	r3, [sp, #0]
 8004118:	2304      	movs	r3, #4
 800411a:	2201      	movs	r2, #1
 800411c:	2147      	movs	r1, #71	; 0x47
 800411e:	4876      	ldr	r0, [pc, #472]	; (80042f8 <enemyAboveWord+0x364>)
 8004120:	f7fe ffc8 	bl	80030b4 <createInvertedWord>
		createInvertedWord("6", 0x48, 1, 5, 2);
 8004124:	2302      	movs	r3, #2
 8004126:	9300      	str	r3, [sp, #0]
 8004128:	2305      	movs	r3, #5
 800412a:	2201      	movs	r2, #1
 800412c:	2148      	movs	r1, #72	; 0x48
 800412e:	4873      	ldr	r0, [pc, #460]	; (80042fc <enemyAboveWord+0x368>)
 8004130:	f7fe ffc0 	bl	80030b4 <createInvertedWord>
		break;
 8004134:	e149      	b.n	80043ca <enemyAboveWord+0x436>
	case 7:
		createInvertedWord("2", 0x47, 1, 4, 2);
 8004136:	2302      	movs	r3, #2
 8004138:	9300      	str	r3, [sp, #0]
 800413a:	2304      	movs	r3, #4
 800413c:	2201      	movs	r2, #1
 800413e:	2147      	movs	r1, #71	; 0x47
 8004140:	486f      	ldr	r0, [pc, #444]	; (8004300 <enemyAboveWord+0x36c>)
 8004142:	f7fe ffb7 	bl	80030b4 <createInvertedWord>
		createInvertedWord("7", 0x48, 1, 5, 2);
 8004146:	2302      	movs	r3, #2
 8004148:	9300      	str	r3, [sp, #0]
 800414a:	2305      	movs	r3, #5
 800414c:	2201      	movs	r2, #1
 800414e:	2148      	movs	r1, #72	; 0x48
 8004150:	486c      	ldr	r0, [pc, #432]	; (8004304 <enemyAboveWord+0x370>)
 8004152:	f7fe ffaf 	bl	80030b4 <createInvertedWord>
		createInvertedWord("A", 0x49, 1, 6, 2);
 8004156:	2302      	movs	r3, #2
 8004158:	9300      	str	r3, [sp, #0]
 800415a:	2306      	movs	r3, #6
 800415c:	2201      	movs	r2, #1
 800415e:	2149      	movs	r1, #73	; 0x49
 8004160:	4869      	ldr	r0, [pc, #420]	; (8004308 <enemyAboveWord+0x374>)
 8004162:	f7fe ffa7 	bl	80030b4 <createInvertedWord>
		break;
 8004166:	e130      	b.n	80043ca <enemyAboveWord+0x436>
	case 8:
		createInvertedWord("c", 0x47, 1, 4, 1);
 8004168:	2301      	movs	r3, #1
 800416a:	9300      	str	r3, [sp, #0]
 800416c:	2304      	movs	r3, #4
 800416e:	2201      	movs	r2, #1
 8004170:	2147      	movs	r1, #71	; 0x47
 8004172:	4866      	ldr	r0, [pc, #408]	; (800430c <enemyAboveWord+0x378>)
 8004174:	f7fe ff9e 	bl	80030b4 <createInvertedWord>
		createInvertedWord("h", 0x48, 1, 5, 1);
 8004178:	2301      	movs	r3, #1
 800417a:	9300      	str	r3, [sp, #0]
 800417c:	2305      	movs	r3, #5
 800417e:	2201      	movs	r2, #1
 8004180:	2148      	movs	r1, #72	; 0x48
 8004182:	4863      	ldr	r0, [pc, #396]	; (8004310 <enemyAboveWord+0x37c>)
 8004184:	f7fe ff96 	bl	80030b4 <createInvertedWord>
		createInvertedWord("l", 0x49, 1, 6, 1);
 8004188:	2301      	movs	r3, #1
 800418a:	9300      	str	r3, [sp, #0]
 800418c:	2306      	movs	r3, #6
 800418e:	2201      	movs	r2, #1
 8004190:	2149      	movs	r1, #73	; 0x49
 8004192:	4860      	ldr	r0, [pc, #384]	; (8004314 <enemyAboveWord+0x380>)
 8004194:	f7fe ff8e 	bl	80030b4 <createInvertedWord>
		break;
 8004198:	e117      	b.n	80043ca <enemyAboveWord+0x436>
	case 9:
		createInvertedWord("d", 0x47, 1, 4, 1);
 800419a:	2301      	movs	r3, #1
 800419c:	9300      	str	r3, [sp, #0]
 800419e:	2304      	movs	r3, #4
 80041a0:	2201      	movs	r2, #1
 80041a2:	2147      	movs	r1, #71	; 0x47
 80041a4:	485c      	ldr	r0, [pc, #368]	; (8004318 <enemyAboveWord+0x384>)
 80041a6:	f7fe ff85 	bl	80030b4 <createInvertedWord>
		createInvertedWord("i", 0x48, 1, 5, 1);
 80041aa:	2301      	movs	r3, #1
 80041ac:	9300      	str	r3, [sp, #0]
 80041ae:	2305      	movs	r3, #5
 80041b0:	2201      	movs	r2, #1
 80041b2:	2148      	movs	r1, #72	; 0x48
 80041b4:	4859      	ldr	r0, [pc, #356]	; (800431c <enemyAboveWord+0x388>)
 80041b6:	f7fe ff7d 	bl	80030b4 <createInvertedWord>
		createInvertedWord("m", 0x49, 1, 6, 1);
 80041ba:	2301      	movs	r3, #1
 80041bc:	9300      	str	r3, [sp, #0]
 80041be:	2306      	movs	r3, #6
 80041c0:	2201      	movs	r2, #1
 80041c2:	2149      	movs	r1, #73	; 0x49
 80041c4:	4856      	ldr	r0, [pc, #344]	; (8004320 <enemyAboveWord+0x38c>)
 80041c6:	f7fe ff75 	bl	80030b4 <createInvertedWord>
		break;
 80041ca:	e0fe      	b.n	80043ca <enemyAboveWord+0x436>
	case 10:
		createInvertedWord("5", 0x47, 1, 4, 2);
 80041cc:	2302      	movs	r3, #2
 80041ce:	9300      	str	r3, [sp, #0]
 80041d0:	2304      	movs	r3, #4
 80041d2:	2201      	movs	r2, #1
 80041d4:	2147      	movs	r1, #71	; 0x47
 80041d6:	4853      	ldr	r0, [pc, #332]	; (8004324 <enemyAboveWord+0x390>)
 80041d8:	f7fe ff6c 	bl	80030b4 <createInvertedWord>
		createInvertedWord("0", 0x48, 1, 5, 2);
 80041dc:	2302      	movs	r3, #2
 80041de:	9300      	str	r3, [sp, #0]
 80041e0:	2305      	movs	r3, #5
 80041e2:	2201      	movs	r2, #1
 80041e4:	2148      	movs	r1, #72	; 0x48
 80041e6:	4850      	ldr	r0, [pc, #320]	; (8004328 <enemyAboveWord+0x394>)
 80041e8:	f7fe ff64 	bl	80030b4 <createInvertedWord>
		createInvertedWord("D", 0x49, 1, 6, 2);
 80041ec:	2302      	movs	r3, #2
 80041ee:	9300      	str	r3, [sp, #0]
 80041f0:	2306      	movs	r3, #6
 80041f2:	2201      	movs	r2, #1
 80041f4:	2149      	movs	r1, #73	; 0x49
 80041f6:	484d      	ldr	r0, [pc, #308]	; (800432c <enemyAboveWord+0x398>)
 80041f8:	f7fe ff5c 	bl	80030b4 <createInvertedWord>
		break;
 80041fc:	e0e5      	b.n	80043ca <enemyAboveWord+0x436>
	case 11:
		LCD_SetLocalization(0x47);
 80041fe:	2047      	movs	r0, #71	; 0x47
 8004200:	f7ff fe2e 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord(" ");
 8004204:	483b      	ldr	r0, [pc, #236]	; (80042f4 <enemyAboveWord+0x360>)
 8004206:	f7ff fe3b 	bl	8003e80 <LCD_SendWord>
		createInvertedWord("1", 0x48, 1, 5, 2);
 800420a:	2302      	movs	r3, #2
 800420c:	9300      	str	r3, [sp, #0]
 800420e:	2305      	movs	r3, #5
 8004210:	2201      	movs	r2, #1
 8004212:	2148      	movs	r1, #72	; 0x48
 8004214:	4838      	ldr	r0, [pc, #224]	; (80042f8 <enemyAboveWord+0x364>)
 8004216:	f7fe ff4d 	bl	80030b4 <createInvertedWord>
		createInvertedWord("6", 0x49, 1, 6, 2);
 800421a:	2302      	movs	r3, #2
 800421c:	9300      	str	r3, [sp, #0]
 800421e:	2306      	movs	r3, #6
 8004220:	2201      	movs	r2, #1
 8004222:	2149      	movs	r1, #73	; 0x49
 8004224:	4835      	ldr	r0, [pc, #212]	; (80042fc <enemyAboveWord+0x368>)
 8004226:	f7fe ff45 	bl	80030b4 <createInvertedWord>
		break; //3
 800422a:	e0ce      	b.n	80043ca <enemyAboveWord+0x436>
	case 12:
		lcd_clear_1();
 800422c:	f7ff fd92 	bl	8003d54 <lcd_clear_1>
		createInvertedWord("a", 0x48, 1, 4, 1);
 8004230:	2301      	movs	r3, #1
 8004232:	9300      	str	r3, [sp, #0]
 8004234:	2304      	movs	r3, #4
 8004236:	2201      	movs	r2, #1
 8004238:	2148      	movs	r1, #72	; 0x48
 800423a:	4820      	ldr	r0, [pc, #128]	; (80042bc <enemyAboveWord+0x328>)
 800423c:	f7fe ff3a 	bl	80030b4 <createInvertedWord>
		createInvertedWord("f", 0x49, 1, 5, 1);
 8004240:	2301      	movs	r3, #1
 8004242:	9300      	str	r3, [sp, #0]
 8004244:	2305      	movs	r3, #5
 8004246:	2201      	movs	r2, #1
 8004248:	2149      	movs	r1, #73	; 0x49
 800424a:	481d      	ldr	r0, [pc, #116]	; (80042c0 <enemyAboveWord+0x32c>)
 800424c:	f7fe ff32 	bl	80030b4 <createInvertedWord>
		break;
 8004250:	e0bb      	b.n	80043ca <enemyAboveWord+0x436>
	case 13:
		createInvertedWord("b", 0x48, 1, 4, 1);
 8004252:	2301      	movs	r3, #1
 8004254:	9300      	str	r3, [sp, #0]
 8004256:	2304      	movs	r3, #4
 8004258:	2201      	movs	r2, #1
 800425a:	2148      	movs	r1, #72	; 0x48
 800425c:	4819      	ldr	r0, [pc, #100]	; (80042c4 <enemyAboveWord+0x330>)
 800425e:	f7fe ff29 	bl	80030b4 <createInvertedWord>
		createInvertedWord("g", 0x49, 1, 5, 1);
 8004262:	2301      	movs	r3, #1
 8004264:	9300      	str	r3, [sp, #0]
 8004266:	2305      	movs	r3, #5
 8004268:	2201      	movs	r2, #1
 800426a:	2149      	movs	r1, #73	; 0x49
 800426c:	4816      	ldr	r0, [pc, #88]	; (80042c8 <enemyAboveWord+0x334>)
 800426e:	f7fe ff21 	bl	80030b4 <createInvertedWord>
		createInvertedWord("k", 0x4A, 1, 6, 1);
 8004272:	2301      	movs	r3, #1
 8004274:	9300      	str	r3, [sp, #0]
 8004276:	2306      	movs	r3, #6
 8004278:	2201      	movs	r2, #1
 800427a:	214a      	movs	r1, #74	; 0x4a
 800427c:	4813      	ldr	r0, [pc, #76]	; (80042cc <enemyAboveWord+0x338>)
 800427e:	f7fe ff19 	bl	80030b4 <createInvertedWord>
		break;
 8004282:	e0a2      	b.n	80043ca <enemyAboveWord+0x436>
	case 14:
		createInvertedWord("3", 0x48, 1, 4, 2);
 8004284:	2302      	movs	r3, #2
 8004286:	9300      	str	r3, [sp, #0]
 8004288:	2304      	movs	r3, #4
 800428a:	2201      	movs	r2, #1
 800428c:	2148      	movs	r1, #72	; 0x48
 800428e:	4810      	ldr	r0, [pc, #64]	; (80042d0 <enemyAboveWord+0x33c>)
 8004290:	f7fe ff10 	bl	80030b4 <createInvertedWord>
		createInvertedWord("8", 0x49, 1, 5, 2);
 8004294:	2302      	movs	r3, #2
 8004296:	9300      	str	r3, [sp, #0]
 8004298:	2305      	movs	r3, #5
 800429a:	2201      	movs	r2, #1
 800429c:	2149      	movs	r1, #73	; 0x49
 800429e:	480d      	ldr	r0, [pc, #52]	; (80042d4 <enemyAboveWord+0x340>)
 80042a0:	f7fe ff08 	bl	80030b4 <createInvertedWord>
		createInvertedWord("B", 0x4A, 1, 6, 2);
 80042a4:	2302      	movs	r3, #2
 80042a6:	9300      	str	r3, [sp, #0]
 80042a8:	2306      	movs	r3, #6
 80042aa:	2201      	movs	r2, #1
 80042ac:	214a      	movs	r1, #74	; 0x4a
 80042ae:	480a      	ldr	r0, [pc, #40]	; (80042d8 <enemyAboveWord+0x344>)
 80042b0:	f7fe ff00 	bl	80030b4 <createInvertedWord>
		break;
 80042b4:	e089      	b.n	80043ca <enemyAboveWord+0x436>
 80042b6:	bf00      	nop
 80042b8:	200003e8 	.word	0x200003e8
 80042bc:	0800ad60 	.word	0x0800ad60
 80042c0:	0800ad64 	.word	0x0800ad64
 80042c4:	0800ad68 	.word	0x0800ad68
 80042c8:	0800ad6c 	.word	0x0800ad6c
 80042cc:	0800ad70 	.word	0x0800ad70
 80042d0:	0800ad74 	.word	0x0800ad74
 80042d4:	0800ad78 	.word	0x0800ad78
 80042d8:	0800ad7c 	.word	0x0800ad7c
 80042dc:	0800ad80 	.word	0x0800ad80
 80042e0:	0800ad84 	.word	0x0800ad84
 80042e4:	0800ad88 	.word	0x0800ad88
 80042e8:	0800ad8c 	.word	0x0800ad8c
 80042ec:	0800ad90 	.word	0x0800ad90
 80042f0:	0800ad94 	.word	0x0800ad94
 80042f4:	0800ad98 	.word	0x0800ad98
 80042f8:	0800ad9c 	.word	0x0800ad9c
 80042fc:	0800ada0 	.word	0x0800ada0
 8004300:	0800ada4 	.word	0x0800ada4
 8004304:	0800ada8 	.word	0x0800ada8
 8004308:	0800adac 	.word	0x0800adac
 800430c:	0800adb0 	.word	0x0800adb0
 8004310:	0800adb4 	.word	0x0800adb4
 8004314:	0800adb8 	.word	0x0800adb8
 8004318:	0800adbc 	.word	0x0800adbc
 800431c:	0800adc0 	.word	0x0800adc0
 8004320:	0800adc4 	.word	0x0800adc4
 8004324:	0800adc8 	.word	0x0800adc8
 8004328:	0800adcc 	.word	0x0800adcc
 800432c:	0800add0 	.word	0x0800add0
	case 15:
		createInvertedWord("d", 0x48, 1, 4, 1);
 8004330:	2301      	movs	r3, #1
 8004332:	9300      	str	r3, [sp, #0]
 8004334:	2304      	movs	r3, #4
 8004336:	2201      	movs	r2, #1
 8004338:	2148      	movs	r1, #72	; 0x48
 800433a:	482f      	ldr	r0, [pc, #188]	; (80043f8 <enemyAboveWord+0x464>)
 800433c:	f7fe feba 	bl	80030b4 <createInvertedWord>
		createInvertedWord("i", 0x49, 1, 5, 1);
 8004340:	2301      	movs	r3, #1
 8004342:	9300      	str	r3, [sp, #0]
 8004344:	2305      	movs	r3, #5
 8004346:	2201      	movs	r2, #1
 8004348:	2149      	movs	r1, #73	; 0x49
 800434a:	482c      	ldr	r0, [pc, #176]	; (80043fc <enemyAboveWord+0x468>)
 800434c:	f7fe feb2 	bl	80030b4 <createInvertedWord>
		createInvertedWord("m", 0x4A, 1, 6, 1);
 8004350:	2301      	movs	r3, #1
 8004352:	9300      	str	r3, [sp, #0]
 8004354:	2306      	movs	r3, #6
 8004356:	2201      	movs	r2, #1
 8004358:	214a      	movs	r1, #74	; 0x4a
 800435a:	4829      	ldr	r0, [pc, #164]	; (8004400 <enemyAboveWord+0x46c>)
 800435c:	f7fe feaa 	bl	80030b4 <createInvertedWord>
		break;
 8004360:	e033      	b.n	80043ca <enemyAboveWord+0x436>
	case 16:
		createInvertedWord("e", 0x48, 1, 4, 1);
 8004362:	2301      	movs	r3, #1
 8004364:	9300      	str	r3, [sp, #0]
 8004366:	2304      	movs	r3, #4
 8004368:	2201      	movs	r2, #1
 800436a:	2148      	movs	r1, #72	; 0x48
 800436c:	4825      	ldr	r0, [pc, #148]	; (8004404 <enemyAboveWord+0x470>)
 800436e:	f7fe fea1 	bl	80030b4 <createInvertedWord>
		createInvertedWord("j", 0x49, 1, 5, 1);
 8004372:	2301      	movs	r3, #1
 8004374:	9300      	str	r3, [sp, #0]
 8004376:	2305      	movs	r3, #5
 8004378:	2201      	movs	r2, #1
 800437a:	2149      	movs	r1, #73	; 0x49
 800437c:	4822      	ldr	r0, [pc, #136]	; (8004408 <enemyAboveWord+0x474>)
 800437e:	f7fe fe99 	bl	80030b4 <createInvertedWord>
		createInvertedWord("n", 0x4A, 1, 6, 1);
 8004382:	2301      	movs	r3, #1
 8004384:	9300      	str	r3, [sp, #0]
 8004386:	2306      	movs	r3, #6
 8004388:	2201      	movs	r2, #1
 800438a:	214a      	movs	r1, #74	; 0x4a
 800438c:	481f      	ldr	r0, [pc, #124]	; (800440c <enemyAboveWord+0x478>)
 800438e:	f7fe fe91 	bl	80030b4 <createInvertedWord>
		break;
 8004392:	e01a      	b.n	80043ca <enemyAboveWord+0x436>
	case 17:
		LCD_SetLocalization(0x48);
 8004394:	2048      	movs	r0, #72	; 0x48
 8004396:	f7ff fd63 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord(" ");
 800439a:	481d      	ldr	r0, [pc, #116]	; (8004410 <enemyAboveWord+0x47c>)
 800439c:	f7ff fd70 	bl	8003e80 <LCD_SendWord>
		createInvertedWord("1", 0x49, 1, 5, 2);
 80043a0:	2302      	movs	r3, #2
 80043a2:	9300      	str	r3, [sp, #0]
 80043a4:	2305      	movs	r3, #5
 80043a6:	2201      	movs	r2, #1
 80043a8:	2149      	movs	r1, #73	; 0x49
 80043aa:	481a      	ldr	r0, [pc, #104]	; (8004414 <enemyAboveWord+0x480>)
 80043ac:	f7fe fe82 	bl	80030b4 <createInvertedWord>
		createInvertedWord("6", 0x4A, 1, 6, 2);
 80043b0:	2302      	movs	r3, #2
 80043b2:	9300      	str	r3, [sp, #0]
 80043b4:	2306      	movs	r3, #6
 80043b6:	2201      	movs	r2, #1
 80043b8:	214a      	movs	r1, #74	; 0x4a
 80043ba:	4817      	ldr	r0, [pc, #92]	; (8004418 <enemyAboveWord+0x484>)
 80043bc:	f7fe fe7a 	bl	80030b4 <createInvertedWord>
		break;
 80043c0:	e003      	b.n	80043ca <enemyAboveWord+0x436>
	case 18:
		lcd_cls();
 80043c2:	f7ff fcf7 	bl	8003db4 <lcd_cls>
		break;
 80043c6:	e000      	b.n	80043ca <enemyAboveWord+0x436>
	default:
		break;
 80043c8:	bf00      	nop
	}
	if (iSpace2 >= 0 && iSpace2 < 18) {
 80043ca:	4b14      	ldr	r3, [pc, #80]	; (800441c <enemyAboveWord+0x488>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	db09      	blt.n	80043e6 <enemyAboveWord+0x452>
 80043d2:	4b12      	ldr	r3, [pc, #72]	; (800441c <enemyAboveWord+0x488>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2b11      	cmp	r3, #17
 80043d8:	dc05      	bgt.n	80043e6 <enemyAboveWord+0x452>
		iSpace2++;
 80043da:	4b10      	ldr	r3, [pc, #64]	; (800441c <enemyAboveWord+0x488>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	3301      	adds	r3, #1
 80043e0:	4a0e      	ldr	r2, [pc, #56]	; (800441c <enemyAboveWord+0x488>)
 80043e2:	6013      	str	r3, [r2, #0]
 80043e4:	e005      	b.n	80043f2 <enemyAboveWord+0x45e>
	} else {
		iSpace2 = 0;
 80043e6:	4b0d      	ldr	r3, [pc, #52]	; (800441c <enemyAboveWord+0x488>)
 80043e8:	2200      	movs	r2, #0
 80043ea:	601a      	str	r2, [r3, #0]
		enemySpace = false;
 80043ec:	4b0c      	ldr	r3, [pc, #48]	; (8004420 <enemyAboveWord+0x48c>)
 80043ee:	2200      	movs	r2, #0
 80043f0:	701a      	strb	r2, [r3, #0]
	}
}
 80043f2:	bf00      	nop
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	0800adbc 	.word	0x0800adbc
 80043fc:	0800adc0 	.word	0x0800adc0
 8004400:	0800adc4 	.word	0x0800adc4
 8004404:	0800ad8c 	.word	0x0800ad8c
 8004408:	0800ad90 	.word	0x0800ad90
 800440c:	0800ad94 	.word	0x0800ad94
 8004410:	0800ad98 	.word	0x0800ad98
 8004414:	0800ad9c 	.word	0x0800ad9c
 8004418:	0800ada0 	.word	0x0800ada0
 800441c:	200003e8 	.word	0x200003e8
 8004420:	200003ee 	.word	0x200003ee

08004424 <miniDuelOfSpaces>:
void miniDuelOfSpaces() {
 8004424:	b580      	push	{r7, lr}
 8004426:	b082      	sub	sp, #8
 8004428:	af02      	add	r7, sp, #8
	switch (iSpace) {
 800442a:	4b66      	ldr	r3, [pc, #408]	; (80045c4 <miniDuelOfSpaces+0x1a0>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	3b01      	subs	r3, #1
 8004430:	2b08      	cmp	r3, #8
 8004432:	f200 80b5 	bhi.w	80045a0 <miniDuelOfSpaces+0x17c>
 8004436:	a201      	add	r2, pc, #4	; (adr r2, 800443c <miniDuelOfSpaces+0x18>)
 8004438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800443c:	08004461 	.word	0x08004461
 8004440:	08004493 	.word	0x08004493
 8004444:	080044b5 	.word	0x080044b5
 8004448:	080044d7 	.word	0x080044d7
 800444c:	08004519 	.word	0x08004519
 8004450:	0800453b 	.word	0x0800453b
 8004454:	0800455d 	.word	0x0800455d
 8004458:	0800457b 	.word	0x0800457b
 800445c:	0800458d 	.word	0x0800458d
	case 1:
		createInvertedWord("S", 0x15, 1, 0, 1);
 8004460:	2301      	movs	r3, #1
 8004462:	9300      	str	r3, [sp, #0]
 8004464:	2300      	movs	r3, #0
 8004466:	2201      	movs	r2, #1
 8004468:	2115      	movs	r1, #21
 800446a:	4857      	ldr	r0, [pc, #348]	; (80045c8 <miniDuelOfSpaces+0x1a4>)
 800446c:	f7fe fe22 	bl	80030b4 <createInvertedWord>

		createInvertedWord("L", 0x41, 1, 1, 1);
 8004470:	2301      	movs	r3, #1
 8004472:	9300      	str	r3, [sp, #0]
 8004474:	2301      	movs	r3, #1
 8004476:	2201      	movs	r2, #1
 8004478:	2141      	movs	r1, #65	; 0x41
 800447a:	4854      	ldr	r0, [pc, #336]	; (80045cc <miniDuelOfSpaces+0x1a8>)
 800447c:	f7fe fe1a 	bl	80030b4 <createInvertedWord>
		createInvertedWord("R", 0x42, 1, 2, 1);
 8004480:	2301      	movs	r3, #1
 8004482:	9300      	str	r3, [sp, #0]
 8004484:	2302      	movs	r3, #2
 8004486:	2201      	movs	r2, #1
 8004488:	2142      	movs	r1, #66	; 0x42
 800448a:	4851      	ldr	r0, [pc, #324]	; (80045d0 <miniDuelOfSpaces+0x1ac>)
 800448c:	f7fe fe12 	bl	80030b4 <createInvertedWord>
		break;
 8004490:	e087      	b.n	80045a2 <miniDuelOfSpaces+0x17e>
	case 2:
		createInvertedWord("1", 0x15, 1, 0, 1);
 8004492:	2301      	movs	r3, #1
 8004494:	9300      	str	r3, [sp, #0]
 8004496:	2300      	movs	r3, #0
 8004498:	2201      	movs	r2, #1
 800449a:	2115      	movs	r1, #21
 800449c:	484d      	ldr	r0, [pc, #308]	; (80045d4 <miniDuelOfSpaces+0x1b0>)
 800449e:	f7fe fe09 	bl	80030b4 <createInvertedWord>
		createInvertedWord("6", 0x16, 1, 3, 1);
 80044a2:	2301      	movs	r3, #1
 80044a4:	9300      	str	r3, [sp, #0]
 80044a6:	2303      	movs	r3, #3
 80044a8:	2201      	movs	r2, #1
 80044aa:	2116      	movs	r1, #22
 80044ac:	484a      	ldr	r0, [pc, #296]	; (80045d8 <miniDuelOfSpaces+0x1b4>)
 80044ae:	f7fe fe01 	bl	80030b4 <createInvertedWord>
		break;
 80044b2:	e076      	b.n	80045a2 <miniDuelOfSpaces+0x17e>
	case 3:
		createInvertedWord("2", 0x15, 1, 0, 1);
 80044b4:	2301      	movs	r3, #1
 80044b6:	9300      	str	r3, [sp, #0]
 80044b8:	2300      	movs	r3, #0
 80044ba:	2201      	movs	r2, #1
 80044bc:	2115      	movs	r1, #21
 80044be:	4847      	ldr	r0, [pc, #284]	; (80045dc <miniDuelOfSpaces+0x1b8>)
 80044c0:	f7fe fdf8 	bl	80030b4 <createInvertedWord>
		createInvertedWord("7", 0x16, 1, 3, 1);
 80044c4:	2301      	movs	r3, #1
 80044c6:	9300      	str	r3, [sp, #0]
 80044c8:	2303      	movs	r3, #3
 80044ca:	2201      	movs	r2, #1
 80044cc:	2116      	movs	r1, #22
 80044ce:	4844      	ldr	r0, [pc, #272]	; (80045e0 <miniDuelOfSpaces+0x1bc>)
 80044d0:	f7fe fdf0 	bl	80030b4 <createInvertedWord>

		break;
 80044d4:	e065      	b.n	80045a2 <miniDuelOfSpaces+0x17e>
	case 4:
		createInvertedWord("3", 0x15, 1, 0, 1);
 80044d6:	2301      	movs	r3, #1
 80044d8:	9300      	str	r3, [sp, #0]
 80044da:	2300      	movs	r3, #0
 80044dc:	2201      	movs	r2, #1
 80044de:	2115      	movs	r1, #21
 80044e0:	4840      	ldr	r0, [pc, #256]	; (80045e4 <miniDuelOfSpaces+0x1c0>)
 80044e2:	f7fe fde7 	bl	80030b4 <createInvertedWord>
		createInvertedWord("8", 0x16, 1, 3, 1);
 80044e6:	2301      	movs	r3, #1
 80044e8:	9300      	str	r3, [sp, #0]
 80044ea:	2303      	movs	r3, #3
 80044ec:	2201      	movs	r2, #1
 80044ee:	2116      	movs	r1, #22
 80044f0:	483d      	ldr	r0, [pc, #244]	; (80045e8 <miniDuelOfSpaces+0x1c4>)
 80044f2:	f7fe fddf 	bl	80030b4 <createInvertedWord>

		createInvertedWord("B", 0x41, 1, 1, 1);
 80044f6:	2301      	movs	r3, #1
 80044f8:	9300      	str	r3, [sp, #0]
 80044fa:	2301      	movs	r3, #1
 80044fc:	2201      	movs	r2, #1
 80044fe:	2141      	movs	r1, #65	; 0x41
 8004500:	483a      	ldr	r0, [pc, #232]	; (80045ec <miniDuelOfSpaces+0x1c8>)
 8004502:	f7fe fdd7 	bl	80030b4 <createInvertedWord>
		createInvertedWord("A", 0x42, 1, 2, 1);
 8004506:	2301      	movs	r3, #1
 8004508:	9300      	str	r3, [sp, #0]
 800450a:	2302      	movs	r3, #2
 800450c:	2201      	movs	r2, #1
 800450e:	2142      	movs	r1, #66	; 0x42
 8004510:	4837      	ldr	r0, [pc, #220]	; (80045f0 <miniDuelOfSpaces+0x1cc>)
 8004512:	f7fe fdcf 	bl	80030b4 <createInvertedWord>
		break;
 8004516:	e044      	b.n	80045a2 <miniDuelOfSpaces+0x17e>
	case 5:
		createInvertedWord("4", 0x15, 1, 0, 1);
 8004518:	2301      	movs	r3, #1
 800451a:	9300      	str	r3, [sp, #0]
 800451c:	2300      	movs	r3, #0
 800451e:	2201      	movs	r2, #1
 8004520:	2115      	movs	r1, #21
 8004522:	4834      	ldr	r0, [pc, #208]	; (80045f4 <miniDuelOfSpaces+0x1d0>)
 8004524:	f7fe fdc6 	bl	80030b4 <createInvertedWord>
		createInvertedWord("9", 0x16, 1, 3, 1);
 8004528:	2301      	movs	r3, #1
 800452a:	9300      	str	r3, [sp, #0]
 800452c:	2303      	movs	r3, #3
 800452e:	2201      	movs	r2, #1
 8004530:	2116      	movs	r1, #22
 8004532:	4831      	ldr	r0, [pc, #196]	; (80045f8 <miniDuelOfSpaces+0x1d4>)
 8004534:	f7fe fdbe 	bl	80030b4 <createInvertedWord>
		break;
 8004538:	e033      	b.n	80045a2 <miniDuelOfSpaces+0x17e>
	case 6:
		createInvertedWord("5", 0x15, 1, 0, 1);
 800453a:	2301      	movs	r3, #1
 800453c:	9300      	str	r3, [sp, #0]
 800453e:	2300      	movs	r3, #0
 8004540:	2201      	movs	r2, #1
 8004542:	2115      	movs	r1, #21
 8004544:	482d      	ldr	r0, [pc, #180]	; (80045fc <miniDuelOfSpaces+0x1d8>)
 8004546:	f7fe fdb5 	bl	80030b4 <createInvertedWord>
		createInvertedWord("S", 0x16, 1, 3, 1);
 800454a:	2301      	movs	r3, #1
 800454c:	9300      	str	r3, [sp, #0]
 800454e:	2303      	movs	r3, #3
 8004550:	2201      	movs	r2, #1
 8004552:	2116      	movs	r1, #22
 8004554:	481c      	ldr	r0, [pc, #112]	; (80045c8 <miniDuelOfSpaces+0x1a4>)
 8004556:	f7fe fdad 	bl	80030b4 <createInvertedWord>
		break;
 800455a:	e022      	b.n	80045a2 <miniDuelOfSpaces+0x17e>
	case 7:
		LCD_SetLocalization(0x15);
 800455c:	2015      	movs	r0, #21
 800455e:	f7ff fc7f 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord(" ");
 8004562:	4827      	ldr	r0, [pc, #156]	; (8004600 <miniDuelOfSpaces+0x1dc>)
 8004564:	f7ff fc8c 	bl	8003e80 <LCD_SendWord>
		createInvertedWord("C", 0x41, 1, 1, 1);
 8004568:	2301      	movs	r3, #1
 800456a:	9300      	str	r3, [sp, #0]
 800456c:	2301      	movs	r3, #1
 800456e:	2201      	movs	r2, #1
 8004570:	2141      	movs	r1, #65	; 0x41
 8004572:	4824      	ldr	r0, [pc, #144]	; (8004604 <miniDuelOfSpaces+0x1e0>)
 8004574:	f7fe fd9e 	bl	80030b4 <createInvertedWord>
		break;
 8004578:	e013      	b.n	80045a2 <miniDuelOfSpaces+0x17e>
	case 8:
		createInvertedWord("D", 0x41, 1, 1, 1);
 800457a:	2301      	movs	r3, #1
 800457c:	9300      	str	r3, [sp, #0]
 800457e:	2301      	movs	r3, #1
 8004580:	2201      	movs	r2, #1
 8004582:	2141      	movs	r1, #65	; 0x41
 8004584:	4820      	ldr	r0, [pc, #128]	; (8004608 <miniDuelOfSpaces+0x1e4>)
 8004586:	f7fe fd95 	bl	80030b4 <createInvertedWord>
		break;
 800458a:	e00a      	b.n	80045a2 <miniDuelOfSpaces+0x17e>
	case 9:
		LCD_SetLocalization(0x41);
 800458c:	2041      	movs	r0, #65	; 0x41
 800458e:	f7ff fc67 	bl	8003e60 <LCD_SetLocalization>
		LCD_SendWord("  ");
 8004592:	481e      	ldr	r0, [pc, #120]	; (800460c <miniDuelOfSpaces+0x1e8>)
 8004594:	f7ff fc74 	bl	8003e80 <LCD_SendWord>
		gameStarted = true;
 8004598:	4b1d      	ldr	r3, [pc, #116]	; (8004610 <miniDuelOfSpaces+0x1ec>)
 800459a:	2201      	movs	r2, #1
 800459c:	701a      	strb	r2, [r3, #0]
		break;
 800459e:	e000      	b.n	80045a2 <miniDuelOfSpaces+0x17e>
	default:
		break;
 80045a0:	bf00      	nop

	}
	if (iSpace >= -2 && iSpace < 9) {
 80045a2:	4b08      	ldr	r3, [pc, #32]	; (80045c4 <miniDuelOfSpaces+0x1a0>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f113 0f02 	cmn.w	r3, #2
 80045aa:	db08      	blt.n	80045be <miniDuelOfSpaces+0x19a>
 80045ac:	4b05      	ldr	r3, [pc, #20]	; (80045c4 <miniDuelOfSpaces+0x1a0>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2b08      	cmp	r3, #8
 80045b2:	dc04      	bgt.n	80045be <miniDuelOfSpaces+0x19a>
		iSpace++;
 80045b4:	4b03      	ldr	r3, [pc, #12]	; (80045c4 <miniDuelOfSpaces+0x1a0>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	3301      	adds	r3, #1
 80045ba:	4a02      	ldr	r2, [pc, #8]	; (80045c4 <miniDuelOfSpaces+0x1a0>)
 80045bc:	6013      	str	r3, [r2, #0]
	}
}
 80045be:	bf00      	nop
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	20000320 	.word	0x20000320
 80045c8:	0800add4 	.word	0x0800add4
 80045cc:	0800add8 	.word	0x0800add8
 80045d0:	0800addc 	.word	0x0800addc
 80045d4:	0800ad9c 	.word	0x0800ad9c
 80045d8:	0800ada0 	.word	0x0800ada0
 80045dc:	0800ada4 	.word	0x0800ada4
 80045e0:	0800ada8 	.word	0x0800ada8
 80045e4:	0800ad74 	.word	0x0800ad74
 80045e8:	0800ad78 	.word	0x0800ad78
 80045ec:	0800ad7c 	.word	0x0800ad7c
 80045f0:	0800adac 	.word	0x0800adac
 80045f4:	0800ad80 	.word	0x0800ad80
 80045f8:	0800ad84 	.word	0x0800ad84
 80045fc:	0800adc8 	.word	0x0800adc8
 8004600:	0800ad98 	.word	0x0800ad98
 8004604:	0800ad88 	.word	0x0800ad88
 8004608:	0800add0 	.word	0x0800add0
 800460c:	0800ade0 	.word	0x0800ade0
 8004610:	200003ef 	.word	0x200003ef

08004614 <HAL_TIM_PeriodElapsedCallback>:
		break;
	default:
		break;
	}
}
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
//PERIOD: 5499
	if (htim->Instance == TIM2) {
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004624:	d101      	bne.n	800462a <HAL_TIM_PeriodElapsedCallback+0x16>
//		if(!gameStarted)
		MENU_Animation_TIM2();
 8004626:	f7fc f941 	bl	80008ac <MENU_Animation_TIM2>
			blockJoystick();
		}*/
	}

//PERIOD: 299
	if (htim->Instance == TIM3) {
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a11      	ldr	r2, [pc, #68]	; (8004674 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d10c      	bne.n	800464e <HAL_TIM_PeriodElapsedCallback+0x3a>
		getJoystickDirection(VR);
 8004634:	4810      	ldr	r0, [pc, #64]	; (8004678 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8004636:	f7fe fced 	bl	8003014 <getJoystickDirection>
		getJoystickLed();
 800463a:	f7fe fc65 	bl	8002f08 <getJoystickLed>
		Press = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 800463e:	2108      	movs	r1, #8
 8004640:	480e      	ldr	r0, [pc, #56]	; (800467c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8004642:	f002 fe9b 	bl	800737c <HAL_GPIO_ReadPin>
 8004646:	4603      	mov	r3, r0
 8004648:	461a      	mov	r2, r3
 800464a:	4b0d      	ldr	r3, [pc, #52]	; (8004680 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800464c:	701a      	strb	r2, [r3, #0]
//
//		}
	}

//PERIOD: 2599
	if (htim->Instance == TIM4) {
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a0c      	ldr	r2, [pc, #48]	; (8004684 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d101      	bne.n	800465c <HAL_TIM_PeriodElapsedCallback+0x48>
		MENU();
 8004658:	f7fb ff56 	bl	8000508 <MENU>

	}

//PERIOD: 1899
	if (htim->Instance == TIM5) {
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a09      	ldr	r2, [pc, #36]	; (8004688 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d101      	bne.n	800466a <HAL_TIM_PeriodElapsedCallback+0x56>
		MENU_Animation_TIM5();
 8004666:	f7fc f955 	bl	8000914 <MENU_Animation_TIM5>
//		}
	}
	if (htim->Instance == TIM13) {

	}
}
 800466a:	bf00      	nop
 800466c:	3708      	adds	r7, #8
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	40000400 	.word	0x40000400
 8004678:	20001188 	.word	0x20001188
 800467c:	40020000 	.word	0x40020000
 8004680:	20000404 	.word	0x20000404
 8004684:	40000800 	.word	0x40000800
 8004688:	40000c00 	.word	0x40000c00

0800468c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800468c:	b580      	push	{r7, lr}
 800468e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8004690:	f001 fa45 	bl	8005b1e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8004694:	f000 f87e 	bl	8004794 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8004698:	f000 fc8c 	bl	8004fb4 <MX_GPIO_Init>
	MX_DMA_Init();
 800469c:	f7fd ff1a 	bl	80024d4 <MX_DMA_Init>
	MX_ADC1_Init();
 80046a0:	f000 f908 	bl	80048b4 <MX_ADC1_Init>
	MX_I2C2_Init();
 80046a4:	f000 f966 	bl	8004974 <MX_I2C2_Init>
	MX_TIM3_Init();
 80046a8:	f000 f9f2 	bl	8004a90 <MX_TIM3_Init>
	MX_TIM4_Init();
 80046ac:	f000 fa3e 	bl	8004b2c <MX_TIM4_Init>
	MX_TIM2_Init();
 80046b0:	f000 f9a0 	bl	80049f4 <MX_TIM2_Init>
	MX_TIM5_Init();
 80046b4:	f000 fa8a 	bl	8004bcc <MX_TIM5_Init>
	MX_SPI1_Init();
 80046b8:	f000 fcea 	bl	8005090 <MX_SPI1_Init>
	MX_TIM6_Init();
 80046bc:	f000 fad6 	bl	8004c6c <MX_TIM6_Init>
	MX_TIM7_Init();
 80046c0:	f000 fb0c 	bl	8004cdc <MX_TIM7_Init>
	MX_TIM8_Init();
 80046c4:	f000 fb42 	bl	8004d4c <MX_TIM8_Init>
	MX_TIM9_Init();
 80046c8:	f000 fb94 	bl	8004df4 <MX_TIM9_Init>
	MX_TIM10_Init();
 80046cc:	f000 fbcc 	bl	8004e68 <MX_TIM10_Init>
	MX_TIM11_Init();
 80046d0:	f000 fbee 	bl	8004eb0 <MX_TIM11_Init>
	MX_TIM12_Init();
 80046d4:	f000 fc10 	bl	8004ef8 <MX_TIM12_Init>
	MX_TIM13_Init();
 80046d8:	f000 fc48 	bl	8004f6c <MX_TIM13_Init>
	/* USER CODE BEGIN 2 */

	lcd_init();
 80046dc:	f7fd ffba 	bl	8002654 <lcd_init>
	HAL_TIM_Base_Start_IT(&htim2);
 80046e0:	481e      	ldr	r0, [pc, #120]	; (800475c <main+0xd0>)
 80046e2:	f005 fd6b 	bl	800a1bc <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 80046e6:	481e      	ldr	r0, [pc, #120]	; (8004760 <main+0xd4>)
 80046e8:	f005 fd68 	bl	800a1bc <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim4);
 80046ec:	481d      	ldr	r0, [pc, #116]	; (8004764 <main+0xd8>)
 80046ee:	f005 fd65 	bl	800a1bc <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim5);
 80046f2:	481d      	ldr	r0, [pc, #116]	; (8004768 <main+0xdc>)
 80046f4:	f005 fd62 	bl	800a1bc <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim6);
 80046f8:	481c      	ldr	r0, [pc, #112]	; (800476c <main+0xe0>)
 80046fa:	f005 fd5f 	bl	800a1bc <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 80046fe:	481c      	ldr	r0, [pc, #112]	; (8004770 <main+0xe4>)
 8004700:	f005 fd5c 	bl	800a1bc <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim8);
 8004704:	481b      	ldr	r0, [pc, #108]	; (8004774 <main+0xe8>)
 8004706:	f005 fd59 	bl	800a1bc <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim9);
 800470a:	481b      	ldr	r0, [pc, #108]	; (8004778 <main+0xec>)
 800470c:	f005 fd56 	bl	800a1bc <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim10);
 8004710:	481a      	ldr	r0, [pc, #104]	; (800477c <main+0xf0>)
 8004712:	f005 fd53 	bl	800a1bc <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim11);
 8004716:	481a      	ldr	r0, [pc, #104]	; (8004780 <main+0xf4>)
 8004718:	f005 fd50 	bl	800a1bc <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim12);
 800471c:	4819      	ldr	r0, [pc, #100]	; (8004784 <main+0xf8>)
 800471e:	f005 fd4d 	bl	800a1bc <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 8004722:	4819      	ldr	r0, [pc, #100]	; (8004788 <main+0xfc>)
 8004724:	f005 fd4a 	bl	800a1bc <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, VR, 2);
 8004728:	2202      	movs	r2, #2
 800472a:	4918      	ldr	r1, [pc, #96]	; (800478c <main+0x100>)
 800472c:	4818      	ldr	r0, [pc, #96]	; (8004790 <main+0x104>)
 800472e:	f001 fbfb 	bl	8005f28 <HAL_ADC_Start_DMA>
	setAllPixelColor(0, 0, 0);
 8004732:	2200      	movs	r2, #0
 8004734:	2100      	movs	r1, #0
 8004736:	2000      	movs	r0, #0
 8004738:	f001 f994 	bl	8005a64 <setAllPixelColor>
	diodeArrayInit();
 800473c:	f7fd fea0 	bl	8002480 <diodeArrayInit>
	srand((int) VR[0] + (int) VR[1] + 5);
 8004740:	4b12      	ldr	r3, [pc, #72]	; (800478c <main+0x100>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	461a      	mov	r2, r3
 8004746:	4b11      	ldr	r3, [pc, #68]	; (800478c <main+0x100>)
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	4413      	add	r3, r2
 800474c:	3305      	adds	r3, #5
 800474e:	4618      	mov	r0, r3
 8004750:	f006 f946 	bl	800a9e0 <srand>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	initLEDMOSI();
 8004754:	f001 f9a6 	bl	8005aa4 <initLEDMOSI>
	while (1) {
 8004758:	e7fe      	b.n	8004758 <main+0xcc>
 800475a:	bf00      	nop
 800475c:	200013b8 	.word	0x200013b8
 8004760:	200011d0 	.word	0x200011d0
 8004764:	200010bc 	.word	0x200010bc
 8004768:	20001190 	.word	0x20001190
 800476c:	20001338 	.word	0x20001338
 8004770:	20001438 	.word	0x20001438
 8004774:	2000107c 	.word	0x2000107c
 8004778:	20001378 	.word	0x20001378
 800477c:	200010fc 	.word	0x200010fc
 8004780:	20001298 	.word	0x20001298
 8004784:	200013f8 	.word	0x200013f8
 8004788:	20001258 	.word	0x20001258
 800478c:	20001188 	.word	0x20001188
 8004790:	20001210 	.word	0x20001210

08004794 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8004794:	b580      	push	{r7, lr}
 8004796:	b0b4      	sub	sp, #208	; 0xd0
 8004798:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800479a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800479e:	2230      	movs	r2, #48	; 0x30
 80047a0:	2100      	movs	r1, #0
 80047a2:	4618      	mov	r0, r3
 80047a4:	f006 f914 	bl	800a9d0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80047a8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80047ac:	2200      	movs	r2, #0
 80047ae:	601a      	str	r2, [r3, #0]
 80047b0:	605a      	str	r2, [r3, #4]
 80047b2:	609a      	str	r2, [r3, #8]
 80047b4:	60da      	str	r2, [r3, #12]
 80047b6:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 80047b8:	f107 0308 	add.w	r3, r7, #8
 80047bc:	2284      	movs	r2, #132	; 0x84
 80047be:	2100      	movs	r1, #0
 80047c0:	4618      	mov	r0, r3
 80047c2:	f006 f905 	bl	800a9d0 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80047c6:	4b39      	ldr	r3, [pc, #228]	; (80048ac <SystemClock_Config+0x118>)
 80047c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ca:	4a38      	ldr	r2, [pc, #224]	; (80048ac <SystemClock_Config+0x118>)
 80047cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047d0:	6413      	str	r3, [r2, #64]	; 0x40
 80047d2:	4b36      	ldr	r3, [pc, #216]	; (80048ac <SystemClock_Config+0x118>)
 80047d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047da:	607b      	str	r3, [r7, #4]
 80047dc:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80047de:	4b34      	ldr	r3, [pc, #208]	; (80048b0 <SystemClock_Config+0x11c>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a33      	ldr	r2, [pc, #204]	; (80048b0 <SystemClock_Config+0x11c>)
 80047e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80047e8:	6013      	str	r3, [r2, #0]
 80047ea:	4b31      	ldr	r3, [pc, #196]	; (80048b0 <SystemClock_Config+0x11c>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80047f2:	603b      	str	r3, [r7, #0]
 80047f4:	683b      	ldr	r3, [r7, #0]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80047f6:	2301      	movs	r3, #1
 80047f8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80047fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004800:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004804:	2302      	movs	r3, #2
 8004806:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800480a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800480e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	RCC_OscInitStruct.PLL.PLLM = 4;
 8004812:	2304      	movs	r3, #4
 8004814:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	RCC_OscInitStruct.PLL.PLLN = 192;
 8004818:	23c0      	movs	r3, #192	; 0xc0
 800481a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800481e:	2302      	movs	r3, #2
 8004820:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8004824:	2302      	movs	r3, #2
 8004826:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800482a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800482e:	4618      	mov	r0, r3
 8004830:	f003 fec4 	bl	80085bc <HAL_RCC_OscConfig>
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d001      	beq.n	800483e <SystemClock_Config+0xaa>
		Error_Handler();
 800483a:	f000 fc21 	bl	8005080 <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 800483e:	f003 fe6d 	bl	800851c <HAL_PWREx_EnableOverDrive>
 8004842:	4603      	mov	r3, r0
 8004844:	2b00      	cmp	r3, #0
 8004846:	d001      	beq.n	800484c <SystemClock_Config+0xb8>
		Error_Handler();
 8004848:	f000 fc1a 	bl	8005080 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800484c:	230f      	movs	r3, #15
 800484e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004852:	2302      	movs	r3, #2
 8004854:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004858:	2300      	movs	r3, #0
 800485a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800485e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004862:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004866:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800486a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK) {
 800486e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004872:	2106      	movs	r1, #6
 8004874:	4618      	mov	r0, r3
 8004876:	f004 f911 	bl	8008a9c <HAL_RCC_ClockConfig>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d001      	beq.n	8004884 <SystemClock_Config+0xf0>
		Error_Handler();
 8004880:	f000 fbfe 	bl	8005080 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8004884:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004888:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800488a:	2300      	movs	r3, #0
 800488c:	673b      	str	r3, [r7, #112]	; 0x70
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 800488e:	f107 0308 	add.w	r3, r7, #8
 8004892:	4618      	mov	r0, r3
 8004894:	f004 fac2 	bl	8008e1c <HAL_RCCEx_PeriphCLKConfig>
 8004898:	4603      	mov	r3, r0
 800489a:	2b00      	cmp	r3, #0
 800489c:	d001      	beq.n	80048a2 <SystemClock_Config+0x10e>
		Error_Handler();
 800489e:	f000 fbef 	bl	8005080 <Error_Handler>
	}
}
 80048a2:	bf00      	nop
 80048a4:	37d0      	adds	r7, #208	; 0xd0
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	40023800 	.word	0x40023800
 80048b0:	40007000 	.word	0x40007000

080048b4 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b084      	sub	sp, #16
 80048b8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80048ba:	463b      	mov	r3, r7
 80048bc:	2200      	movs	r2, #0
 80048be:	601a      	str	r2, [r3, #0]
 80048c0:	605a      	str	r2, [r3, #4]
 80048c2:	609a      	str	r2, [r3, #8]
 80048c4:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 80048c6:	4b28      	ldr	r3, [pc, #160]	; (8004968 <MX_ADC1_Init+0xb4>)
 80048c8:	4a28      	ldr	r2, [pc, #160]	; (800496c <MX_ADC1_Init+0xb8>)
 80048ca:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80048cc:	4b26      	ldr	r3, [pc, #152]	; (8004968 <MX_ADC1_Init+0xb4>)
 80048ce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80048d2:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80048d4:	4b24      	ldr	r3, [pc, #144]	; (8004968 <MX_ADC1_Init+0xb4>)
 80048d6:	2200      	movs	r2, #0
 80048d8:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80048da:	4b23      	ldr	r3, [pc, #140]	; (8004968 <MX_ADC1_Init+0xb4>)
 80048dc:	2201      	movs	r2, #1
 80048de:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 80048e0:	4b21      	ldr	r3, [pc, #132]	; (8004968 <MX_ADC1_Init+0xb4>)
 80048e2:	2201      	movs	r2, #1
 80048e4:	619a      	str	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80048e6:	4b20      	ldr	r3, [pc, #128]	; (8004968 <MX_ADC1_Init+0xb4>)
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80048ee:	4b1e      	ldr	r3, [pc, #120]	; (8004968 <MX_ADC1_Init+0xb4>)
 80048f0:	2200      	movs	r2, #0
 80048f2:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80048f4:	4b1c      	ldr	r3, [pc, #112]	; (8004968 <MX_ADC1_Init+0xb4>)
 80048f6:	4a1e      	ldr	r2, [pc, #120]	; (8004970 <MX_ADC1_Init+0xbc>)
 80048f8:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80048fa:	4b1b      	ldr	r3, [pc, #108]	; (8004968 <MX_ADC1_Init+0xb4>)
 80048fc:	2200      	movs	r2, #0
 80048fe:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 2;
 8004900:	4b19      	ldr	r3, [pc, #100]	; (8004968 <MX_ADC1_Init+0xb4>)
 8004902:	2202      	movs	r2, #2
 8004904:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8004906:	4b18      	ldr	r3, [pc, #96]	; (8004968 <MX_ADC1_Init+0xb4>)
 8004908:	2201      	movs	r2, #1
 800490a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800490e:	4b16      	ldr	r3, [pc, #88]	; (8004968 <MX_ADC1_Init+0xb4>)
 8004910:	2201      	movs	r2, #1
 8004912:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8004914:	4814      	ldr	r0, [pc, #80]	; (8004968 <MX_ADC1_Init+0xb4>)
 8004916:	f001 f981 	bl	8005c1c <HAL_ADC_Init>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d001      	beq.n	8004924 <MX_ADC1_Init+0x70>
		Error_Handler();
 8004920:	f000 fbae 	bl	8005080 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 8004924:	2304      	movs	r3, #4
 8004926:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8004928:	2301      	movs	r3, #1
 800492a:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800492c:	2307      	movs	r3, #7
 800492e:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8004930:	463b      	mov	r3, r7
 8004932:	4619      	mov	r1, r3
 8004934:	480c      	ldr	r0, [pc, #48]	; (8004968 <MX_ADC1_Init+0xb4>)
 8004936:	f001 fc0d 	bl	8006154 <HAL_ADC_ConfigChannel>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d001      	beq.n	8004944 <MX_ADC1_Init+0x90>
		Error_Handler();
 8004940:	f000 fb9e 	bl	8005080 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 8004944:	2305      	movs	r3, #5
 8004946:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8004948:	2302      	movs	r3, #2
 800494a:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800494c:	463b      	mov	r3, r7
 800494e:	4619      	mov	r1, r3
 8004950:	4805      	ldr	r0, [pc, #20]	; (8004968 <MX_ADC1_Init+0xb4>)
 8004952:	f001 fbff 	bl	8006154 <HAL_ADC_ConfigChannel>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d001      	beq.n	8004960 <MX_ADC1_Init+0xac>
		Error_Handler();
 800495c:	f000 fb90 	bl	8005080 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8004960:	bf00      	nop
 8004962:	3710      	adds	r7, #16
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}
 8004968:	20001210 	.word	0x20001210
 800496c:	40012000 	.word	0x40012000
 8004970:	0f000001 	.word	0x0f000001

08004974 <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 8004974:	b580      	push	{r7, lr}
 8004976:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8004978:	4b1b      	ldr	r3, [pc, #108]	; (80049e8 <MX_I2C2_Init+0x74>)
 800497a:	4a1c      	ldr	r2, [pc, #112]	; (80049ec <MX_I2C2_Init+0x78>)
 800497c:	601a      	str	r2, [r3, #0]
	hi2c2.Init.Timing = 0x20303E5D;
 800497e:	4b1a      	ldr	r3, [pc, #104]	; (80049e8 <MX_I2C2_Init+0x74>)
 8004980:	4a1b      	ldr	r2, [pc, #108]	; (80049f0 <MX_I2C2_Init+0x7c>)
 8004982:	605a      	str	r2, [r3, #4]
	hi2c2.Init.OwnAddress1 = 0;
 8004984:	4b18      	ldr	r3, [pc, #96]	; (80049e8 <MX_I2C2_Init+0x74>)
 8004986:	2200      	movs	r2, #0
 8004988:	609a      	str	r2, [r3, #8]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800498a:	4b17      	ldr	r3, [pc, #92]	; (80049e8 <MX_I2C2_Init+0x74>)
 800498c:	2201      	movs	r2, #1
 800498e:	60da      	str	r2, [r3, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004990:	4b15      	ldr	r3, [pc, #84]	; (80049e8 <MX_I2C2_Init+0x74>)
 8004992:	2200      	movs	r2, #0
 8004994:	611a      	str	r2, [r3, #16]
	hi2c2.Init.OwnAddress2 = 0;
 8004996:	4b14      	ldr	r3, [pc, #80]	; (80049e8 <MX_I2C2_Init+0x74>)
 8004998:	2200      	movs	r2, #0
 800499a:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800499c:	4b12      	ldr	r3, [pc, #72]	; (80049e8 <MX_I2C2_Init+0x74>)
 800499e:	2200      	movs	r2, #0
 80049a0:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80049a2:	4b11      	ldr	r3, [pc, #68]	; (80049e8 <MX_I2C2_Init+0x74>)
 80049a4:	2200      	movs	r2, #0
 80049a6:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80049a8:	4b0f      	ldr	r3, [pc, #60]	; (80049e8 <MX_I2C2_Init+0x74>)
 80049aa:	2200      	movs	r2, #0
 80049ac:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 80049ae:	480e      	ldr	r0, [pc, #56]	; (80049e8 <MX_I2C2_Init+0x74>)
 80049b0:	f002 fd30 	bl	8007414 <HAL_I2C_Init>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d001      	beq.n	80049be <MX_I2C2_Init+0x4a>
		Error_Handler();
 80049ba:	f000 fb61 	bl	8005080 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE)
 80049be:	2100      	movs	r1, #0
 80049c0:	4809      	ldr	r0, [pc, #36]	; (80049e8 <MX_I2C2_Init+0x74>)
 80049c2:	f003 fd14 	bl	80083ee <HAL_I2CEx_ConfigAnalogFilter>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d001      	beq.n	80049d0 <MX_I2C2_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 80049cc:	f000 fb58 	bl	8005080 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK) {
 80049d0:	2100      	movs	r1, #0
 80049d2:	4805      	ldr	r0, [pc, #20]	; (80049e8 <MX_I2C2_Init+0x74>)
 80049d4:	f003 fd56 	bl	8008484 <HAL_I2CEx_ConfigDigitalFilter>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d001      	beq.n	80049e2 <MX_I2C2_Init+0x6e>
		Error_Handler();
 80049de:	f000 fb4f 	bl	8005080 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 80049e2:	bf00      	nop
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	2000113c 	.word	0x2000113c
 80049ec:	40005800 	.word	0x40005800
 80049f0:	20303e5d 	.word	0x20303e5d

080049f4 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b088      	sub	sp, #32
 80049f8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80049fa:	f107 0310 	add.w	r3, r7, #16
 80049fe:	2200      	movs	r2, #0
 8004a00:	601a      	str	r2, [r3, #0]
 8004a02:	605a      	str	r2, [r3, #4]
 8004a04:	609a      	str	r2, [r3, #8]
 8004a06:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004a08:	1d3b      	adds	r3, r7, #4
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	601a      	str	r2, [r3, #0]
 8004a0e:	605a      	str	r2, [r3, #4]
 8004a10:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8004a12:	4b1e      	ldr	r3, [pc, #120]	; (8004a8c <MX_TIM2_Init+0x98>)
 8004a14:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004a18:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 9599;
 8004a1a:	4b1c      	ldr	r3, [pc, #112]	; (8004a8c <MX_TIM2_Init+0x98>)
 8004a1c:	f242 527f 	movw	r2, #9599	; 0x257f
 8004a20:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a22:	4b1a      	ldr	r3, [pc, #104]	; (8004a8c <MX_TIM2_Init+0x98>)
 8004a24:	2200      	movs	r2, #0
 8004a26:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 5499;
 8004a28:	4b18      	ldr	r3, [pc, #96]	; (8004a8c <MX_TIM2_Init+0x98>)
 8004a2a:	f241 527b 	movw	r2, #5499	; 0x157b
 8004a2e:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004a30:	4b16      	ldr	r3, [pc, #88]	; (8004a8c <MX_TIM2_Init+0x98>)
 8004a32:	2200      	movs	r2, #0
 8004a34:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004a36:	4b15      	ldr	r3, [pc, #84]	; (8004a8c <MX_TIM2_Init+0x98>)
 8004a38:	2200      	movs	r2, #0
 8004a3a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8004a3c:	4813      	ldr	r0, [pc, #76]	; (8004a8c <MX_TIM2_Init+0x98>)
 8004a3e:	f005 fb91 	bl	800a164 <HAL_TIM_Base_Init>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d001      	beq.n	8004a4c <MX_TIM2_Init+0x58>
		Error_Handler();
 8004a48:	f000 fb1a 	bl	8005080 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004a4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a50:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8004a52:	f107 0310 	add.w	r3, r7, #16
 8004a56:	4619      	mov	r1, r3
 8004a58:	480c      	ldr	r0, [pc, #48]	; (8004a8c <MX_TIM2_Init+0x98>)
 8004a5a:	f005 fcf9 	bl	800a450 <HAL_TIM_ConfigClockSource>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d001      	beq.n	8004a68 <MX_TIM2_Init+0x74>
		Error_Handler();
 8004a64:	f000 fb0c 	bl	8005080 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8004a70:	1d3b      	adds	r3, r7, #4
 8004a72:	4619      	mov	r1, r3
 8004a74:	4805      	ldr	r0, [pc, #20]	; (8004a8c <MX_TIM2_Init+0x98>)
 8004a76:	f005 ff07 	bl	800a888 <HAL_TIMEx_MasterConfigSynchronization>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d001      	beq.n	8004a84 <MX_TIM2_Init+0x90>
			!= HAL_OK) {
		Error_Handler();
 8004a80:	f000 fafe 	bl	8005080 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8004a84:	bf00      	nop
 8004a86:	3720      	adds	r7, #32
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}
 8004a8c:	200013b8 	.word	0x200013b8

08004a90 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b088      	sub	sp, #32
 8004a94:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8004a96:	f107 0310 	add.w	r3, r7, #16
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	601a      	str	r2, [r3, #0]
 8004a9e:	605a      	str	r2, [r3, #4]
 8004aa0:	609a      	str	r2, [r3, #8]
 8004aa2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004aa4:	1d3b      	adds	r3, r7, #4
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	601a      	str	r2, [r3, #0]
 8004aaa:	605a      	str	r2, [r3, #4]
 8004aac:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8004aae:	4b1d      	ldr	r3, [pc, #116]	; (8004b24 <MX_TIM3_Init+0x94>)
 8004ab0:	4a1d      	ldr	r2, [pc, #116]	; (8004b28 <MX_TIM3_Init+0x98>)
 8004ab2:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 9599;
 8004ab4:	4b1b      	ldr	r3, [pc, #108]	; (8004b24 <MX_TIM3_Init+0x94>)
 8004ab6:	f242 527f 	movw	r2, #9599	; 0x257f
 8004aba:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004abc:	4b19      	ldr	r3, [pc, #100]	; (8004b24 <MX_TIM3_Init+0x94>)
 8004abe:	2200      	movs	r2, #0
 8004ac0:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 39;
 8004ac2:	4b18      	ldr	r3, [pc, #96]	; (8004b24 <MX_TIM3_Init+0x94>)
 8004ac4:	2227      	movs	r2, #39	; 0x27
 8004ac6:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ac8:	4b16      	ldr	r3, [pc, #88]	; (8004b24 <MX_TIM3_Init+0x94>)
 8004aca:	2200      	movs	r2, #0
 8004acc:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004ace:	4b15      	ldr	r3, [pc, #84]	; (8004b24 <MX_TIM3_Init+0x94>)
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8004ad4:	4813      	ldr	r0, [pc, #76]	; (8004b24 <MX_TIM3_Init+0x94>)
 8004ad6:	f005 fb45 	bl	800a164 <HAL_TIM_Base_Init>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d001      	beq.n	8004ae4 <MX_TIM3_Init+0x54>
		Error_Handler();
 8004ae0:	f000 face 	bl	8005080 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004ae4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ae8:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8004aea:	f107 0310 	add.w	r3, r7, #16
 8004aee:	4619      	mov	r1, r3
 8004af0:	480c      	ldr	r0, [pc, #48]	; (8004b24 <MX_TIM3_Init+0x94>)
 8004af2:	f005 fcad 	bl	800a450 <HAL_TIM_ConfigClockSource>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d001      	beq.n	8004b00 <MX_TIM3_Init+0x70>
		Error_Handler();
 8004afc:	f000 fac0 	bl	8005080 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b00:	2300      	movs	r3, #0
 8004b02:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b04:	2300      	movs	r3, #0
 8004b06:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8004b08:	1d3b      	adds	r3, r7, #4
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	4805      	ldr	r0, [pc, #20]	; (8004b24 <MX_TIM3_Init+0x94>)
 8004b0e:	f005 febb 	bl	800a888 <HAL_TIMEx_MasterConfigSynchronization>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d001      	beq.n	8004b1c <MX_TIM3_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8004b18:	f000 fab2 	bl	8005080 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8004b1c:	bf00      	nop
 8004b1e:	3720      	adds	r7, #32
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	200011d0 	.word	0x200011d0
 8004b28:	40000400 	.word	0x40000400

08004b2c <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b088      	sub	sp, #32
 8004b30:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8004b32:	f107 0310 	add.w	r3, r7, #16
 8004b36:	2200      	movs	r2, #0
 8004b38:	601a      	str	r2, [r3, #0]
 8004b3a:	605a      	str	r2, [r3, #4]
 8004b3c:	609a      	str	r2, [r3, #8]
 8004b3e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004b40:	1d3b      	adds	r3, r7, #4
 8004b42:	2200      	movs	r2, #0
 8004b44:	601a      	str	r2, [r3, #0]
 8004b46:	605a      	str	r2, [r3, #4]
 8004b48:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8004b4a:	4b1e      	ldr	r3, [pc, #120]	; (8004bc4 <MX_TIM4_Init+0x98>)
 8004b4c:	4a1e      	ldr	r2, [pc, #120]	; (8004bc8 <MX_TIM4_Init+0x9c>)
 8004b4e:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 9599;
 8004b50:	4b1c      	ldr	r3, [pc, #112]	; (8004bc4 <MX_TIM4_Init+0x98>)
 8004b52:	f242 527f 	movw	r2, #9599	; 0x257f
 8004b56:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b58:	4b1a      	ldr	r3, [pc, #104]	; (8004bc4 <MX_TIM4_Init+0x98>)
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 2599;
 8004b5e:	4b19      	ldr	r3, [pc, #100]	; (8004bc4 <MX_TIM4_Init+0x98>)
 8004b60:	f640 2227 	movw	r2, #2599	; 0xa27
 8004b64:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b66:	4b17      	ldr	r3, [pc, #92]	; (8004bc4 <MX_TIM4_Init+0x98>)
 8004b68:	2200      	movs	r2, #0
 8004b6a:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004b6c:	4b15      	ldr	r3, [pc, #84]	; (8004bc4 <MX_TIM4_Init+0x98>)
 8004b6e:	2200      	movs	r2, #0
 8004b70:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8004b72:	4814      	ldr	r0, [pc, #80]	; (8004bc4 <MX_TIM4_Init+0x98>)
 8004b74:	f005 faf6 	bl	800a164 <HAL_TIM_Base_Init>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d001      	beq.n	8004b82 <MX_TIM4_Init+0x56>
		Error_Handler();
 8004b7e:	f000 fa7f 	bl	8005080 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004b82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b86:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8004b88:	f107 0310 	add.w	r3, r7, #16
 8004b8c:	4619      	mov	r1, r3
 8004b8e:	480d      	ldr	r0, [pc, #52]	; (8004bc4 <MX_TIM4_Init+0x98>)
 8004b90:	f005 fc5e 	bl	800a450 <HAL_TIM_ConfigClockSource>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d001      	beq.n	8004b9e <MX_TIM4_Init+0x72>
		Error_Handler();
 8004b9a:	f000 fa71 	bl	8005080 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8004ba6:	1d3b      	adds	r3, r7, #4
 8004ba8:	4619      	mov	r1, r3
 8004baa:	4806      	ldr	r0, [pc, #24]	; (8004bc4 <MX_TIM4_Init+0x98>)
 8004bac:	f005 fe6c 	bl	800a888 <HAL_TIMEx_MasterConfigSynchronization>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d001      	beq.n	8004bba <MX_TIM4_Init+0x8e>
			!= HAL_OK) {
		Error_Handler();
 8004bb6:	f000 fa63 	bl	8005080 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8004bba:	bf00      	nop
 8004bbc:	3720      	adds	r7, #32
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	200010bc 	.word	0x200010bc
 8004bc8:	40000800 	.word	0x40000800

08004bcc <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b088      	sub	sp, #32
 8004bd0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8004bd2:	f107 0310 	add.w	r3, r7, #16
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	601a      	str	r2, [r3, #0]
 8004bda:	605a      	str	r2, [r3, #4]
 8004bdc:	609a      	str	r2, [r3, #8]
 8004bde:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004be0:	1d3b      	adds	r3, r7, #4
 8004be2:	2200      	movs	r2, #0
 8004be4:	601a      	str	r2, [r3, #0]
 8004be6:	605a      	str	r2, [r3, #4]
 8004be8:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8004bea:	4b1e      	ldr	r3, [pc, #120]	; (8004c64 <MX_TIM5_Init+0x98>)
 8004bec:	4a1e      	ldr	r2, [pc, #120]	; (8004c68 <MX_TIM5_Init+0x9c>)
 8004bee:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 9599;
 8004bf0:	4b1c      	ldr	r3, [pc, #112]	; (8004c64 <MX_TIM5_Init+0x98>)
 8004bf2:	f242 527f 	movw	r2, #9599	; 0x257f
 8004bf6:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004bf8:	4b1a      	ldr	r3, [pc, #104]	; (8004c64 <MX_TIM5_Init+0x98>)
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 1899;
 8004bfe:	4b19      	ldr	r3, [pc, #100]	; (8004c64 <MX_TIM5_Init+0x98>)
 8004c00:	f240 726b 	movw	r2, #1899	; 0x76b
 8004c04:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c06:	4b17      	ldr	r3, [pc, #92]	; (8004c64 <MX_TIM5_Init+0x98>)
 8004c08:	2200      	movs	r2, #0
 8004c0a:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c0c:	4b15      	ldr	r3, [pc, #84]	; (8004c64 <MX_TIM5_Init+0x98>)
 8004c0e:	2200      	movs	r2, #0
 8004c10:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 8004c12:	4814      	ldr	r0, [pc, #80]	; (8004c64 <MX_TIM5_Init+0x98>)
 8004c14:	f005 faa6 	bl	800a164 <HAL_TIM_Base_Init>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d001      	beq.n	8004c22 <MX_TIM5_Init+0x56>
		Error_Handler();
 8004c1e:	f000 fa2f 	bl	8005080 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004c22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c26:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 8004c28:	f107 0310 	add.w	r3, r7, #16
 8004c2c:	4619      	mov	r1, r3
 8004c2e:	480d      	ldr	r0, [pc, #52]	; (8004c64 <MX_TIM5_Init+0x98>)
 8004c30:	f005 fc0e 	bl	800a450 <HAL_TIM_ConfigClockSource>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d001      	beq.n	8004c3e <MX_TIM5_Init+0x72>
		Error_Handler();
 8004c3a:	f000 fa21 	bl	8005080 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c42:	2300      	movs	r3, #0
 8004c44:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 8004c46:	1d3b      	adds	r3, r7, #4
 8004c48:	4619      	mov	r1, r3
 8004c4a:	4806      	ldr	r0, [pc, #24]	; (8004c64 <MX_TIM5_Init+0x98>)
 8004c4c:	f005 fe1c 	bl	800a888 <HAL_TIMEx_MasterConfigSynchronization>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d001      	beq.n	8004c5a <MX_TIM5_Init+0x8e>
			!= HAL_OK) {
		Error_Handler();
 8004c56:	f000 fa13 	bl	8005080 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 8004c5a:	bf00      	nop
 8004c5c:	3720      	adds	r7, #32
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop
 8004c64:	20001190 	.word	0x20001190
 8004c68:	40000c00 	.word	0x40000c00

08004c6c <MX_TIM6_Init>:
/**
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void) {
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b084      	sub	sp, #16
 8004c70:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004c72:	1d3b      	adds	r3, r7, #4
 8004c74:	2200      	movs	r2, #0
 8004c76:	601a      	str	r2, [r3, #0]
 8004c78:	605a      	str	r2, [r3, #4]
 8004c7a:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 8004c7c:	4b15      	ldr	r3, [pc, #84]	; (8004cd4 <MX_TIM6_Init+0x68>)
 8004c7e:	4a16      	ldr	r2, [pc, #88]	; (8004cd8 <MX_TIM6_Init+0x6c>)
 8004c80:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 9599;
 8004c82:	4b14      	ldr	r3, [pc, #80]	; (8004cd4 <MX_TIM6_Init+0x68>)
 8004c84:	f242 527f 	movw	r2, #9599	; 0x257f
 8004c88:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c8a:	4b12      	ldr	r3, [pc, #72]	; (8004cd4 <MX_TIM6_Init+0x68>)
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 999;
 8004c90:	4b10      	ldr	r3, [pc, #64]	; (8004cd4 <MX_TIM6_Init+0x68>)
 8004c92:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004c96:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c98:	4b0e      	ldr	r3, [pc, #56]	; (8004cd4 <MX_TIM6_Init+0x68>)
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 8004c9e:	480d      	ldr	r0, [pc, #52]	; (8004cd4 <MX_TIM6_Init+0x68>)
 8004ca0:	f005 fa60 	bl	800a164 <HAL_TIM_Base_Init>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d001      	beq.n	8004cae <MX_TIM6_Init+0x42>
		Error_Handler();
 8004caa:	f000 f9e9 	bl	8005080 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig)
 8004cb6:	1d3b      	adds	r3, r7, #4
 8004cb8:	4619      	mov	r1, r3
 8004cba:	4806      	ldr	r0, [pc, #24]	; (8004cd4 <MX_TIM6_Init+0x68>)
 8004cbc:	f005 fde4 	bl	800a888 <HAL_TIMEx_MasterConfigSynchronization>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d001      	beq.n	8004cca <MX_TIM6_Init+0x5e>
			!= HAL_OK) {
		Error_Handler();
 8004cc6:	f000 f9db 	bl	8005080 <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 8004cca:	bf00      	nop
 8004ccc:	3710      	adds	r7, #16
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	20001338 	.word	0x20001338
 8004cd8:	40001000 	.word	0x40001000

08004cdc <MX_TIM7_Init>:
/**
 * @brief TIM7 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM7_Init(void) {
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b084      	sub	sp, #16
 8004ce0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM7_Init 0 */

	/* USER CODE END TIM7_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004ce2:	1d3b      	adds	r3, r7, #4
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	601a      	str	r2, [r3, #0]
 8004ce8:	605a      	str	r2, [r3, #4]
 8004cea:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM7_Init 1 */

	/* USER CODE END TIM7_Init 1 */
	htim7.Instance = TIM7;
 8004cec:	4b15      	ldr	r3, [pc, #84]	; (8004d44 <MX_TIM7_Init+0x68>)
 8004cee:	4a16      	ldr	r2, [pc, #88]	; (8004d48 <MX_TIM7_Init+0x6c>)
 8004cf0:	601a      	str	r2, [r3, #0]
	htim7.Init.Prescaler = 9599;
 8004cf2:	4b14      	ldr	r3, [pc, #80]	; (8004d44 <MX_TIM7_Init+0x68>)
 8004cf4:	f242 527f 	movw	r2, #9599	; 0x257f
 8004cf8:	605a      	str	r2, [r3, #4]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004cfa:	4b12      	ldr	r3, [pc, #72]	; (8004d44 <MX_TIM7_Init+0x68>)
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	609a      	str	r2, [r3, #8]
	htim7.Init.Period = 4799;
 8004d00:	4b10      	ldr	r3, [pc, #64]	; (8004d44 <MX_TIM7_Init+0x68>)
 8004d02:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8004d06:	60da      	str	r2, [r3, #12]
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d08:	4b0e      	ldr	r3, [pc, #56]	; (8004d44 <MX_TIM7_Init+0x68>)
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 8004d0e:	480d      	ldr	r0, [pc, #52]	; (8004d44 <MX_TIM7_Init+0x68>)
 8004d10:	f005 fa28 	bl	800a164 <HAL_TIM_Base_Init>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d001      	beq.n	8004d1e <MX_TIM7_Init+0x42>
		Error_Handler();
 8004d1a:	f000 f9b1 	bl	8005080 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d22:	2300      	movs	r3, #0
 8004d24:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig)
 8004d26:	1d3b      	adds	r3, r7, #4
 8004d28:	4619      	mov	r1, r3
 8004d2a:	4806      	ldr	r0, [pc, #24]	; (8004d44 <MX_TIM7_Init+0x68>)
 8004d2c:	f005 fdac 	bl	800a888 <HAL_TIMEx_MasterConfigSynchronization>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d001      	beq.n	8004d3a <MX_TIM7_Init+0x5e>
			!= HAL_OK) {
		Error_Handler();
 8004d36:	f000 f9a3 	bl	8005080 <Error_Handler>
	}
	/* USER CODE BEGIN TIM7_Init 2 */

	/* USER CODE END TIM7_Init 2 */

}
 8004d3a:	bf00      	nop
 8004d3c:	3710      	adds	r7, #16
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	bf00      	nop
 8004d44:	20001438 	.word	0x20001438
 8004d48:	40001400 	.word	0x40001400

08004d4c <MX_TIM8_Init>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b088      	sub	sp, #32
 8004d50:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8004d52:	f107 0310 	add.w	r3, r7, #16
 8004d56:	2200      	movs	r2, #0
 8004d58:	601a      	str	r2, [r3, #0]
 8004d5a:	605a      	str	r2, [r3, #4]
 8004d5c:	609a      	str	r2, [r3, #8]
 8004d5e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004d60:	1d3b      	adds	r3, r7, #4
 8004d62:	2200      	movs	r2, #0
 8004d64:	601a      	str	r2, [r3, #0]
 8004d66:	605a      	str	r2, [r3, #4]
 8004d68:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 8004d6a:	4b20      	ldr	r3, [pc, #128]	; (8004dec <MX_TIM8_Init+0xa0>)
 8004d6c:	4a20      	ldr	r2, [pc, #128]	; (8004df0 <MX_TIM8_Init+0xa4>)
 8004d6e:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 9599;
 8004d70:	4b1e      	ldr	r3, [pc, #120]	; (8004dec <MX_TIM8_Init+0xa0>)
 8004d72:	f242 527f 	movw	r2, #9599	; 0x257f
 8004d76:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d78:	4b1c      	ldr	r3, [pc, #112]	; (8004dec <MX_TIM8_Init+0xa0>)
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 19998;
 8004d7e:	4b1b      	ldr	r3, [pc, #108]	; (8004dec <MX_TIM8_Init+0xa0>)
 8004d80:	f644 621e 	movw	r2, #19998	; 0x4e1e
 8004d84:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d86:	4b19      	ldr	r3, [pc, #100]	; (8004dec <MX_TIM8_Init+0xa0>)
 8004d88:	2200      	movs	r2, #0
 8004d8a:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 8004d8c:	4b17      	ldr	r3, [pc, #92]	; (8004dec <MX_TIM8_Init+0xa0>)
 8004d8e:	2200      	movs	r2, #0
 8004d90:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d92:	4b16      	ldr	r3, [pc, #88]	; (8004dec <MX_TIM8_Init+0xa0>)
 8004d94:	2200      	movs	r2, #0
 8004d96:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK) {
 8004d98:	4814      	ldr	r0, [pc, #80]	; (8004dec <MX_TIM8_Init+0xa0>)
 8004d9a:	f005 f9e3 	bl	800a164 <HAL_TIM_Base_Init>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d001      	beq.n	8004da8 <MX_TIM8_Init+0x5c>
		Error_Handler();
 8004da4:	f000 f96c 	bl	8005080 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004da8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004dac:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK) {
 8004dae:	f107 0310 	add.w	r3, r7, #16
 8004db2:	4619      	mov	r1, r3
 8004db4:	480d      	ldr	r0, [pc, #52]	; (8004dec <MX_TIM8_Init+0xa0>)
 8004db6:	f005 fb4b 	bl	800a450 <HAL_TIM_ConfigClockSource>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d001      	beq.n	8004dc4 <MX_TIM8_Init+0x78>
		Error_Handler();
 8004dc0:	f000 f95e 	bl	8005080 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig)
 8004dd0:	1d3b      	adds	r3, r7, #4
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	4805      	ldr	r0, [pc, #20]	; (8004dec <MX_TIM8_Init+0xa0>)
 8004dd6:	f005 fd57 	bl	800a888 <HAL_TIMEx_MasterConfigSynchronization>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d001      	beq.n	8004de4 <MX_TIM8_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 8004de0:	f000 f94e 	bl	8005080 <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */

}
 8004de4:	bf00      	nop
 8004de6:	3720      	adds	r7, #32
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	2000107c 	.word	0x2000107c
 8004df0:	40010400 	.word	0x40010400

08004df4 <MX_TIM9_Init>:
/**
 * @brief TIM9 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM9_Init(void) {
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM9_Init 0 */

	/* USER CODE END TIM9_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8004dfa:	463b      	mov	r3, r7
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	601a      	str	r2, [r3, #0]
 8004e00:	605a      	str	r2, [r3, #4]
 8004e02:	609a      	str	r2, [r3, #8]
 8004e04:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM9_Init 1 */

	/* USER CODE END TIM9_Init 1 */
	htim9.Instance = TIM9;
 8004e06:	4b16      	ldr	r3, [pc, #88]	; (8004e60 <MX_TIM9_Init+0x6c>)
 8004e08:	4a16      	ldr	r2, [pc, #88]	; (8004e64 <MX_TIM9_Init+0x70>)
 8004e0a:	601a      	str	r2, [r3, #0]
	htim9.Init.Prescaler = 9599;
 8004e0c:	4b14      	ldr	r3, [pc, #80]	; (8004e60 <MX_TIM9_Init+0x6c>)
 8004e0e:	f242 527f 	movw	r2, #9599	; 0x257f
 8004e12:	605a      	str	r2, [r3, #4]
	htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e14:	4b12      	ldr	r3, [pc, #72]	; (8004e60 <MX_TIM9_Init+0x6c>)
 8004e16:	2200      	movs	r2, #0
 8004e18:	609a      	str	r2, [r3, #8]
	htim9.Init.Period = 2099;
 8004e1a:	4b11      	ldr	r3, [pc, #68]	; (8004e60 <MX_TIM9_Init+0x6c>)
 8004e1c:	f640 0233 	movw	r2, #2099	; 0x833
 8004e20:	60da      	str	r2, [r3, #12]
	htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e22:	4b0f      	ldr	r3, [pc, #60]	; (8004e60 <MX_TIM9_Init+0x6c>)
 8004e24:	2200      	movs	r2, #0
 8004e26:	611a      	str	r2, [r3, #16]
	htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e28:	4b0d      	ldr	r3, [pc, #52]	; (8004e60 <MX_TIM9_Init+0x6c>)
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim9) != HAL_OK) {
 8004e2e:	480c      	ldr	r0, [pc, #48]	; (8004e60 <MX_TIM9_Init+0x6c>)
 8004e30:	f005 f998 	bl	800a164 <HAL_TIM_Base_Init>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d001      	beq.n	8004e3e <MX_TIM9_Init+0x4a>
		Error_Handler();
 8004e3a:	f000 f921 	bl	8005080 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004e3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e42:	603b      	str	r3, [r7, #0]
	if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK) {
 8004e44:	463b      	mov	r3, r7
 8004e46:	4619      	mov	r1, r3
 8004e48:	4805      	ldr	r0, [pc, #20]	; (8004e60 <MX_TIM9_Init+0x6c>)
 8004e4a:	f005 fb01 	bl	800a450 <HAL_TIM_ConfigClockSource>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d001      	beq.n	8004e58 <MX_TIM9_Init+0x64>
		Error_Handler();
 8004e54:	f000 f914 	bl	8005080 <Error_Handler>
	}
	/* USER CODE BEGIN TIM9_Init 2 */

	/* USER CODE END TIM9_Init 2 */

}
 8004e58:	bf00      	nop
 8004e5a:	3710      	adds	r7, #16
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	20001378 	.word	0x20001378
 8004e64:	40014000 	.word	0x40014000

08004e68 <MX_TIM10_Init>:
/**
 * @brief TIM10 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM10_Init(void) {
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	af00      	add	r7, sp, #0
	/* USER CODE END TIM10_Init 0 */

	/* USER CODE BEGIN TIM10_Init 1 */

	/* USER CODE END TIM10_Init 1 */
	htim10.Instance = TIM10;
 8004e6c:	4b0e      	ldr	r3, [pc, #56]	; (8004ea8 <MX_TIM10_Init+0x40>)
 8004e6e:	4a0f      	ldr	r2, [pc, #60]	; (8004eac <MX_TIM10_Init+0x44>)
 8004e70:	601a      	str	r2, [r3, #0]
	htim10.Init.Prescaler = 9599;
 8004e72:	4b0d      	ldr	r3, [pc, #52]	; (8004ea8 <MX_TIM10_Init+0x40>)
 8004e74:	f242 527f 	movw	r2, #9599	; 0x257f
 8004e78:	605a      	str	r2, [r3, #4]
	htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e7a:	4b0b      	ldr	r3, [pc, #44]	; (8004ea8 <MX_TIM10_Init+0x40>)
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	609a      	str	r2, [r3, #8]
	htim10.Init.Period = 1199;
 8004e80:	4b09      	ldr	r3, [pc, #36]	; (8004ea8 <MX_TIM10_Init+0x40>)
 8004e82:	f240 42af 	movw	r2, #1199	; 0x4af
 8004e86:	60da      	str	r2, [r3, #12]
	htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e88:	4b07      	ldr	r3, [pc, #28]	; (8004ea8 <MX_TIM10_Init+0x40>)
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	611a      	str	r2, [r3, #16]
	htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e8e:	4b06      	ldr	r3, [pc, #24]	; (8004ea8 <MX_TIM10_Init+0x40>)
 8004e90:	2200      	movs	r2, #0
 8004e92:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim10) != HAL_OK) {
 8004e94:	4804      	ldr	r0, [pc, #16]	; (8004ea8 <MX_TIM10_Init+0x40>)
 8004e96:	f005 f965 	bl	800a164 <HAL_TIM_Base_Init>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d001      	beq.n	8004ea4 <MX_TIM10_Init+0x3c>
		Error_Handler();
 8004ea0:	f000 f8ee 	bl	8005080 <Error_Handler>
	}
	/* USER CODE BEGIN TIM10_Init 2 */

	/* USER CODE END TIM10_Init 2 */

}
 8004ea4:	bf00      	nop
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	200010fc 	.word	0x200010fc
 8004eac:	40014400 	.word	0x40014400

08004eb0 <MX_TIM11_Init>:
/**
 * @brief TIM11 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM11_Init(void) {
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	af00      	add	r7, sp, #0
	/* USER CODE END TIM11_Init 0 */

	/* USER CODE BEGIN TIM11_Init 1 */

	/* USER CODE END TIM11_Init 1 */
	htim11.Instance = TIM11;
 8004eb4:	4b0e      	ldr	r3, [pc, #56]	; (8004ef0 <MX_TIM11_Init+0x40>)
 8004eb6:	4a0f      	ldr	r2, [pc, #60]	; (8004ef4 <MX_TIM11_Init+0x44>)
 8004eb8:	601a      	str	r2, [r3, #0]
	htim11.Init.Prescaler = 9599;
 8004eba:	4b0d      	ldr	r3, [pc, #52]	; (8004ef0 <MX_TIM11_Init+0x40>)
 8004ebc:	f242 527f 	movw	r2, #9599	; 0x257f
 8004ec0:	605a      	str	r2, [r3, #4]
	htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ec2:	4b0b      	ldr	r3, [pc, #44]	; (8004ef0 <MX_TIM11_Init+0x40>)
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	609a      	str	r2, [r3, #8]
	htim11.Init.Period = 2599;
 8004ec8:	4b09      	ldr	r3, [pc, #36]	; (8004ef0 <MX_TIM11_Init+0x40>)
 8004eca:	f640 2227 	movw	r2, #2599	; 0xa27
 8004ece:	60da      	str	r2, [r3, #12]
	htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ed0:	4b07      	ldr	r3, [pc, #28]	; (8004ef0 <MX_TIM11_Init+0x40>)
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	611a      	str	r2, [r3, #16]
	htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004ed6:	4b06      	ldr	r3, [pc, #24]	; (8004ef0 <MX_TIM11_Init+0x40>)
 8004ed8:	2200      	movs	r2, #0
 8004eda:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim11) != HAL_OK) {
 8004edc:	4804      	ldr	r0, [pc, #16]	; (8004ef0 <MX_TIM11_Init+0x40>)
 8004ede:	f005 f941 	bl	800a164 <HAL_TIM_Base_Init>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d001      	beq.n	8004eec <MX_TIM11_Init+0x3c>
		Error_Handler();
 8004ee8:	f000 f8ca 	bl	8005080 <Error_Handler>
	}
	/* USER CODE BEGIN TIM11_Init 2 */

	/* USER CODE END TIM11_Init 2 */

}
 8004eec:	bf00      	nop
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	20001298 	.word	0x20001298
 8004ef4:	40014800 	.word	0x40014800

08004ef8 <MX_TIM12_Init>:
/**
 * @brief TIM12 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM12_Init(void) {
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM12_Init 0 */

	/* USER CODE END TIM12_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8004efe:	463b      	mov	r3, r7
 8004f00:	2200      	movs	r2, #0
 8004f02:	601a      	str	r2, [r3, #0]
 8004f04:	605a      	str	r2, [r3, #4]
 8004f06:	609a      	str	r2, [r3, #8]
 8004f08:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM12_Init 1 */

	/* USER CODE END TIM12_Init 1 */
	htim12.Instance = TIM12;
 8004f0a:	4b16      	ldr	r3, [pc, #88]	; (8004f64 <MX_TIM12_Init+0x6c>)
 8004f0c:	4a16      	ldr	r2, [pc, #88]	; (8004f68 <MX_TIM12_Init+0x70>)
 8004f0e:	601a      	str	r2, [r3, #0]
	htim12.Init.Prescaler = 9599;
 8004f10:	4b14      	ldr	r3, [pc, #80]	; (8004f64 <MX_TIM12_Init+0x6c>)
 8004f12:	f242 527f 	movw	r2, #9599	; 0x257f
 8004f16:	605a      	str	r2, [r3, #4]
	htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f18:	4b12      	ldr	r3, [pc, #72]	; (8004f64 <MX_TIM12_Init+0x6c>)
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	609a      	str	r2, [r3, #8]
	htim12.Init.Period = 4300;
 8004f1e:	4b11      	ldr	r3, [pc, #68]	; (8004f64 <MX_TIM12_Init+0x6c>)
 8004f20:	f241 02cc 	movw	r2, #4300	; 0x10cc
 8004f24:	60da      	str	r2, [r3, #12]
	htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f26:	4b0f      	ldr	r3, [pc, #60]	; (8004f64 <MX_TIM12_Init+0x6c>)
 8004f28:	2200      	movs	r2, #0
 8004f2a:	611a      	str	r2, [r3, #16]
	htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f2c:	4b0d      	ldr	r3, [pc, #52]	; (8004f64 <MX_TIM12_Init+0x6c>)
 8004f2e:	2200      	movs	r2, #0
 8004f30:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim12) != HAL_OK) {
 8004f32:	480c      	ldr	r0, [pc, #48]	; (8004f64 <MX_TIM12_Init+0x6c>)
 8004f34:	f005 f916 	bl	800a164 <HAL_TIM_Base_Init>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d001      	beq.n	8004f42 <MX_TIM12_Init+0x4a>
		Error_Handler();
 8004f3e:	f000 f89f 	bl	8005080 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004f42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f46:	603b      	str	r3, [r7, #0]
	if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK) {
 8004f48:	463b      	mov	r3, r7
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	4805      	ldr	r0, [pc, #20]	; (8004f64 <MX_TIM12_Init+0x6c>)
 8004f4e:	f005 fa7f 	bl	800a450 <HAL_TIM_ConfigClockSource>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d001      	beq.n	8004f5c <MX_TIM12_Init+0x64>
		Error_Handler();
 8004f58:	f000 f892 	bl	8005080 <Error_Handler>
	}
	/* USER CODE BEGIN TIM12_Init 2 */

	/* USER CODE END TIM12_Init 2 */

}
 8004f5c:	bf00      	nop
 8004f5e:	3710      	adds	r7, #16
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	200013f8 	.word	0x200013f8
 8004f68:	40001800 	.word	0x40001800

08004f6c <MX_TIM13_Init>:
/**
 * @brief TIM13 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM13_Init(void) {
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	af00      	add	r7, sp, #0
	/* USER CODE END TIM13_Init 0 */

	/* USER CODE BEGIN TIM13_Init 1 */

	/* USER CODE END TIM13_Init 1 */
	htim13.Instance = TIM13;
 8004f70:	4b0e      	ldr	r3, [pc, #56]	; (8004fac <MX_TIM13_Init+0x40>)
 8004f72:	4a0f      	ldr	r2, [pc, #60]	; (8004fb0 <MX_TIM13_Init+0x44>)
 8004f74:	601a      	str	r2, [r3, #0]
	htim13.Init.Prescaler = 9599;
 8004f76:	4b0d      	ldr	r3, [pc, #52]	; (8004fac <MX_TIM13_Init+0x40>)
 8004f78:	f242 527f 	movw	r2, #9599	; 0x257f
 8004f7c:	605a      	str	r2, [r3, #4]
	htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f7e:	4b0b      	ldr	r3, [pc, #44]	; (8004fac <MX_TIM13_Init+0x40>)
 8004f80:	2200      	movs	r2, #0
 8004f82:	609a      	str	r2, [r3, #8]
	htim13.Init.Period = 1099;
 8004f84:	4b09      	ldr	r3, [pc, #36]	; (8004fac <MX_TIM13_Init+0x40>)
 8004f86:	f240 424b 	movw	r2, #1099	; 0x44b
 8004f8a:	60da      	str	r2, [r3, #12]
	htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f8c:	4b07      	ldr	r3, [pc, #28]	; (8004fac <MX_TIM13_Init+0x40>)
 8004f8e:	2200      	movs	r2, #0
 8004f90:	611a      	str	r2, [r3, #16]
	htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f92:	4b06      	ldr	r3, [pc, #24]	; (8004fac <MX_TIM13_Init+0x40>)
 8004f94:	2200      	movs	r2, #0
 8004f96:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim13) != HAL_OK) {
 8004f98:	4804      	ldr	r0, [pc, #16]	; (8004fac <MX_TIM13_Init+0x40>)
 8004f9a:	f005 f8e3 	bl	800a164 <HAL_TIM_Base_Init>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d001      	beq.n	8004fa8 <MX_TIM13_Init+0x3c>
		Error_Handler();
 8004fa4:	f000 f86c 	bl	8005080 <Error_Handler>
	}
	/* USER CODE BEGIN TIM13_Init 2 */

	/* USER CODE END TIM13_Init 2 */

}
 8004fa8:	bf00      	nop
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	20001258 	.word	0x20001258
 8004fb0:	40001c00 	.word	0x40001c00

08004fb4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b08a      	sub	sp, #40	; 0x28
 8004fb8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8004fba:	f107 0314 	add.w	r3, r7, #20
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	601a      	str	r2, [r3, #0]
 8004fc2:	605a      	str	r2, [r3, #4]
 8004fc4:	609a      	str	r2, [r3, #8]
 8004fc6:	60da      	str	r2, [r3, #12]
 8004fc8:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8004fca:	4b2a      	ldr	r3, [pc, #168]	; (8005074 <MX_GPIO_Init+0xc0>)
 8004fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fce:	4a29      	ldr	r2, [pc, #164]	; (8005074 <MX_GPIO_Init+0xc0>)
 8004fd0:	f043 0320 	orr.w	r3, r3, #32
 8004fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8004fd6:	4b27      	ldr	r3, [pc, #156]	; (8005074 <MX_GPIO_Init+0xc0>)
 8004fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fda:	f003 0320 	and.w	r3, r3, #32
 8004fde:	613b      	str	r3, [r7, #16]
 8004fe0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8004fe2:	4b24      	ldr	r3, [pc, #144]	; (8005074 <MX_GPIO_Init+0xc0>)
 8004fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe6:	4a23      	ldr	r2, [pc, #140]	; (8005074 <MX_GPIO_Init+0xc0>)
 8004fe8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fec:	6313      	str	r3, [r2, #48]	; 0x30
 8004fee:	4b21      	ldr	r3, [pc, #132]	; (8005074 <MX_GPIO_Init+0xc0>)
 8004ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ff6:	60fb      	str	r3, [r7, #12]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8004ffa:	4b1e      	ldr	r3, [pc, #120]	; (8005074 <MX_GPIO_Init+0xc0>)
 8004ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ffe:	4a1d      	ldr	r2, [pc, #116]	; (8005074 <MX_GPIO_Init+0xc0>)
 8005000:	f043 0301 	orr.w	r3, r3, #1
 8005004:	6313      	str	r3, [r2, #48]	; 0x30
 8005006:	4b1b      	ldr	r3, [pc, #108]	; (8005074 <MX_GPIO_Init+0xc0>)
 8005008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800500a:	f003 0301 	and.w	r3, r3, #1
 800500e:	60bb      	str	r3, [r7, #8]
 8005010:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8005012:	4b18      	ldr	r3, [pc, #96]	; (8005074 <MX_GPIO_Init+0xc0>)
 8005014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005016:	4a17      	ldr	r2, [pc, #92]	; (8005074 <MX_GPIO_Init+0xc0>)
 8005018:	f043 0302 	orr.w	r3, r3, #2
 800501c:	6313      	str	r3, [r2, #48]	; 0x30
 800501e:	4b15      	ldr	r3, [pc, #84]	; (8005074 <MX_GPIO_Init+0xc0>)
 8005020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005022:	f003 0302 	and.w	r3, r3, #2
 8005026:	607b      	str	r3, [r7, #4]
 8005028:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_14 | GPIO_PIN_7,
 800502a:	2200      	movs	r2, #0
 800502c:	f244 0181 	movw	r1, #16513	; 0x4081
 8005030:	4811      	ldr	r0, [pc, #68]	; (8005078 <MX_GPIO_Init+0xc4>)
 8005032:	f002 f9bb 	bl	80073ac <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : PA3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005036:	2308      	movs	r3, #8
 8005038:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800503a:	2300      	movs	r3, #0
 800503c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800503e:	2301      	movs	r3, #1
 8005040:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005042:	f107 0314 	add.w	r3, r7, #20
 8005046:	4619      	mov	r1, r3
 8005048:	480c      	ldr	r0, [pc, #48]	; (800507c <MX_GPIO_Init+0xc8>)
 800504a:	f001 ffed 	bl	8007028 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB0 PB14 PB7 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_14 | GPIO_PIN_7;
 800504e:	f244 0381 	movw	r3, #16513	; 0x4081
 8005052:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005054:	2301      	movs	r3, #1
 8005056:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005058:	2300      	movs	r3, #0
 800505a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800505c:	2300      	movs	r3, #0
 800505e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005060:	f107 0314 	add.w	r3, r7, #20
 8005064:	4619      	mov	r1, r3
 8005066:	4804      	ldr	r0, [pc, #16]	; (8005078 <MX_GPIO_Init+0xc4>)
 8005068:	f001 ffde 	bl	8007028 <HAL_GPIO_Init>

}
 800506c:	bf00      	nop
 800506e:	3728      	adds	r7, #40	; 0x28
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}
 8005074:	40023800 	.word	0x40023800
 8005078:	40020400 	.word	0x40020400
 800507c:	40020000 	.word	0x40020000

08005080 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8005080:	b480      	push	{r7}
 8005082:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8005084:	bf00      	nop
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr
	...

08005090 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
void MX_SPI1_Init(void)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8005094:	4b1b      	ldr	r3, [pc, #108]	; (8005104 <MX_SPI1_Init+0x74>)
 8005096:	4a1c      	ldr	r2, [pc, #112]	; (8005108 <MX_SPI1_Init+0x78>)
 8005098:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800509a:	4b1a      	ldr	r3, [pc, #104]	; (8005104 <MX_SPI1_Init+0x74>)
 800509c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80050a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80050a2:	4b18      	ldr	r3, [pc, #96]	; (8005104 <MX_SPI1_Init+0x74>)
 80050a4:	2200      	movs	r2, #0
 80050a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80050a8:	4b16      	ldr	r3, [pc, #88]	; (8005104 <MX_SPI1_Init+0x74>)
 80050aa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80050ae:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80050b0:	4b14      	ldr	r3, [pc, #80]	; (8005104 <MX_SPI1_Init+0x74>)
 80050b2:	2200      	movs	r2, #0
 80050b4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80050b6:	4b13      	ldr	r3, [pc, #76]	; (8005104 <MX_SPI1_Init+0x74>)
 80050b8:	2200      	movs	r2, #0
 80050ba:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80050bc:	4b11      	ldr	r3, [pc, #68]	; (8005104 <MX_SPI1_Init+0x74>)
 80050be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050c2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80050c4:	4b0f      	ldr	r3, [pc, #60]	; (8005104 <MX_SPI1_Init+0x74>)
 80050c6:	2220      	movs	r2, #32
 80050c8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80050ca:	4b0e      	ldr	r3, [pc, #56]	; (8005104 <MX_SPI1_Init+0x74>)
 80050cc:	2200      	movs	r2, #0
 80050ce:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80050d0:	4b0c      	ldr	r3, [pc, #48]	; (8005104 <MX_SPI1_Init+0x74>)
 80050d2:	2200      	movs	r2, #0
 80050d4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050d6:	4b0b      	ldr	r3, [pc, #44]	; (8005104 <MX_SPI1_Init+0x74>)
 80050d8:	2200      	movs	r2, #0
 80050da:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80050dc:	4b09      	ldr	r3, [pc, #36]	; (8005104 <MX_SPI1_Init+0x74>)
 80050de:	2207      	movs	r2, #7
 80050e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80050e2:	4b08      	ldr	r3, [pc, #32]	; (8005104 <MX_SPI1_Init+0x74>)
 80050e4:	2200      	movs	r2, #0
 80050e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80050e8:	4b06      	ldr	r3, [pc, #24]	; (8005104 <MX_SPI1_Init+0x74>)
 80050ea:	2200      	movs	r2, #0
 80050ec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80050ee:	4805      	ldr	r0, [pc, #20]	; (8005104 <MX_SPI1_Init+0x74>)
 80050f0:	f004 fa82 	bl	80095f8 <HAL_SPI_Init>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d001      	beq.n	80050fe <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80050fa:	f7ff ffc1 	bl	8005080 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80050fe:	bf00      	nop
 8005100:	bd80      	pop	{r7, pc}
 8005102:	bf00      	nop
 8005104:	20001478 	.word	0x20001478
 8005108:	40013000 	.word	0x40013000

0800510c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b08a      	sub	sp, #40	; 0x28
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005114:	f107 0314 	add.w	r3, r7, #20
 8005118:	2200      	movs	r2, #0
 800511a:	601a      	str	r2, [r3, #0]
 800511c:	605a      	str	r2, [r3, #4]
 800511e:	609a      	str	r2, [r3, #8]
 8005120:	60da      	str	r2, [r3, #12]
 8005122:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a32      	ldr	r2, [pc, #200]	; (80051f4 <HAL_SPI_MspInit+0xe8>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d15d      	bne.n	80051ea <HAL_SPI_MspInit+0xde>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800512e:	4b32      	ldr	r3, [pc, #200]	; (80051f8 <HAL_SPI_MspInit+0xec>)
 8005130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005132:	4a31      	ldr	r2, [pc, #196]	; (80051f8 <HAL_SPI_MspInit+0xec>)
 8005134:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005138:	6453      	str	r3, [r2, #68]	; 0x44
 800513a:	4b2f      	ldr	r3, [pc, #188]	; (80051f8 <HAL_SPI_MspInit+0xec>)
 800513c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800513e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005142:	613b      	str	r3, [r7, #16]
 8005144:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005146:	4b2c      	ldr	r3, [pc, #176]	; (80051f8 <HAL_SPI_MspInit+0xec>)
 8005148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800514a:	4a2b      	ldr	r2, [pc, #172]	; (80051f8 <HAL_SPI_MspInit+0xec>)
 800514c:	f043 0301 	orr.w	r3, r3, #1
 8005150:	6313      	str	r3, [r2, #48]	; 0x30
 8005152:	4b29      	ldr	r3, [pc, #164]	; (80051f8 <HAL_SPI_MspInit+0xec>)
 8005154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005156:	f003 0301 	and.w	r3, r3, #1
 800515a:	60fb      	str	r3, [r7, #12]
 800515c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800515e:	23a0      	movs	r3, #160	; 0xa0
 8005160:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005162:	2302      	movs	r3, #2
 8005164:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005166:	2300      	movs	r3, #0
 8005168:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800516a:	2303      	movs	r3, #3
 800516c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800516e:	2305      	movs	r3, #5
 8005170:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005172:	f107 0314 	add.w	r3, r7, #20
 8005176:	4619      	mov	r1, r3
 8005178:	4820      	ldr	r0, [pc, #128]	; (80051fc <HAL_SPI_MspInit+0xf0>)
 800517a:	f001 ff55 	bl	8007028 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800517e:	4b20      	ldr	r3, [pc, #128]	; (8005200 <HAL_SPI_MspInit+0xf4>)
 8005180:	4a20      	ldr	r2, [pc, #128]	; (8005204 <HAL_SPI_MspInit+0xf8>)
 8005182:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8005184:	4b1e      	ldr	r3, [pc, #120]	; (8005200 <HAL_SPI_MspInit+0xf4>)
 8005186:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800518a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800518c:	4b1c      	ldr	r3, [pc, #112]	; (8005200 <HAL_SPI_MspInit+0xf4>)
 800518e:	2240      	movs	r2, #64	; 0x40
 8005190:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005192:	4b1b      	ldr	r3, [pc, #108]	; (8005200 <HAL_SPI_MspInit+0xf4>)
 8005194:	2200      	movs	r2, #0
 8005196:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005198:	4b19      	ldr	r3, [pc, #100]	; (8005200 <HAL_SPI_MspInit+0xf4>)
 800519a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800519e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80051a0:	4b17      	ldr	r3, [pc, #92]	; (8005200 <HAL_SPI_MspInit+0xf4>)
 80051a2:	2200      	movs	r2, #0
 80051a4:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80051a6:	4b16      	ldr	r3, [pc, #88]	; (8005200 <HAL_SPI_MspInit+0xf4>)
 80051a8:	2200      	movs	r2, #0
 80051aa:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80051ac:	4b14      	ldr	r3, [pc, #80]	; (8005200 <HAL_SPI_MspInit+0xf4>)
 80051ae:	2200      	movs	r2, #0
 80051b0:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80051b2:	4b13      	ldr	r3, [pc, #76]	; (8005200 <HAL_SPI_MspInit+0xf4>)
 80051b4:	2200      	movs	r2, #0
 80051b6:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80051b8:	4b11      	ldr	r3, [pc, #68]	; (8005200 <HAL_SPI_MspInit+0xf4>)
 80051ba:	2200      	movs	r2, #0
 80051bc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80051be:	4810      	ldr	r0, [pc, #64]	; (8005200 <HAL_SPI_MspInit+0xf4>)
 80051c0:	f001 fb9a 	bl	80068f8 <HAL_DMA_Init>
 80051c4:	4603      	mov	r3, r0
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d001      	beq.n	80051ce <HAL_SPI_MspInit+0xc2>
    {
      Error_Handler();
 80051ca:	f7ff ff59 	bl	8005080 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a0b      	ldr	r2, [pc, #44]	; (8005200 <HAL_SPI_MspInit+0xf4>)
 80051d2:	655a      	str	r2, [r3, #84]	; 0x54
 80051d4:	4a0a      	ldr	r2, [pc, #40]	; (8005200 <HAL_SPI_MspInit+0xf4>)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80051da:	2200      	movs	r2, #0
 80051dc:	2100      	movs	r1, #0
 80051de:	2023      	movs	r0, #35	; 0x23
 80051e0:	f001 fb4d 	bl	800687e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80051e4:	2023      	movs	r0, #35	; 0x23
 80051e6:	f001 fb66 	bl	80068b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80051ea:	bf00      	nop
 80051ec:	3728      	adds	r7, #40	; 0x28
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
 80051f2:	bf00      	nop
 80051f4:	40013000 	.word	0x40013000
 80051f8:	40023800 	.word	0x40023800
 80051fc:	40020000 	.word	0x40020000
 8005200:	2000101c 	.word	0x2000101c
 8005204:	40026458 	.word	0x40026458

08005208 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800520e:	4b0f      	ldr	r3, [pc, #60]	; (800524c <HAL_MspInit+0x44>)
 8005210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005212:	4a0e      	ldr	r2, [pc, #56]	; (800524c <HAL_MspInit+0x44>)
 8005214:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005218:	6413      	str	r3, [r2, #64]	; 0x40
 800521a:	4b0c      	ldr	r3, [pc, #48]	; (800524c <HAL_MspInit+0x44>)
 800521c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005222:	607b      	str	r3, [r7, #4]
 8005224:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005226:	4b09      	ldr	r3, [pc, #36]	; (800524c <HAL_MspInit+0x44>)
 8005228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800522a:	4a08      	ldr	r2, [pc, #32]	; (800524c <HAL_MspInit+0x44>)
 800522c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005230:	6453      	str	r3, [r2, #68]	; 0x44
 8005232:	4b06      	ldr	r3, [pc, #24]	; (800524c <HAL_MspInit+0x44>)
 8005234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005236:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800523a:	603b      	str	r3, [r7, #0]
 800523c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800523e:	bf00      	nop
 8005240:	370c      	adds	r7, #12
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr
 800524a:	bf00      	nop
 800524c:	40023800 	.word	0x40023800

08005250 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b08a      	sub	sp, #40	; 0x28
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005258:	f107 0314 	add.w	r3, r7, #20
 800525c:	2200      	movs	r2, #0
 800525e:	601a      	str	r2, [r3, #0]
 8005260:	605a      	str	r2, [r3, #4]
 8005262:	609a      	str	r2, [r3, #8]
 8005264:	60da      	str	r2, [r3, #12]
 8005266:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a31      	ldr	r2, [pc, #196]	; (8005334 <HAL_ADC_MspInit+0xe4>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d15b      	bne.n	800532a <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005272:	4b31      	ldr	r3, [pc, #196]	; (8005338 <HAL_ADC_MspInit+0xe8>)
 8005274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005276:	4a30      	ldr	r2, [pc, #192]	; (8005338 <HAL_ADC_MspInit+0xe8>)
 8005278:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800527c:	6453      	str	r3, [r2, #68]	; 0x44
 800527e:	4b2e      	ldr	r3, [pc, #184]	; (8005338 <HAL_ADC_MspInit+0xe8>)
 8005280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005286:	613b      	str	r3, [r7, #16]
 8005288:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800528a:	4b2b      	ldr	r3, [pc, #172]	; (8005338 <HAL_ADC_MspInit+0xe8>)
 800528c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800528e:	4a2a      	ldr	r2, [pc, #168]	; (8005338 <HAL_ADC_MspInit+0xe8>)
 8005290:	f043 0301 	orr.w	r3, r3, #1
 8005294:	6313      	str	r3, [r2, #48]	; 0x30
 8005296:	4b28      	ldr	r3, [pc, #160]	; (8005338 <HAL_ADC_MspInit+0xe8>)
 8005298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800529a:	f003 0301 	and.w	r3, r3, #1
 800529e:	60fb      	str	r3, [r7, #12]
 80052a0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80052a2:	2330      	movs	r3, #48	; 0x30
 80052a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80052a6:	2303      	movs	r3, #3
 80052a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052aa:	2300      	movs	r3, #0
 80052ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052ae:	f107 0314 	add.w	r3, r7, #20
 80052b2:	4619      	mov	r1, r3
 80052b4:	4821      	ldr	r0, [pc, #132]	; (800533c <HAL_ADC_MspInit+0xec>)
 80052b6:	f001 feb7 	bl	8007028 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80052ba:	4b21      	ldr	r3, [pc, #132]	; (8005340 <HAL_ADC_MspInit+0xf0>)
 80052bc:	4a21      	ldr	r2, [pc, #132]	; (8005344 <HAL_ADC_MspInit+0xf4>)
 80052be:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80052c0:	4b1f      	ldr	r3, [pc, #124]	; (8005340 <HAL_ADC_MspInit+0xf0>)
 80052c2:	2200      	movs	r2, #0
 80052c4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80052c6:	4b1e      	ldr	r3, [pc, #120]	; (8005340 <HAL_ADC_MspInit+0xf0>)
 80052c8:	2200      	movs	r2, #0
 80052ca:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80052cc:	4b1c      	ldr	r3, [pc, #112]	; (8005340 <HAL_ADC_MspInit+0xf0>)
 80052ce:	2200      	movs	r2, #0
 80052d0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80052d2:	4b1b      	ldr	r3, [pc, #108]	; (8005340 <HAL_ADC_MspInit+0xf0>)
 80052d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80052d8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80052da:	4b19      	ldr	r3, [pc, #100]	; (8005340 <HAL_ADC_MspInit+0xf0>)
 80052dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80052e0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80052e2:	4b17      	ldr	r3, [pc, #92]	; (8005340 <HAL_ADC_MspInit+0xf0>)
 80052e4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80052e8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80052ea:	4b15      	ldr	r3, [pc, #84]	; (8005340 <HAL_ADC_MspInit+0xf0>)
 80052ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80052f0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80052f2:	4b13      	ldr	r3, [pc, #76]	; (8005340 <HAL_ADC_MspInit+0xf0>)
 80052f4:	2200      	movs	r2, #0
 80052f6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80052f8:	4b11      	ldr	r3, [pc, #68]	; (8005340 <HAL_ADC_MspInit+0xf0>)
 80052fa:	2200      	movs	r2, #0
 80052fc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80052fe:	4810      	ldr	r0, [pc, #64]	; (8005340 <HAL_ADC_MspInit+0xf0>)
 8005300:	f001 fafa 	bl	80068f8 <HAL_DMA_Init>
 8005304:	4603      	mov	r3, r0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d001      	beq.n	800530e <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 800530a:	f7ff feb9 	bl	8005080 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a0b      	ldr	r2, [pc, #44]	; (8005340 <HAL_ADC_MspInit+0xf0>)
 8005312:	639a      	str	r2, [r3, #56]	; 0x38
 8005314:	4a0a      	ldr	r2, [pc, #40]	; (8005340 <HAL_ADC_MspInit+0xf0>)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800531a:	2200      	movs	r2, #0
 800531c:	2100      	movs	r1, #0
 800531e:	2012      	movs	r0, #18
 8005320:	f001 faad 	bl	800687e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8005324:	2012      	movs	r0, #18
 8005326:	f001 fac6 	bl	80068b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800532a:	bf00      	nop
 800532c:	3728      	adds	r7, #40	; 0x28
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop
 8005334:	40012000 	.word	0x40012000
 8005338:	40023800 	.word	0x40023800
 800533c:	40020000 	.word	0x40020000
 8005340:	200012d8 	.word	0x200012d8
 8005344:	40026410 	.word	0x40026410

08005348 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b08a      	sub	sp, #40	; 0x28
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005350:	f107 0314 	add.w	r3, r7, #20
 8005354:	2200      	movs	r2, #0
 8005356:	601a      	str	r2, [r3, #0]
 8005358:	605a      	str	r2, [r3, #4]
 800535a:	609a      	str	r2, [r3, #8]
 800535c:	60da      	str	r2, [r3, #12]
 800535e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a1f      	ldr	r2, [pc, #124]	; (80053e4 <HAL_I2C_MspInit+0x9c>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d137      	bne.n	80053da <HAL_I2C_MspInit+0x92>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800536a:	4b1f      	ldr	r3, [pc, #124]	; (80053e8 <HAL_I2C_MspInit+0xa0>)
 800536c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800536e:	4a1e      	ldr	r2, [pc, #120]	; (80053e8 <HAL_I2C_MspInit+0xa0>)
 8005370:	f043 0320 	orr.w	r3, r3, #32
 8005374:	6313      	str	r3, [r2, #48]	; 0x30
 8005376:	4b1c      	ldr	r3, [pc, #112]	; (80053e8 <HAL_I2C_MspInit+0xa0>)
 8005378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800537a:	f003 0320 	and.w	r3, r3, #32
 800537e:	613b      	str	r3, [r7, #16]
 8005380:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005382:	2303      	movs	r3, #3
 8005384:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005386:	2312      	movs	r3, #18
 8005388:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800538a:	2301      	movs	r3, #1
 800538c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800538e:	2303      	movs	r3, #3
 8005390:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8005392:	2304      	movs	r3, #4
 8005394:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005396:	f107 0314 	add.w	r3, r7, #20
 800539a:	4619      	mov	r1, r3
 800539c:	4813      	ldr	r0, [pc, #76]	; (80053ec <HAL_I2C_MspInit+0xa4>)
 800539e:	f001 fe43 	bl	8007028 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80053a2:	4b11      	ldr	r3, [pc, #68]	; (80053e8 <HAL_I2C_MspInit+0xa0>)
 80053a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a6:	4a10      	ldr	r2, [pc, #64]	; (80053e8 <HAL_I2C_MspInit+0xa0>)
 80053a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80053ac:	6413      	str	r3, [r2, #64]	; 0x40
 80053ae:	4b0e      	ldr	r3, [pc, #56]	; (80053e8 <HAL_I2C_MspInit+0xa0>)
 80053b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053b6:	60fb      	str	r3, [r7, #12]
 80053b8:	68fb      	ldr	r3, [r7, #12]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80053ba:	2200      	movs	r2, #0
 80053bc:	2100      	movs	r1, #0
 80053be:	2021      	movs	r0, #33	; 0x21
 80053c0:	f001 fa5d 	bl	800687e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80053c4:	2021      	movs	r0, #33	; 0x21
 80053c6:	f001 fa76 	bl	80068b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 80053ca:	2200      	movs	r2, #0
 80053cc:	2100      	movs	r1, #0
 80053ce:	2022      	movs	r0, #34	; 0x22
 80053d0:	f001 fa55 	bl	800687e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80053d4:	2022      	movs	r0, #34	; 0x22
 80053d6:	f001 fa6e 	bl	80068b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80053da:	bf00      	nop
 80053dc:	3728      	adds	r7, #40	; 0x28
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	bf00      	nop
 80053e4:	40005800 	.word	0x40005800
 80053e8:	40023800 	.word	0x40023800
 80053ec:	40021400 	.word	0x40021400

080053f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b08e      	sub	sp, #56	; 0x38
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005400:	d114      	bne.n	800542c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005402:	4b9f      	ldr	r3, [pc, #636]	; (8005680 <HAL_TIM_Base_MspInit+0x290>)
 8005404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005406:	4a9e      	ldr	r2, [pc, #632]	; (8005680 <HAL_TIM_Base_MspInit+0x290>)
 8005408:	f043 0301 	orr.w	r3, r3, #1
 800540c:	6413      	str	r3, [r2, #64]	; 0x40
 800540e:	4b9c      	ldr	r3, [pc, #624]	; (8005680 <HAL_TIM_Base_MspInit+0x290>)
 8005410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005412:	f003 0301 	and.w	r3, r3, #1
 8005416:	637b      	str	r3, [r7, #52]	; 0x34
 8005418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800541a:	2200      	movs	r2, #0
 800541c:	2100      	movs	r1, #0
 800541e:	201c      	movs	r0, #28
 8005420:	f001 fa2d 	bl	800687e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005424:	201c      	movs	r0, #28
 8005426:	f001 fa46 	bl	80068b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 800542a:	e124      	b.n	8005676 <HAL_TIM_Base_MspInit+0x286>
  else if(htim_base->Instance==TIM3)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a94      	ldr	r2, [pc, #592]	; (8005684 <HAL_TIM_Base_MspInit+0x294>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d114      	bne.n	8005460 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005436:	4b92      	ldr	r3, [pc, #584]	; (8005680 <HAL_TIM_Base_MspInit+0x290>)
 8005438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543a:	4a91      	ldr	r2, [pc, #580]	; (8005680 <HAL_TIM_Base_MspInit+0x290>)
 800543c:	f043 0302 	orr.w	r3, r3, #2
 8005440:	6413      	str	r3, [r2, #64]	; 0x40
 8005442:	4b8f      	ldr	r3, [pc, #572]	; (8005680 <HAL_TIM_Base_MspInit+0x290>)
 8005444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005446:	f003 0302 	and.w	r3, r3, #2
 800544a:	633b      	str	r3, [r7, #48]	; 0x30
 800544c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800544e:	2200      	movs	r2, #0
 8005450:	2100      	movs	r1, #0
 8005452:	201d      	movs	r0, #29
 8005454:	f001 fa13 	bl	800687e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005458:	201d      	movs	r0, #29
 800545a:	f001 fa2c 	bl	80068b6 <HAL_NVIC_EnableIRQ>
}
 800545e:	e10a      	b.n	8005676 <HAL_TIM_Base_MspInit+0x286>
  else if(htim_base->Instance==TIM4)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a88      	ldr	r2, [pc, #544]	; (8005688 <HAL_TIM_Base_MspInit+0x298>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d114      	bne.n	8005494 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800546a:	4b85      	ldr	r3, [pc, #532]	; (8005680 <HAL_TIM_Base_MspInit+0x290>)
 800546c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546e:	4a84      	ldr	r2, [pc, #528]	; (8005680 <HAL_TIM_Base_MspInit+0x290>)
 8005470:	f043 0304 	orr.w	r3, r3, #4
 8005474:	6413      	str	r3, [r2, #64]	; 0x40
 8005476:	4b82      	ldr	r3, [pc, #520]	; (8005680 <HAL_TIM_Base_MspInit+0x290>)
 8005478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547a:	f003 0304 	and.w	r3, r3, #4
 800547e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8005482:	2200      	movs	r2, #0
 8005484:	2100      	movs	r1, #0
 8005486:	201e      	movs	r0, #30
 8005488:	f001 f9f9 	bl	800687e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800548c:	201e      	movs	r0, #30
 800548e:	f001 fa12 	bl	80068b6 <HAL_NVIC_EnableIRQ>
}
 8005492:	e0f0      	b.n	8005676 <HAL_TIM_Base_MspInit+0x286>
  else if(htim_base->Instance==TIM5)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a7c      	ldr	r2, [pc, #496]	; (800568c <HAL_TIM_Base_MspInit+0x29c>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d114      	bne.n	80054c8 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800549e:	4b78      	ldr	r3, [pc, #480]	; (8005680 <HAL_TIM_Base_MspInit+0x290>)
 80054a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a2:	4a77      	ldr	r2, [pc, #476]	; (8005680 <HAL_TIM_Base_MspInit+0x290>)
 80054a4:	f043 0308 	orr.w	r3, r3, #8
 80054a8:	6413      	str	r3, [r2, #64]	; 0x40
 80054aa:	4b75      	ldr	r3, [pc, #468]	; (8005680 <HAL_TIM_Base_MspInit+0x290>)
 80054ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ae:	f003 0308 	and.w	r3, r3, #8
 80054b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80054b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80054b6:	2200      	movs	r2, #0
 80054b8:	2100      	movs	r1, #0
 80054ba:	2032      	movs	r0, #50	; 0x32
 80054bc:	f001 f9df 	bl	800687e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80054c0:	2032      	movs	r0, #50	; 0x32
 80054c2:	f001 f9f8 	bl	80068b6 <HAL_NVIC_EnableIRQ>
}
 80054c6:	e0d6      	b.n	8005676 <HAL_TIM_Base_MspInit+0x286>
  else if(htim_base->Instance==TIM6)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a70      	ldr	r2, [pc, #448]	; (8005690 <HAL_TIM_Base_MspInit+0x2a0>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d114      	bne.n	80054fc <HAL_TIM_Base_MspInit+0x10c>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80054d2:	4b6b      	ldr	r3, [pc, #428]	; (8005680 <HAL_TIM_Base_MspInit+0x290>)
 80054d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d6:	4a6a      	ldr	r2, [pc, #424]	; (8005680 <HAL_TIM_Base_MspInit+0x290>)
 80054d8:	f043 0310 	orr.w	r3, r3, #16
 80054dc:	6413      	str	r3, [r2, #64]	; 0x40
 80054de:	4b68      	ldr	r3, [pc, #416]	; (8005680 <HAL_TIM_Base_MspInit+0x290>)
 80054e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e2:	f003 0310 	and.w	r3, r3, #16
 80054e6:	627b      	str	r3, [r7, #36]	; 0x24
 80054e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80054ea:	2200      	movs	r2, #0
 80054ec:	2100      	movs	r1, #0
 80054ee:	2036      	movs	r0, #54	; 0x36
 80054f0:	f001 f9c5 	bl	800687e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80054f4:	2036      	movs	r0, #54	; 0x36
 80054f6:	f001 f9de 	bl	80068b6 <HAL_NVIC_EnableIRQ>
}
 80054fa:	e0bc      	b.n	8005676 <HAL_TIM_Base_MspInit+0x286>
  else if(htim_base->Instance==TIM7)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a64      	ldr	r2, [pc, #400]	; (8005694 <HAL_TIM_Base_MspInit+0x2a4>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d114      	bne.n	8005530 <HAL_TIM_Base_MspInit+0x140>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005506:	4b5e      	ldr	r3, [pc, #376]	; (8005680 <HAL_TIM_Base_MspInit+0x290>)
 8005508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550a:	4a5d      	ldr	r2, [pc, #372]	; (8005680 <HAL_TIM_Base_MspInit+0x290>)
 800550c:	f043 0320 	orr.w	r3, r3, #32
 8005510:	6413      	str	r3, [r2, #64]	; 0x40
 8005512:	4b5b      	ldr	r3, [pc, #364]	; (8005680 <HAL_TIM_Base_MspInit+0x290>)
 8005514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005516:	f003 0320 	and.w	r3, r3, #32
 800551a:	623b      	str	r3, [r7, #32]
 800551c:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800551e:	2200      	movs	r2, #0
 8005520:	2100      	movs	r1, #0
 8005522:	2037      	movs	r0, #55	; 0x37
 8005524:	f001 f9ab 	bl	800687e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005528:	2037      	movs	r0, #55	; 0x37
 800552a:	f001 f9c4 	bl	80068b6 <HAL_NVIC_EnableIRQ>
}
 800552e:	e0a2      	b.n	8005676 <HAL_TIM_Base_MspInit+0x286>
  else if(htim_base->Instance==TIM8)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a58      	ldr	r2, [pc, #352]	; (8005698 <HAL_TIM_Base_MspInit+0x2a8>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d11c      	bne.n	8005574 <HAL_TIM_Base_MspInit+0x184>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800553a:	4b51      	ldr	r3, [pc, #324]	; (8005680 <HAL_TIM_Base_MspInit+0x290>)
 800553c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800553e:	4a50      	ldr	r2, [pc, #320]	; (8005680 <HAL_TIM_Base_MspInit+0x290>)
 8005540:	f043 0302 	orr.w	r3, r3, #2
 8005544:	6453      	str	r3, [r2, #68]	; 0x44
 8005546:	4b4e      	ldr	r3, [pc, #312]	; (8005680 <HAL_TIM_Base_MspInit+0x290>)
 8005548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800554a:	f003 0302 	and.w	r3, r3, #2
 800554e:	61fb      	str	r3, [r7, #28]
 8005550:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8005552:	2200      	movs	r2, #0
 8005554:	2100      	movs	r1, #0
 8005556:	202b      	movs	r0, #43	; 0x2b
 8005558:	f001 f991 	bl	800687e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 800555c:	202b      	movs	r0, #43	; 0x2b
 800555e:	f001 f9aa 	bl	80068b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8005562:	2200      	movs	r2, #0
 8005564:	2100      	movs	r1, #0
 8005566:	202c      	movs	r0, #44	; 0x2c
 8005568:	f001 f989 	bl	800687e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800556c:	202c      	movs	r0, #44	; 0x2c
 800556e:	f001 f9a2 	bl	80068b6 <HAL_NVIC_EnableIRQ>
}
 8005572:	e080      	b.n	8005676 <HAL_TIM_Base_MspInit+0x286>
  else if(htim_base->Instance==TIM9)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a48      	ldr	r2, [pc, #288]	; (800569c <HAL_TIM_Base_MspInit+0x2ac>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d114      	bne.n	80055a8 <HAL_TIM_Base_MspInit+0x1b8>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800557e:	4b40      	ldr	r3, [pc, #256]	; (8005680 <HAL_TIM_Base_MspInit+0x290>)
 8005580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005582:	4a3f      	ldr	r2, [pc, #252]	; (8005680 <HAL_TIM_Base_MspInit+0x290>)
 8005584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005588:	6453      	str	r3, [r2, #68]	; 0x44
 800558a:	4b3d      	ldr	r3, [pc, #244]	; (8005680 <HAL_TIM_Base_MspInit+0x290>)
 800558c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800558e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005592:	61bb      	str	r3, [r7, #24]
 8005594:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8005596:	2200      	movs	r2, #0
 8005598:	2100      	movs	r1, #0
 800559a:	2018      	movs	r0, #24
 800559c:	f001 f96f 	bl	800687e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80055a0:	2018      	movs	r0, #24
 80055a2:	f001 f988 	bl	80068b6 <HAL_NVIC_EnableIRQ>
}
 80055a6:	e066      	b.n	8005676 <HAL_TIM_Base_MspInit+0x286>
  else if(htim_base->Instance==TIM10)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a3c      	ldr	r2, [pc, #240]	; (80056a0 <HAL_TIM_Base_MspInit+0x2b0>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d114      	bne.n	80055dc <HAL_TIM_Base_MspInit+0x1ec>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80055b2:	4b33      	ldr	r3, [pc, #204]	; (8005680 <HAL_TIM_Base_MspInit+0x290>)
 80055b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055b6:	4a32      	ldr	r2, [pc, #200]	; (8005680 <HAL_TIM_Base_MspInit+0x290>)
 80055b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055bc:	6453      	str	r3, [r2, #68]	; 0x44
 80055be:	4b30      	ldr	r3, [pc, #192]	; (8005680 <HAL_TIM_Base_MspInit+0x290>)
 80055c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055c6:	617b      	str	r3, [r7, #20]
 80055c8:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80055ca:	2200      	movs	r2, #0
 80055cc:	2100      	movs	r1, #0
 80055ce:	2019      	movs	r0, #25
 80055d0:	f001 f955 	bl	800687e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80055d4:	2019      	movs	r0, #25
 80055d6:	f001 f96e 	bl	80068b6 <HAL_NVIC_EnableIRQ>
}
 80055da:	e04c      	b.n	8005676 <HAL_TIM_Base_MspInit+0x286>
  else if(htim_base->Instance==TIM11)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a30      	ldr	r2, [pc, #192]	; (80056a4 <HAL_TIM_Base_MspInit+0x2b4>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d114      	bne.n	8005610 <HAL_TIM_Base_MspInit+0x220>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80055e6:	4b26      	ldr	r3, [pc, #152]	; (8005680 <HAL_TIM_Base_MspInit+0x290>)
 80055e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ea:	4a25      	ldr	r2, [pc, #148]	; (8005680 <HAL_TIM_Base_MspInit+0x290>)
 80055ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055f0:	6453      	str	r3, [r2, #68]	; 0x44
 80055f2:	4b23      	ldr	r3, [pc, #140]	; (8005680 <HAL_TIM_Base_MspInit+0x290>)
 80055f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055fa:	613b      	str	r3, [r7, #16]
 80055fc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80055fe:	2200      	movs	r2, #0
 8005600:	2100      	movs	r1, #0
 8005602:	201a      	movs	r0, #26
 8005604:	f001 f93b 	bl	800687e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8005608:	201a      	movs	r0, #26
 800560a:	f001 f954 	bl	80068b6 <HAL_NVIC_EnableIRQ>
}
 800560e:	e032      	b.n	8005676 <HAL_TIM_Base_MspInit+0x286>
  else if(htim_base->Instance==TIM12)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a24      	ldr	r2, [pc, #144]	; (80056a8 <HAL_TIM_Base_MspInit+0x2b8>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d114      	bne.n	8005644 <HAL_TIM_Base_MspInit+0x254>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800561a:	4b19      	ldr	r3, [pc, #100]	; (8005680 <HAL_TIM_Base_MspInit+0x290>)
 800561c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561e:	4a18      	ldr	r2, [pc, #96]	; (8005680 <HAL_TIM_Base_MspInit+0x290>)
 8005620:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005624:	6413      	str	r3, [r2, #64]	; 0x40
 8005626:	4b16      	ldr	r3, [pc, #88]	; (8005680 <HAL_TIM_Base_MspInit+0x290>)
 8005628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800562e:	60fb      	str	r3, [r7, #12]
 8005630:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8005632:	2200      	movs	r2, #0
 8005634:	2100      	movs	r1, #0
 8005636:	202b      	movs	r0, #43	; 0x2b
 8005638:	f001 f921 	bl	800687e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 800563c:	202b      	movs	r0, #43	; 0x2b
 800563e:	f001 f93a 	bl	80068b6 <HAL_NVIC_EnableIRQ>
}
 8005642:	e018      	b.n	8005676 <HAL_TIM_Base_MspInit+0x286>
  else if(htim_base->Instance==TIM13)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a18      	ldr	r2, [pc, #96]	; (80056ac <HAL_TIM_Base_MspInit+0x2bc>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d113      	bne.n	8005676 <HAL_TIM_Base_MspInit+0x286>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800564e:	4b0c      	ldr	r3, [pc, #48]	; (8005680 <HAL_TIM_Base_MspInit+0x290>)
 8005650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005652:	4a0b      	ldr	r2, [pc, #44]	; (8005680 <HAL_TIM_Base_MspInit+0x290>)
 8005654:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005658:	6413      	str	r3, [r2, #64]	; 0x40
 800565a:	4b09      	ldr	r3, [pc, #36]	; (8005680 <HAL_TIM_Base_MspInit+0x290>)
 800565c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005662:	60bb      	str	r3, [r7, #8]
 8005664:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8005666:	2200      	movs	r2, #0
 8005668:	2100      	movs	r1, #0
 800566a:	202c      	movs	r0, #44	; 0x2c
 800566c:	f001 f907 	bl	800687e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8005670:	202c      	movs	r0, #44	; 0x2c
 8005672:	f001 f920 	bl	80068b6 <HAL_NVIC_EnableIRQ>
}
 8005676:	bf00      	nop
 8005678:	3738      	adds	r7, #56	; 0x38
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
 800567e:	bf00      	nop
 8005680:	40023800 	.word	0x40023800
 8005684:	40000400 	.word	0x40000400
 8005688:	40000800 	.word	0x40000800
 800568c:	40000c00 	.word	0x40000c00
 8005690:	40001000 	.word	0x40001000
 8005694:	40001400 	.word	0x40001400
 8005698:	40010400 	.word	0x40010400
 800569c:	40014000 	.word	0x40014000
 80056a0:	40014400 	.word	0x40014400
 80056a4:	40014800 	.word	0x40014800
 80056a8:	40001800 	.word	0x40001800
 80056ac:	40001c00 	.word	0x40001c00

080056b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80056b0:	b480      	push	{r7}
 80056b2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80056b4:	bf00      	nop
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr

080056be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80056be:	b480      	push	{r7}
 80056c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80056c2:	e7fe      	b.n	80056c2 <HardFault_Handler+0x4>

080056c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80056c4:	b480      	push	{r7}
 80056c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80056c8:	e7fe      	b.n	80056c8 <MemManage_Handler+0x4>

080056ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80056ca:	b480      	push	{r7}
 80056cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80056ce:	e7fe      	b.n	80056ce <BusFault_Handler+0x4>

080056d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80056d0:	b480      	push	{r7}
 80056d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80056d4:	e7fe      	b.n	80056d4 <UsageFault_Handler+0x4>

080056d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80056d6:	b480      	push	{r7}
 80056d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80056da:	bf00      	nop
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80056e4:	b480      	push	{r7}
 80056e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80056e8:	bf00      	nop
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr

080056f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80056f2:	b480      	push	{r7}
 80056f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80056f6:	bf00      	nop
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005704:	f000 fa48 	bl	8005b98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
	HAL_SYSTICK_Callback();
 8005708:	f001 f8ef 	bl	80068ea <HAL_SYSTICK_Callback>
  /* USER CODE END SysTick_IRQn 1 */
}
 800570c:	bf00      	nop
 800570e:	bd80      	pop	{r7, pc}

08005710 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8005714:	4802      	ldr	r0, [pc, #8]	; (8005720 <ADC_IRQHandler+0x10>)
 8005716:	f000 fac5 	bl	8005ca4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800571a:	bf00      	nop
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop
 8005720:	20001210 	.word	0x20001210

08005724 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8005728:	4802      	ldr	r0, [pc, #8]	; (8005734 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800572a:	f004 fd71 	bl	800a210 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800572e:	bf00      	nop
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop
 8005734:	20001378 	.word	0x20001378

08005738 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 800573c:	4802      	ldr	r0, [pc, #8]	; (8005748 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800573e:	f004 fd67 	bl	800a210 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8005742:	bf00      	nop
 8005744:	bd80      	pop	{r7, pc}
 8005746:	bf00      	nop
 8005748:	200010fc 	.word	0x200010fc

0800574c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8005750:	4802      	ldr	r0, [pc, #8]	; (800575c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8005752:	f004 fd5d 	bl	800a210 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8005756:	bf00      	nop
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop
 800575c:	20001298 	.word	0x20001298

08005760 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005764:	4802      	ldr	r0, [pc, #8]	; (8005770 <TIM2_IRQHandler+0x10>)
 8005766:	f004 fd53 	bl	800a210 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800576a:	bf00      	nop
 800576c:	bd80      	pop	{r7, pc}
 800576e:	bf00      	nop
 8005770:	200013b8 	.word	0x200013b8

08005774 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005778:	4802      	ldr	r0, [pc, #8]	; (8005784 <TIM3_IRQHandler+0x10>)
 800577a:	f004 fd49 	bl	800a210 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800577e:	bf00      	nop
 8005780:	bd80      	pop	{r7, pc}
 8005782:	bf00      	nop
 8005784:	200011d0 	.word	0x200011d0

08005788 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800578c:	4802      	ldr	r0, [pc, #8]	; (8005798 <TIM4_IRQHandler+0x10>)
 800578e:	f004 fd3f 	bl	800a210 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8005792:	bf00      	nop
 8005794:	bd80      	pop	{r7, pc}
 8005796:	bf00      	nop
 8005798:	200010bc 	.word	0x200010bc

0800579c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80057a0:	4802      	ldr	r0, [pc, #8]	; (80057ac <I2C2_EV_IRQHandler+0x10>)
 80057a2:	f001 ffbb 	bl	800771c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80057a6:	bf00      	nop
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	bf00      	nop
 80057ac:	2000113c 	.word	0x2000113c

080057b0 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80057b4:	4802      	ldr	r0, [pc, #8]	; (80057c0 <I2C2_ER_IRQHandler+0x10>)
 80057b6:	f001 ffcb 	bl	8007750 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80057ba:	bf00      	nop
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	bf00      	nop
 80057c0:	2000113c 	.word	0x2000113c

080057c4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80057c8:	4802      	ldr	r0, [pc, #8]	; (80057d4 <SPI1_IRQHandler+0x10>)
 80057ca:	f004 f9f9 	bl	8009bc0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80057ce:	bf00      	nop
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	20001478 	.word	0x20001478

080057d8 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80057dc:	4803      	ldr	r0, [pc, #12]	; (80057ec <TIM8_BRK_TIM12_IRQHandler+0x14>)
 80057de:	f004 fd17 	bl	800a210 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 80057e2:	4803      	ldr	r0, [pc, #12]	; (80057f0 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 80057e4:	f004 fd14 	bl	800a210 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80057e8:	bf00      	nop
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	2000107c 	.word	0x2000107c
 80057f0:	200013f8 	.word	0x200013f8

080057f4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80057f8:	4803      	ldr	r0, [pc, #12]	; (8005808 <TIM8_UP_TIM13_IRQHandler+0x14>)
 80057fa:	f004 fd09 	bl	800a210 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 80057fe:	4803      	ldr	r0, [pc, #12]	; (800580c <TIM8_UP_TIM13_IRQHandler+0x18>)
 8005800:	f004 fd06 	bl	800a210 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8005804:	bf00      	nop
 8005806:	bd80      	pop	{r7, pc}
 8005808:	2000107c 	.word	0x2000107c
 800580c:	20001258 	.word	0x20001258

08005810 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8005814:	4802      	ldr	r0, [pc, #8]	; (8005820 <TIM5_IRQHandler+0x10>)
 8005816:	f004 fcfb 	bl	800a210 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800581a:	bf00      	nop
 800581c:	bd80      	pop	{r7, pc}
 800581e:	bf00      	nop
 8005820:	20001190 	.word	0x20001190

08005824 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005828:	4802      	ldr	r0, [pc, #8]	; (8005834 <TIM6_DAC_IRQHandler+0x10>)
 800582a:	f004 fcf1 	bl	800a210 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800582e:	bf00      	nop
 8005830:	bd80      	pop	{r7, pc}
 8005832:	bf00      	nop
 8005834:	20001338 	.word	0x20001338

08005838 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800583c:	4802      	ldr	r0, [pc, #8]	; (8005848 <TIM7_IRQHandler+0x10>)
 800583e:	f004 fce7 	bl	800a210 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8005842:	bf00      	nop
 8005844:	bd80      	pop	{r7, pc}
 8005846:	bf00      	nop
 8005848:	20001438 	.word	0x20001438

0800584c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005850:	4802      	ldr	r0, [pc, #8]	; (800585c <DMA2_Stream0_IRQHandler+0x10>)
 8005852:	f001 f981 	bl	8006b58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8005856:	bf00      	nop
 8005858:	bd80      	pop	{r7, pc}
 800585a:	bf00      	nop
 800585c:	200012d8 	.word	0x200012d8

08005860 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8005864:	4802      	ldr	r0, [pc, #8]	; (8005870 <DMA2_Stream3_IRQHandler+0x10>)
 8005866:	f001 f977 	bl	8006b58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800586a:	bf00      	nop
 800586c:	bd80      	pop	{r7, pc}
 800586e:	bf00      	nop
 8005870:	2000101c 	.word	0x2000101c

08005874 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b084      	sub	sp, #16
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800587c:	4b11      	ldr	r3, [pc, #68]	; (80058c4 <_sbrk+0x50>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d102      	bne.n	800588a <_sbrk+0x16>
		heap_end = &end;
 8005884:	4b0f      	ldr	r3, [pc, #60]	; (80058c4 <_sbrk+0x50>)
 8005886:	4a10      	ldr	r2, [pc, #64]	; (80058c8 <_sbrk+0x54>)
 8005888:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800588a:	4b0e      	ldr	r3, [pc, #56]	; (80058c4 <_sbrk+0x50>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005890:	4b0c      	ldr	r3, [pc, #48]	; (80058c4 <_sbrk+0x50>)
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	4413      	add	r3, r2
 8005898:	466a      	mov	r2, sp
 800589a:	4293      	cmp	r3, r2
 800589c:	d907      	bls.n	80058ae <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800589e:	f005 f86d 	bl	800a97c <__errno>
 80058a2:	4602      	mov	r2, r0
 80058a4:	230c      	movs	r3, #12
 80058a6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80058a8:	f04f 33ff 	mov.w	r3, #4294967295
 80058ac:	e006      	b.n	80058bc <_sbrk+0x48>
	}

	heap_end += incr;
 80058ae:	4b05      	ldr	r3, [pc, #20]	; (80058c4 <_sbrk+0x50>)
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4413      	add	r3, r2
 80058b6:	4a03      	ldr	r2, [pc, #12]	; (80058c4 <_sbrk+0x50>)
 80058b8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80058ba:	68fb      	ldr	r3, [r7, #12]
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3710      	adds	r7, #16
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}
 80058c4:	200003f0 	.word	0x200003f0
 80058c8:	200020e8 	.word	0x200020e8

080058cc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80058cc:	b480      	push	{r7}
 80058ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80058d0:	4b15      	ldr	r3, [pc, #84]	; (8005928 <SystemInit+0x5c>)
 80058d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058d6:	4a14      	ldr	r2, [pc, #80]	; (8005928 <SystemInit+0x5c>)
 80058d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80058dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80058e0:	4b12      	ldr	r3, [pc, #72]	; (800592c <SystemInit+0x60>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a11      	ldr	r2, [pc, #68]	; (800592c <SystemInit+0x60>)
 80058e6:	f043 0301 	orr.w	r3, r3, #1
 80058ea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80058ec:	4b0f      	ldr	r3, [pc, #60]	; (800592c <SystemInit+0x60>)
 80058ee:	2200      	movs	r2, #0
 80058f0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80058f2:	4b0e      	ldr	r3, [pc, #56]	; (800592c <SystemInit+0x60>)
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	490d      	ldr	r1, [pc, #52]	; (800592c <SystemInit+0x60>)
 80058f8:	4b0d      	ldr	r3, [pc, #52]	; (8005930 <SystemInit+0x64>)
 80058fa:	4013      	ands	r3, r2
 80058fc:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80058fe:	4b0b      	ldr	r3, [pc, #44]	; (800592c <SystemInit+0x60>)
 8005900:	4a0c      	ldr	r2, [pc, #48]	; (8005934 <SystemInit+0x68>)
 8005902:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005904:	4b09      	ldr	r3, [pc, #36]	; (800592c <SystemInit+0x60>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a08      	ldr	r2, [pc, #32]	; (800592c <SystemInit+0x60>)
 800590a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800590e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8005910:	4b06      	ldr	r3, [pc, #24]	; (800592c <SystemInit+0x60>)
 8005912:	2200      	movs	r2, #0
 8005914:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005916:	4b04      	ldr	r3, [pc, #16]	; (8005928 <SystemInit+0x5c>)
 8005918:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800591c:	609a      	str	r2, [r3, #8]
#endif
}
 800591e:	bf00      	nop
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr
 8005928:	e000ed00 	.word	0xe000ed00
 800592c:	40023800 	.word	0x40023800
 8005930:	fef6ffff 	.word	0xfef6ffff
 8005934:	24003010 	.word	0x24003010

08005938 <encode_byte>:

		};

uint8_t ws_buffer[LED_BUFFER_LENGTH];

void encode_byte(uint8_t data, int16_t buffer_index) {
 8005938:	b480      	push	{r7}
 800593a:	b085      	sub	sp, #20
 800593c:	af00      	add	r7, sp, #0
 800593e:	4603      	mov	r3, r0
 8005940:	460a      	mov	r2, r1
 8005942:	71fb      	strb	r3, [r7, #7]
 8005944:	4613      	mov	r3, r2
 8005946:	80bb      	strh	r3, [r7, #4]
	int index = data * 4;
 8005948:	79fb      	ldrb	r3, [r7, #7]
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	60fb      	str	r3, [r7, #12]
	ws_buffer[buffer_index++] = leddata[index++];
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	1c5a      	adds	r2, r3, #1
 8005952:	60fa      	str	r2, [r7, #12]
 8005954:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005958:	b28a      	uxth	r2, r1
 800595a:	3201      	adds	r2, #1
 800595c:	b292      	uxth	r2, r2
 800595e:	80ba      	strh	r2, [r7, #4]
 8005960:	4a18      	ldr	r2, [pc, #96]	; (80059c4 <encode_byte+0x8c>)
 8005962:	5cd2      	ldrb	r2, [r2, r3]
 8005964:	4b18      	ldr	r3, [pc, #96]	; (80059c8 <encode_byte+0x90>)
 8005966:	545a      	strb	r2, [r3, r1]
	ws_buffer[buffer_index++] = leddata[index++];
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	1c5a      	adds	r2, r3, #1
 800596c:	60fa      	str	r2, [r7, #12]
 800596e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005972:	b28a      	uxth	r2, r1
 8005974:	3201      	adds	r2, #1
 8005976:	b292      	uxth	r2, r2
 8005978:	80ba      	strh	r2, [r7, #4]
 800597a:	4a12      	ldr	r2, [pc, #72]	; (80059c4 <encode_byte+0x8c>)
 800597c:	5cd2      	ldrb	r2, [r2, r3]
 800597e:	4b12      	ldr	r3, [pc, #72]	; (80059c8 <encode_byte+0x90>)
 8005980:	545a      	strb	r2, [r3, r1]
	ws_buffer[buffer_index++] = leddata[index++];
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	1c5a      	adds	r2, r3, #1
 8005986:	60fa      	str	r2, [r7, #12]
 8005988:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800598c:	b28a      	uxth	r2, r1
 800598e:	3201      	adds	r2, #1
 8005990:	b292      	uxth	r2, r2
 8005992:	80ba      	strh	r2, [r7, #4]
 8005994:	4a0b      	ldr	r2, [pc, #44]	; (80059c4 <encode_byte+0x8c>)
 8005996:	5cd2      	ldrb	r2, [r2, r3]
 8005998:	4b0b      	ldr	r3, [pc, #44]	; (80059c8 <encode_byte+0x90>)
 800599a:	545a      	strb	r2, [r3, r1]
	ws_buffer[buffer_index++] = leddata[index++];
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	1c5a      	adds	r2, r3, #1
 80059a0:	60fa      	str	r2, [r7, #12]
 80059a2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80059a6:	b28a      	uxth	r2, r1
 80059a8:	3201      	adds	r2, #1
 80059aa:	b292      	uxth	r2, r2
 80059ac:	80ba      	strh	r2, [r7, #4]
 80059ae:	4a05      	ldr	r2, [pc, #20]	; (80059c4 <encode_byte+0x8c>)
 80059b0:	5cd2      	ldrb	r2, [r2, r3]
 80059b2:	4b05      	ldr	r3, [pc, #20]	; (80059c8 <encode_byte+0x90>)
 80059b4:	545a      	strb	r2, [r3, r1]
}
 80059b6:	bf00      	nop
 80059b8:	3714      	adds	r7, #20
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr
 80059c2:	bf00      	nop
 80059c4:	0800adf4 	.word	0x0800adf4
 80059c8:	200014dc 	.word	0x200014dc

080059cc <generate_ws_buffer>:
void generate_ws_buffer(uint8_t RData, uint8_t GData, uint8_t BData,
		int16_t led_no) {
 80059cc:	b590      	push	{r4, r7, lr}
 80059ce:	b085      	sub	sp, #20
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	4604      	mov	r4, r0
 80059d4:	4608      	mov	r0, r1
 80059d6:	4611      	mov	r1, r2
 80059d8:	461a      	mov	r2, r3
 80059da:	4623      	mov	r3, r4
 80059dc:	71fb      	strb	r3, [r7, #7]
 80059de:	4603      	mov	r3, r0
 80059e0:	71bb      	strb	r3, [r7, #6]
 80059e2:	460b      	mov	r3, r1
 80059e4:	717b      	strb	r3, [r7, #5]
 80059e6:	4613      	mov	r3, r2
 80059e8:	807b      	strh	r3, [r7, #2]
	//ws2812b
//G--R--B
//MSB first
	int offset = led_no * 12;
 80059ea:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80059ee:	4613      	mov	r3, r2
 80059f0:	005b      	lsls	r3, r3, #1
 80059f2:	4413      	add	r3, r2
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	60fb      	str	r3, [r7, #12]
	encode_byte(GData, offset);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	b21a      	sxth	r2, r3
 80059fc:	79bb      	ldrb	r3, [r7, #6]
 80059fe:	4611      	mov	r1, r2
 8005a00:	4618      	mov	r0, r3
 8005a02:	f7ff ff99 	bl	8005938 <encode_byte>
	encode_byte(RData, offset + 4);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	3304      	adds	r3, #4
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	b21a      	sxth	r2, r3
 8005a10:	79fb      	ldrb	r3, [r7, #7]
 8005a12:	4611      	mov	r1, r2
 8005a14:	4618      	mov	r0, r3
 8005a16:	f7ff ff8f 	bl	8005938 <encode_byte>
	encode_byte(BData, offset + 8);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	3308      	adds	r3, #8
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	b21a      	sxth	r2, r3
 8005a24:	797b      	ldrb	r3, [r7, #5]
 8005a26:	4611      	mov	r1, r2
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f7ff ff85 	bl	8005938 <encode_byte>
}
 8005a2e:	bf00      	nop
 8005a30:	3714      	adds	r7, #20
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd90      	pop	{r4, r7, pc}
	...

08005a38 <Send_4812>:
void Send_4812(void) {
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	af00      	add	r7, sp, #0
#if 1
	HAL_SPI_Transmit_DMA(&hspi1, ws_buffer, LED_BUFFER_LENGTH);
 8005a3c:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8005a40:	4906      	ldr	r1, [pc, #24]	; (8005a5c <Send_4812+0x24>)
 8005a42:	4807      	ldr	r0, [pc, #28]	; (8005a60 <Send_4812+0x28>)
 8005a44:	f003 ffd0 	bl	80099e8 <HAL_SPI_Transmit_DMA>
	// wait until finished
	while (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_BSY))
 8005a48:	bf00      	nop
 8005a4a:	4b05      	ldr	r3, [pc, #20]	; (8005a60 <Send_4812+0x28>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a54:	2b80      	cmp	r3, #128	; 0x80
 8005a56:	d0f8      	beq.n	8005a4a <Send_4812+0x12>
		;
#else
    HAL_SPI_Transmit( &hspi1, ws_buffer, LED_BUFFER_LENGTH, 300 );
#endif
}
 8005a58:	bf00      	nop
 8005a5a:	bd80      	pop	{r7, pc}
 8005a5c:	200014dc 	.word	0x200014dc
 8005a60:	20001478 	.word	0x20001478

08005a64 <setAllPixelColor>:

void setAllPixelColor(uint8_t r, uint8_t g, uint8_t b) {
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b084      	sub	sp, #16
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	71fb      	strb	r3, [r7, #7]
 8005a6e:	460b      	mov	r3, r1
 8005a70:	71bb      	strb	r3, [r7, #6]
 8005a72:	4613      	mov	r3, r2
 8005a74:	717b      	strb	r3, [r7, #5]
	int i;
	for (i = 0; i < LED_NO; i++) {
 8005a76:	2300      	movs	r3, #0
 8005a78:	60fb      	str	r3, [r7, #12]
 8005a7a:	e009      	b.n	8005a90 <setAllPixelColor+0x2c>
		generate_ws_buffer(r, g, b, i);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	b21b      	sxth	r3, r3
 8005a80:	797a      	ldrb	r2, [r7, #5]
 8005a82:	79b9      	ldrb	r1, [r7, #6]
 8005a84:	79f8      	ldrb	r0, [r7, #7]
 8005a86:	f7ff ffa1 	bl	80059cc <generate_ws_buffer>
	for (i = 0; i < LED_NO; i++) {
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	60fb      	str	r3, [r7, #12]
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2bff      	cmp	r3, #255	; 0xff
 8005a94:	ddf2      	ble.n	8005a7c <setAllPixelColor+0x18>
	}
	Send_4812();
 8005a96:	f7ff ffcf 	bl	8005a38 <Send_4812>
}
 8005a9a:	bf00      	nop
 8005a9c:	3710      	adds	r7, #16
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
	...

08005aa4 <initLEDMOSI>:
}
/**
 * initialize MOSI pin to LOW.  Without this, first time transmit for first LED might be wrong.
 *
 */
void initLEDMOSI(void) {
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b082      	sub	sp, #8
 8005aa8:	af00      	add	r7, sp, #0
	uint8_t buffer0[2] = { 0, 0 };
 8005aaa:	2300      	movs	r3, #0
 8005aac:	713b      	strb	r3, [r7, #4]
 8005aae:	2300      	movs	r3, #0
 8005ab0:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&hspi1, buffer0, 1, 100);
 8005ab2:	1d39      	adds	r1, r7, #4
 8005ab4:	2364      	movs	r3, #100	; 0x64
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	4803      	ldr	r0, [pc, #12]	; (8005ac8 <initLEDMOSI+0x24>)
 8005aba:	f003 fe2f 	bl	800971c <HAL_SPI_Transmit>
}
 8005abe:	bf00      	nop
 8005ac0:	3708      	adds	r7, #8
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	20001478 	.word	0x20001478

08005acc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005acc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005b04 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005ad0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005ad2:	e003      	b.n	8005adc <LoopCopyDataInit>

08005ad4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005ad4:	4b0c      	ldr	r3, [pc, #48]	; (8005b08 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005ad6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005ad8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005ada:	3104      	adds	r1, #4

08005adc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005adc:	480b      	ldr	r0, [pc, #44]	; (8005b0c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005ade:	4b0c      	ldr	r3, [pc, #48]	; (8005b10 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005ae0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005ae2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005ae4:	d3f6      	bcc.n	8005ad4 <CopyDataInit>
  ldr  r2, =_sbss
 8005ae6:	4a0b      	ldr	r2, [pc, #44]	; (8005b14 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005ae8:	e002      	b.n	8005af0 <LoopFillZerobss>

08005aea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005aea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005aec:	f842 3b04 	str.w	r3, [r2], #4

08005af0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005af0:	4b09      	ldr	r3, [pc, #36]	; (8005b18 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005af2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005af4:	d3f9      	bcc.n	8005aea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005af6:	f7ff fee9 	bl	80058cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005afa:	f004 ff45 	bl	800a988 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005afe:	f7fe fdc5 	bl	800468c <main>
  bx  lr    
 8005b02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005b04:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8005b08:	0800b20c 	.word	0x0800b20c
  ldr  r0, =_sdata
 8005b0c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005b10:	20000394 	.word	0x20000394
  ldr  r2, =_sbss
 8005b14:	20000394 	.word	0x20000394
  ldr  r3, = _ebss
 8005b18:	200020e4 	.word	0x200020e4

08005b1c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005b1c:	e7fe      	b.n	8005b1c <CAN1_RX0_IRQHandler>

08005b1e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005b1e:	b580      	push	{r7, lr}
 8005b20:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005b22:	2003      	movs	r0, #3
 8005b24:	f000 fea0 	bl	8006868 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005b28:	2000      	movs	r0, #0
 8005b2a:	f000 f805 	bl	8005b38 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8005b2e:	f7ff fb6b 	bl	8005208 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8005b32:	2300      	movs	r3, #0
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	bd80      	pop	{r7, pc}

08005b38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b082      	sub	sp, #8
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005b40:	4b12      	ldr	r3, [pc, #72]	; (8005b8c <HAL_InitTick+0x54>)
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	4b12      	ldr	r3, [pc, #72]	; (8005b90 <HAL_InitTick+0x58>)
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	4619      	mov	r1, r3
 8005b4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005b4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b56:	4618      	mov	r0, r3
 8005b58:	f000 febb 	bl	80068d2 <HAL_SYSTICK_Config>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d001      	beq.n	8005b66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e00e      	b.n	8005b84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2b0f      	cmp	r3, #15
 8005b6a:	d80a      	bhi.n	8005b82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	6879      	ldr	r1, [r7, #4]
 8005b70:	f04f 30ff 	mov.w	r0, #4294967295
 8005b74:	f000 fe83 	bl	800687e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005b78:	4a06      	ldr	r2, [pc, #24]	; (8005b94 <HAL_InitTick+0x5c>)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	e000      	b.n	8005b84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3708      	adds	r7, #8
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}
 8005b8c:	20000324 	.word	0x20000324
 8005b90:	2000032c 	.word	0x2000032c
 8005b94:	20000328 	.word	0x20000328

08005b98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005b9c:	4b06      	ldr	r3, [pc, #24]	; (8005bb8 <HAL_IncTick+0x20>)
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	4b06      	ldr	r3, [pc, #24]	; (8005bbc <HAL_IncTick+0x24>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4413      	add	r3, r2
 8005ba8:	4a04      	ldr	r2, [pc, #16]	; (8005bbc <HAL_IncTick+0x24>)
 8005baa:	6013      	str	r3, [r2, #0]
}
 8005bac:	bf00      	nop
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr
 8005bb6:	bf00      	nop
 8005bb8:	2000032c 	.word	0x2000032c
 8005bbc:	200020dc 	.word	0x200020dc

08005bc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	af00      	add	r7, sp, #0
  return uwTick;
 8005bc4:	4b03      	ldr	r3, [pc, #12]	; (8005bd4 <HAL_GetTick+0x14>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr
 8005bd2:	bf00      	nop
 8005bd4:	200020dc 	.word	0x200020dc

08005bd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b084      	sub	sp, #16
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005be0:	f7ff ffee 	bl	8005bc0 <HAL_GetTick>
 8005be4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bf0:	d005      	beq.n	8005bfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005bf2:	4b09      	ldr	r3, [pc, #36]	; (8005c18 <HAL_Delay+0x40>)
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	4413      	add	r3, r2
 8005bfc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005bfe:	bf00      	nop
 8005c00:	f7ff ffde 	bl	8005bc0 <HAL_GetTick>
 8005c04:	4602      	mov	r2, r0
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	1ad3      	subs	r3, r2, r3
 8005c0a:	68fa      	ldr	r2, [r7, #12]
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d8f7      	bhi.n	8005c00 <HAL_Delay+0x28>
  {
  }
}
 8005c10:	bf00      	nop
 8005c12:	3710      	adds	r7, #16
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	2000032c 	.word	0x2000032c

08005c1c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b084      	sub	sp, #16
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005c24:	2300      	movs	r3, #0
 8005c26:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d101      	bne.n	8005c32 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e031      	b.n	8005c96 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d109      	bne.n	8005c4e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f7ff fb08 	bl	8005250 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2200      	movs	r2, #0
 8005c44:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c52:	f003 0310 	and.w	r3, r3, #16
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d116      	bne.n	8005c88 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c5e:	4b10      	ldr	r3, [pc, #64]	; (8005ca0 <HAL_ADC_Init+0x84>)
 8005c60:	4013      	ands	r3, r2
 8005c62:	f043 0202 	orr.w	r2, r3, #2
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f000 fba6 	bl	80063bc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2200      	movs	r2, #0
 8005c74:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7a:	f023 0303 	bic.w	r3, r3, #3
 8005c7e:	f043 0201 	orr.w	r2, r3, #1
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	641a      	str	r2, [r3, #64]	; 0x40
 8005c86:	e001      	b.n	8005c8c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3710      	adds	r7, #16
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
 8005c9e:	bf00      	nop
 8005ca0:	ffffeefd 	.word	0xffffeefd

08005ca4 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b084      	sub	sp, #16
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8005cac:	2300      	movs	r3, #0
 8005cae:	60fb      	str	r3, [r7, #12]
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f003 0302 	and.w	r3, r3, #2
 8005cbe:	2b02      	cmp	r3, #2
 8005cc0:	bf0c      	ite	eq
 8005cc2:	2301      	moveq	r3, #1
 8005cc4:	2300      	movne	r3, #0
 8005cc6:	b2db      	uxtb	r3, r3
 8005cc8:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	f003 0320 	and.w	r3, r3, #32
 8005cd4:	2b20      	cmp	r3, #32
 8005cd6:	bf0c      	ite	eq
 8005cd8:	2301      	moveq	r3, #1
 8005cda:	2300      	movne	r3, #0
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d049      	beq.n	8005d7a <HAL_ADC_IRQHandler+0xd6>
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d046      	beq.n	8005d7a <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf0:	f003 0310 	and.w	r3, r3, #16
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d105      	bne.n	8005d04 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cfc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d12b      	bne.n	8005d6a <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d127      	bne.n	8005d6a <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d20:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d006      	beq.n	8005d36 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d119      	bne.n	8005d6a <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	685a      	ldr	r2, [r3, #4]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f022 0220 	bic.w	r2, r2, #32
 8005d44:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d105      	bne.n	8005d6a <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d62:	f043 0201 	orr.w	r2, r3, #1
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f000 f9ca 	bl	8006104 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f06f 0212 	mvn.w	r2, #18
 8005d78:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f003 0304 	and.w	r3, r3, #4
 8005d84:	2b04      	cmp	r3, #4
 8005d86:	bf0c      	ite	eq
 8005d88:	2301      	moveq	r3, #1
 8005d8a:	2300      	movne	r3, #0
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d9a:	2b80      	cmp	r3, #128	; 0x80
 8005d9c:	bf0c      	ite	eq
 8005d9e:	2301      	moveq	r3, #1
 8005da0:	2300      	movne	r3, #0
 8005da2:	b2db      	uxtb	r3, r3
 8005da4:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d057      	beq.n	8005e5c <HAL_ADC_IRQHandler+0x1b8>
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d054      	beq.n	8005e5c <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db6:	f003 0310 	and.w	r3, r3, #16
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d105      	bne.n	8005dca <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d139      	bne.n	8005e4c <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dde:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d006      	beq.n	8005df4 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d12b      	bne.n	8005e4c <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d124      	bne.n	8005e4c <HAL_ADC_IRQHandler+0x1a8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d11d      	bne.n	8005e4c <HAL_ADC_IRQHandler+0x1a8>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d119      	bne.n	8005e4c <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	685a      	ldr	r2, [r3, #4]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e26:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e2c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d105      	bne.n	8005e4c <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e44:	f043 0201 	orr.w	r2, r3, #1
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f000 fc31 	bl	80066b4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f06f 020c 	mvn.w	r2, #12
 8005e5a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f003 0301 	and.w	r3, r3, #1
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	bf0c      	ite	eq
 8005e6a:	2301      	moveq	r3, #1
 8005e6c:	2300      	movne	r3, #0
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e7c:	2b40      	cmp	r3, #64	; 0x40
 8005e7e:	bf0c      	ite	eq
 8005e80:	2301      	moveq	r3, #1
 8005e82:	2300      	movne	r3, #0
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d017      	beq.n	8005ebe <HAL_ADC_IRQHandler+0x21a>
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d014      	beq.n	8005ebe <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f003 0301 	and.w	r3, r3, #1
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d10d      	bne.n	8005ebe <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 f93c 	bl	800612c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f06f 0201 	mvn.w	r2, #1
 8005ebc:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f003 0320 	and.w	r3, r3, #32
 8005ec8:	2b20      	cmp	r3, #32
 8005eca:	bf0c      	ite	eq
 8005ecc:	2301      	moveq	r3, #1
 8005ece:	2300      	movne	r3, #0
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005ede:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ee2:	bf0c      	ite	eq
 8005ee4:	2301      	moveq	r3, #1
 8005ee6:	2300      	movne	r3, #0
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d015      	beq.n	8005f1e <HAL_ADC_IRQHandler+0x27a>
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d012      	beq.n	8005f1e <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005efc:	f043 0202 	orr.w	r2, r3, #2
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f06f 0220 	mvn.w	r2, #32
 8005f0c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f000 f916 	bl	8006140 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f06f 0220 	mvn.w	r2, #32
 8005f1c:	601a      	str	r2, [r3, #0]
  }
}
 8005f1e:	bf00      	nop
 8005f20:	3710      	adds	r7, #16
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}
	...

08005f28 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b086      	sub	sp, #24
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	60f8      	str	r0, [r7, #12]
 8005f30:	60b9      	str	r1, [r7, #8]
 8005f32:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8005f34:	2300      	movs	r3, #0
 8005f36:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d101      	bne.n	8005f46 <HAL_ADC_Start_DMA+0x1e>
 8005f42:	2302      	movs	r3, #2
 8005f44:	e0c7      	b.n	80060d6 <HAL_ADC_Start_DMA+0x1ae>
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2201      	movs	r2, #1
 8005f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	f003 0301 	and.w	r3, r3, #1
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	d018      	beq.n	8005f8e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	689a      	ldr	r2, [r3, #8]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f042 0201 	orr.w	r2, r2, #1
 8005f6a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8005f6c:	4b5c      	ldr	r3, [pc, #368]	; (80060e0 <HAL_ADC_Start_DMA+0x1b8>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a5c      	ldr	r2, [pc, #368]	; (80060e4 <HAL_ADC_Start_DMA+0x1bc>)
 8005f72:	fba2 2303 	umull	r2, r3, r2, r3
 8005f76:	0c9a      	lsrs	r2, r3, #18
 8005f78:	4613      	mov	r3, r2
 8005f7a:	005b      	lsls	r3, r3, #1
 8005f7c:	4413      	add	r3, r2
 8005f7e:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8005f80:	e002      	b.n	8005f88 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	3b01      	subs	r3, #1
 8005f86:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d1f9      	bne.n	8005f82 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	f003 0301 	and.w	r3, r3, #1
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	f040 809b 	bne.w	80060d4 <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005fa2:	4b51      	ldr	r3, [pc, #324]	; (80060e8 <HAL_ADC_Start_DMA+0x1c0>)
 8005fa4:	4013      	ands	r3, r2
 8005fa6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d007      	beq.n	8005fcc <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005fc4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005fd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fd8:	d106      	bne.n	8005fe8 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fde:	f023 0206 	bic.w	r2, r3, #6
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	645a      	str	r2, [r3, #68]	; 0x44
 8005fe6:	e002      	b.n	8005fee <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2200      	movs	r2, #0
 8005fec:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ffa:	4a3c      	ldr	r2, [pc, #240]	; (80060ec <HAL_ADC_Start_DMA+0x1c4>)
 8005ffc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006002:	4a3b      	ldr	r2, [pc, #236]	; (80060f0 <HAL_ADC_Start_DMA+0x1c8>)
 8006004:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800600a:	4a3a      	ldr	r2, [pc, #232]	; (80060f4 <HAL_ADC_Start_DMA+0x1cc>)
 800600c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006016:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	685a      	ldr	r2, [r3, #4]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006026:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	689a      	ldr	r2, [r3, #8]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006036:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	334c      	adds	r3, #76	; 0x4c
 8006042:	4619      	mov	r1, r3
 8006044:	68ba      	ldr	r2, [r7, #8]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f000 fd04 	bl	8006a54 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800604c:	4b2a      	ldr	r3, [pc, #168]	; (80060f8 <HAL_ADC_Start_DMA+0x1d0>)
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	f003 031f 	and.w	r3, r3, #31
 8006054:	2b00      	cmp	r3, #0
 8006056:	d10f      	bne.n	8006078 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006062:	2b00      	cmp	r3, #0
 8006064:	d136      	bne.n	80060d4 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	689a      	ldr	r2, [r3, #8]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006074:	609a      	str	r2, [r3, #8]
 8006076:	e02d      	b.n	80060d4 <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a1f      	ldr	r2, [pc, #124]	; (80060fc <HAL_ADC_Start_DMA+0x1d4>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d10e      	bne.n	80060a0 <HAL_ADC_Start_DMA+0x178>
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800608c:	2b00      	cmp	r3, #0
 800608e:	d107      	bne.n	80060a0 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	689a      	ldr	r2, [r3, #8]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800609e:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80060a0:	4b15      	ldr	r3, [pc, #84]	; (80060f8 <HAL_ADC_Start_DMA+0x1d0>)
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	f003 0310 	and.w	r3, r3, #16
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d113      	bne.n	80060d4 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a13      	ldr	r2, [pc, #76]	; (8006100 <HAL_ADC_Start_DMA+0x1d8>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d10e      	bne.n	80060d4 <HAL_ADC_Start_DMA+0x1ac>
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d107      	bne.n	80060d4 <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	689a      	ldr	r2, [r3, #8]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80060d2:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80060d4:	2300      	movs	r3, #0
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3718      	adds	r7, #24
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	bf00      	nop
 80060e0:	20000324 	.word	0x20000324
 80060e4:	431bde83 	.word	0x431bde83
 80060e8:	fffff8fe 	.word	0xfffff8fe
 80060ec:	080065b1 	.word	0x080065b1
 80060f0:	0800666b 	.word	0x0800666b
 80060f4:	08006687 	.word	0x08006687
 80060f8:	40012300 	.word	0x40012300
 80060fc:	40012000 	.word	0x40012000
 8006100:	40012200 	.word	0x40012200

08006104 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800610c:	bf00      	nop
 800610e:	370c      	adds	r7, #12
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr

08006118 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006118:	b480      	push	{r7}
 800611a:	b083      	sub	sp, #12
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8006120:	bf00      	nop
 8006122:	370c      	adds	r7, #12
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr

0800612c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800612c:	b480      	push	{r7}
 800612e:	b083      	sub	sp, #12
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8006134:	bf00      	nop
 8006136:	370c      	adds	r7, #12
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr

08006140 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006140:	b480      	push	{r7}
 8006142:	b083      	sub	sp, #12
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8006148:	bf00      	nop
 800614a:	370c      	adds	r7, #12
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr

08006154 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006154:	b480      	push	{r7}
 8006156:	b085      	sub	sp, #20
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800615e:	2300      	movs	r3, #0
 8006160:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006168:	2b01      	cmp	r3, #1
 800616a:	d101      	bne.n	8006170 <HAL_ADC_ConfigChannel+0x1c>
 800616c:	2302      	movs	r3, #2
 800616e:	e115      	b.n	800639c <HAL_ADC_ConfigChannel+0x248>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2201      	movs	r2, #1
 8006174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	2b09      	cmp	r3, #9
 800617e:	d935      	bls.n	80061ec <HAL_ADC_ConfigChannel+0x98>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	68d9      	ldr	r1, [r3, #12]
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	b29b      	uxth	r3, r3
 800618c:	461a      	mov	r2, r3
 800618e:	4613      	mov	r3, r2
 8006190:	005b      	lsls	r3, r3, #1
 8006192:	4413      	add	r3, r2
 8006194:	3b1e      	subs	r3, #30
 8006196:	2207      	movs	r2, #7
 8006198:	fa02 f303 	lsl.w	r3, r2, r3
 800619c:	43da      	mvns	r2, r3
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	400a      	ands	r2, r1
 80061a4:	60da      	str	r2, [r3, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a7f      	ldr	r2, [pc, #508]	; (80063a8 <HAL_ADC_ConfigChannel+0x254>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d10a      	bne.n	80061c6 <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	68d9      	ldr	r1, [r3, #12]
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	061a      	lsls	r2, r3, #24
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	430a      	orrs	r2, r1
 80061c2:	60da      	str	r2, [r3, #12]
 80061c4:	e035      	b.n	8006232 <HAL_ADC_ConfigChannel+0xde>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	68d9      	ldr	r1, [r3, #12]
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	689a      	ldr	r2, [r3, #8]
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	4618      	mov	r0, r3
 80061d8:	4603      	mov	r3, r0
 80061da:	005b      	lsls	r3, r3, #1
 80061dc:	4403      	add	r3, r0
 80061de:	3b1e      	subs	r3, #30
 80061e0:	409a      	lsls	r2, r3
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	430a      	orrs	r2, r1
 80061e8:	60da      	str	r2, [r3, #12]
 80061ea:	e022      	b.n	8006232 <HAL_ADC_ConfigChannel+0xde>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	6919      	ldr	r1, [r3, #16]
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	461a      	mov	r2, r3
 80061fa:	4613      	mov	r3, r2
 80061fc:	005b      	lsls	r3, r3, #1
 80061fe:	4413      	add	r3, r2
 8006200:	2207      	movs	r2, #7
 8006202:	fa02 f303 	lsl.w	r3, r2, r3
 8006206:	43da      	mvns	r2, r3
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	400a      	ands	r2, r1
 800620e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	6919      	ldr	r1, [r3, #16]
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	689a      	ldr	r2, [r3, #8]
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	b29b      	uxth	r3, r3
 8006220:	4618      	mov	r0, r3
 8006222:	4603      	mov	r3, r0
 8006224:	005b      	lsls	r3, r3, #1
 8006226:	4403      	add	r3, r0
 8006228:	409a      	lsls	r2, r3
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	430a      	orrs	r2, r1
 8006230:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	2b06      	cmp	r3, #6
 8006238:	d824      	bhi.n	8006284 <HAL_ADC_ConfigChannel+0x130>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	685a      	ldr	r2, [r3, #4]
 8006244:	4613      	mov	r3, r2
 8006246:	009b      	lsls	r3, r3, #2
 8006248:	4413      	add	r3, r2
 800624a:	3b05      	subs	r3, #5
 800624c:	221f      	movs	r2, #31
 800624e:	fa02 f303 	lsl.w	r3, r2, r3
 8006252:	43da      	mvns	r2, r3
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	400a      	ands	r2, r1
 800625a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	b29b      	uxth	r3, r3
 8006268:	4618      	mov	r0, r3
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	685a      	ldr	r2, [r3, #4]
 800626e:	4613      	mov	r3, r2
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	4413      	add	r3, r2
 8006274:	3b05      	subs	r3, #5
 8006276:	fa00 f203 	lsl.w	r2, r0, r3
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	430a      	orrs	r2, r1
 8006280:	635a      	str	r2, [r3, #52]	; 0x34
 8006282:	e04c      	b.n	800631e <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	2b0c      	cmp	r3, #12
 800628a:	d824      	bhi.n	80062d6 <HAL_ADC_ConfigChannel+0x182>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	685a      	ldr	r2, [r3, #4]
 8006296:	4613      	mov	r3, r2
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	4413      	add	r3, r2
 800629c:	3b23      	subs	r3, #35	; 0x23
 800629e:	221f      	movs	r2, #31
 80062a0:	fa02 f303 	lsl.w	r3, r2, r3
 80062a4:	43da      	mvns	r2, r3
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	400a      	ands	r2, r1
 80062ac:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	4618      	mov	r0, r3
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	685a      	ldr	r2, [r3, #4]
 80062c0:	4613      	mov	r3, r2
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	4413      	add	r3, r2
 80062c6:	3b23      	subs	r3, #35	; 0x23
 80062c8:	fa00 f203 	lsl.w	r2, r0, r3
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	430a      	orrs	r2, r1
 80062d2:	631a      	str	r2, [r3, #48]	; 0x30
 80062d4:	e023      	b.n	800631e <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	685a      	ldr	r2, [r3, #4]
 80062e0:	4613      	mov	r3, r2
 80062e2:	009b      	lsls	r3, r3, #2
 80062e4:	4413      	add	r3, r2
 80062e6:	3b41      	subs	r3, #65	; 0x41
 80062e8:	221f      	movs	r2, #31
 80062ea:	fa02 f303 	lsl.w	r3, r2, r3
 80062ee:	43da      	mvns	r2, r3
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	400a      	ands	r2, r1
 80062f6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	b29b      	uxth	r3, r3
 8006304:	4618      	mov	r0, r3
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	685a      	ldr	r2, [r3, #4]
 800630a:	4613      	mov	r3, r2
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	4413      	add	r3, r2
 8006310:	3b41      	subs	r3, #65	; 0x41
 8006312:	fa00 f203 	lsl.w	r2, r0, r3
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	430a      	orrs	r2, r1
 800631c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a22      	ldr	r2, [pc, #136]	; (80063ac <HAL_ADC_ConfigChannel+0x258>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d109      	bne.n	800633c <HAL_ADC_ConfigChannel+0x1e8>
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	2b12      	cmp	r3, #18
 800632e:	d105      	bne.n	800633c <HAL_ADC_ConfigChannel+0x1e8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8006330:	4b1f      	ldr	r3, [pc, #124]	; (80063b0 <HAL_ADC_ConfigChannel+0x25c>)
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	4a1e      	ldr	r2, [pc, #120]	; (80063b0 <HAL_ADC_ConfigChannel+0x25c>)
 8006336:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800633a:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a1a      	ldr	r2, [pc, #104]	; (80063ac <HAL_ADC_ConfigChannel+0x258>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d125      	bne.n	8006392 <HAL_ADC_ConfigChannel+0x23e>
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a17      	ldr	r2, [pc, #92]	; (80063a8 <HAL_ADC_ConfigChannel+0x254>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d003      	beq.n	8006358 <HAL_ADC_ConfigChannel+0x204>
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	2b11      	cmp	r3, #17
 8006356:	d11c      	bne.n	8006392 <HAL_ADC_ConfigChannel+0x23e>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8006358:	4b15      	ldr	r3, [pc, #84]	; (80063b0 <HAL_ADC_ConfigChannel+0x25c>)
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	4a14      	ldr	r2, [pc, #80]	; (80063b0 <HAL_ADC_ConfigChannel+0x25c>)
 800635e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006362:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a0f      	ldr	r2, [pc, #60]	; (80063a8 <HAL_ADC_ConfigChannel+0x254>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d111      	bne.n	8006392 <HAL_ADC_ConfigChannel+0x23e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800636e:	4b11      	ldr	r3, [pc, #68]	; (80063b4 <HAL_ADC_ConfigChannel+0x260>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a11      	ldr	r2, [pc, #68]	; (80063b8 <HAL_ADC_ConfigChannel+0x264>)
 8006374:	fba2 2303 	umull	r2, r3, r2, r3
 8006378:	0c9a      	lsrs	r2, r3, #18
 800637a:	4613      	mov	r3, r2
 800637c:	009b      	lsls	r3, r3, #2
 800637e:	4413      	add	r3, r2
 8006380:	005b      	lsls	r3, r3, #1
 8006382:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8006384:	e002      	b.n	800638c <HAL_ADC_ConfigChannel+0x238>
      {
        counter--;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	3b01      	subs	r3, #1
 800638a:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d1f9      	bne.n	8006386 <HAL_ADC_ConfigChannel+0x232>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800639a:	2300      	movs	r3, #0
}
 800639c:	4618      	mov	r0, r3
 800639e:	3714      	adds	r7, #20
 80063a0:	46bd      	mov	sp, r7
 80063a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a6:	4770      	bx	lr
 80063a8:	10000012 	.word	0x10000012
 80063ac:	40012000 	.word	0x40012000
 80063b0:	40012300 	.word	0x40012300
 80063b4:	20000324 	.word	0x20000324
 80063b8:	431bde83 	.word	0x431bde83

080063bc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80063bc:	b480      	push	{r7}
 80063be:	b083      	sub	sp, #12
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80063c4:	4b78      	ldr	r3, [pc, #480]	; (80065a8 <ADC_Init+0x1ec>)
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	4a77      	ldr	r2, [pc, #476]	; (80065a8 <ADC_Init+0x1ec>)
 80063ca:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80063ce:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80063d0:	4b75      	ldr	r3, [pc, #468]	; (80065a8 <ADC_Init+0x1ec>)
 80063d2:	685a      	ldr	r2, [r3, #4]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	4973      	ldr	r1, [pc, #460]	; (80065a8 <ADC_Init+0x1ec>)
 80063da:	4313      	orrs	r3, r2
 80063dc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	685a      	ldr	r2, [r3, #4]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80063ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	6859      	ldr	r1, [r3, #4]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	691b      	ldr	r3, [r3, #16]
 80063f8:	021a      	lsls	r2, r3, #8
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	430a      	orrs	r2, r1
 8006400:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	685a      	ldr	r2, [r3, #4]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006410:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	6859      	ldr	r1, [r3, #4]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	689a      	ldr	r2, [r3, #8]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	430a      	orrs	r2, r1
 8006422:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	689a      	ldr	r2, [r3, #8]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006432:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	6899      	ldr	r1, [r3, #8]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	68da      	ldr	r2, [r3, #12]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	430a      	orrs	r2, r1
 8006444:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800644a:	4a58      	ldr	r2, [pc, #352]	; (80065ac <ADC_Init+0x1f0>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d022      	beq.n	8006496 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	689a      	ldr	r2, [r3, #8]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800645e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	6899      	ldr	r1, [r3, #8]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	430a      	orrs	r2, r1
 8006470:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	689a      	ldr	r2, [r3, #8]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006480:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	6899      	ldr	r1, [r3, #8]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	430a      	orrs	r2, r1
 8006492:	609a      	str	r2, [r3, #8]
 8006494:	e00f      	b.n	80064b6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	689a      	ldr	r2, [r3, #8]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80064a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	689a      	ldr	r2, [r3, #8]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80064b4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	689a      	ldr	r2, [r3, #8]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f022 0202 	bic.w	r2, r2, #2
 80064c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	6899      	ldr	r1, [r3, #8]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	699b      	ldr	r3, [r3, #24]
 80064d0:	005a      	lsls	r2, r3, #1
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	430a      	orrs	r2, r1
 80064d8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d01b      	beq.n	800651c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	685a      	ldr	r2, [r3, #4]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064f2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	685a      	ldr	r2, [r3, #4]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006502:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	6859      	ldr	r1, [r3, #4]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800650e:	3b01      	subs	r3, #1
 8006510:	035a      	lsls	r2, r3, #13
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	430a      	orrs	r2, r1
 8006518:	605a      	str	r2, [r3, #4]
 800651a:	e007      	b.n	800652c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	685a      	ldr	r2, [r3, #4]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800652a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800653a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	69db      	ldr	r3, [r3, #28]
 8006546:	3b01      	subs	r3, #1
 8006548:	051a      	lsls	r2, r3, #20
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	430a      	orrs	r2, r1
 8006550:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	689a      	ldr	r2, [r3, #8]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006560:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	6899      	ldr	r1, [r3, #8]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800656e:	025a      	lsls	r2, r3, #9
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	430a      	orrs	r2, r1
 8006576:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	689a      	ldr	r2, [r3, #8]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006586:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	6899      	ldr	r1, [r3, #8]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	695b      	ldr	r3, [r3, #20]
 8006592:	029a      	lsls	r2, r3, #10
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	430a      	orrs	r2, r1
 800659a:	609a      	str	r2, [r3, #8]
}
 800659c:	bf00      	nop
 800659e:	370c      	adds	r7, #12
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr
 80065a8:	40012300 	.word	0x40012300
 80065ac:	0f000001 	.word	0x0f000001

080065b0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b084      	sub	sp, #16
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065bc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d13c      	bne.n	8006644 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ce:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d12b      	bne.n	800663c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d127      	bne.n	800663c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d006      	beq.n	8006608 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006604:	2b00      	cmp	r3, #0
 8006606:	d119      	bne.n	800663c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	685a      	ldr	r2, [r3, #4]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f022 0220 	bic.w	r2, r2, #32
 8006616:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800661c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006628:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800662c:	2b00      	cmp	r3, #0
 800662e:	d105      	bne.n	800663c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006634:	f043 0201 	orr.w	r2, r3, #1
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800663c:	68f8      	ldr	r0, [r7, #12]
 800663e:	f7ff fd61 	bl	8006104 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006642:	e00e      	b.n	8006662 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006648:	f003 0310 	and.w	r3, r3, #16
 800664c:	2b00      	cmp	r3, #0
 800664e:	d003      	beq.n	8006658 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8006650:	68f8      	ldr	r0, [r7, #12]
 8006652:	f7ff fd75 	bl	8006140 <HAL_ADC_ErrorCallback>
}
 8006656:	e004      	b.n	8006662 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800665c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	4798      	blx	r3
}
 8006662:	bf00      	nop
 8006664:	3710      	adds	r7, #16
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}

0800666a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800666a:	b580      	push	{r7, lr}
 800666c:	b084      	sub	sp, #16
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006676:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006678:	68f8      	ldr	r0, [r7, #12]
 800667a:	f7ff fd4d 	bl	8006118 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800667e:	bf00      	nop
 8006680:	3710      	adds	r7, #16
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}

08006686 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8006686:	b580      	push	{r7, lr}
 8006688:	b084      	sub	sp, #16
 800668a:	af00      	add	r7, sp, #0
 800668c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006692:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2240      	movs	r2, #64	; 0x40
 8006698:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800669e:	f043 0204 	orr.w	r2, r3, #4
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80066a6:	68f8      	ldr	r0, [r7, #12]
 80066a8:	f7ff fd4a 	bl	8006140 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80066ac:	bf00      	nop
 80066ae:	3710      	adds	r7, #16
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b083      	sub	sp, #12
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80066bc:	bf00      	nop
 80066be:	370c      	adds	r7, #12
 80066c0:	46bd      	mov	sp, r7
 80066c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c6:	4770      	bx	lr

080066c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b085      	sub	sp, #20
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f003 0307 	and.w	r3, r3, #7
 80066d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80066d8:	4b0b      	ldr	r3, [pc, #44]	; (8006708 <__NVIC_SetPriorityGrouping+0x40>)
 80066da:	68db      	ldr	r3, [r3, #12]
 80066dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80066de:	68ba      	ldr	r2, [r7, #8]
 80066e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80066e4:	4013      	ands	r3, r2
 80066e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80066f0:	4b06      	ldr	r3, [pc, #24]	; (800670c <__NVIC_SetPriorityGrouping+0x44>)
 80066f2:	4313      	orrs	r3, r2
 80066f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80066f6:	4a04      	ldr	r2, [pc, #16]	; (8006708 <__NVIC_SetPriorityGrouping+0x40>)
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	60d3      	str	r3, [r2, #12]
}
 80066fc:	bf00      	nop
 80066fe:	3714      	adds	r7, #20
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr
 8006708:	e000ed00 	.word	0xe000ed00
 800670c:	05fa0000 	.word	0x05fa0000

08006710 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006710:	b480      	push	{r7}
 8006712:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006714:	4b04      	ldr	r3, [pc, #16]	; (8006728 <__NVIC_GetPriorityGrouping+0x18>)
 8006716:	68db      	ldr	r3, [r3, #12]
 8006718:	0a1b      	lsrs	r3, r3, #8
 800671a:	f003 0307 	and.w	r3, r3, #7
}
 800671e:	4618      	mov	r0, r3
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr
 8006728:	e000ed00 	.word	0xe000ed00

0800672c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800672c:	b480      	push	{r7}
 800672e:	b083      	sub	sp, #12
 8006730:	af00      	add	r7, sp, #0
 8006732:	4603      	mov	r3, r0
 8006734:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800673a:	2b00      	cmp	r3, #0
 800673c:	db0b      	blt.n	8006756 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800673e:	79fb      	ldrb	r3, [r7, #7]
 8006740:	f003 021f 	and.w	r2, r3, #31
 8006744:	4907      	ldr	r1, [pc, #28]	; (8006764 <__NVIC_EnableIRQ+0x38>)
 8006746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800674a:	095b      	lsrs	r3, r3, #5
 800674c:	2001      	movs	r0, #1
 800674e:	fa00 f202 	lsl.w	r2, r0, r2
 8006752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006756:	bf00      	nop
 8006758:	370c      	adds	r7, #12
 800675a:	46bd      	mov	sp, r7
 800675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006760:	4770      	bx	lr
 8006762:	bf00      	nop
 8006764:	e000e100 	.word	0xe000e100

08006768 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006768:	b480      	push	{r7}
 800676a:	b083      	sub	sp, #12
 800676c:	af00      	add	r7, sp, #0
 800676e:	4603      	mov	r3, r0
 8006770:	6039      	str	r1, [r7, #0]
 8006772:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006778:	2b00      	cmp	r3, #0
 800677a:	db0a      	blt.n	8006792 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	b2da      	uxtb	r2, r3
 8006780:	490c      	ldr	r1, [pc, #48]	; (80067b4 <__NVIC_SetPriority+0x4c>)
 8006782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006786:	0112      	lsls	r2, r2, #4
 8006788:	b2d2      	uxtb	r2, r2
 800678a:	440b      	add	r3, r1
 800678c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006790:	e00a      	b.n	80067a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	b2da      	uxtb	r2, r3
 8006796:	4908      	ldr	r1, [pc, #32]	; (80067b8 <__NVIC_SetPriority+0x50>)
 8006798:	79fb      	ldrb	r3, [r7, #7]
 800679a:	f003 030f 	and.w	r3, r3, #15
 800679e:	3b04      	subs	r3, #4
 80067a0:	0112      	lsls	r2, r2, #4
 80067a2:	b2d2      	uxtb	r2, r2
 80067a4:	440b      	add	r3, r1
 80067a6:	761a      	strb	r2, [r3, #24]
}
 80067a8:	bf00      	nop
 80067aa:	370c      	adds	r7, #12
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr
 80067b4:	e000e100 	.word	0xe000e100
 80067b8:	e000ed00 	.word	0xe000ed00

080067bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80067bc:	b480      	push	{r7}
 80067be:	b089      	sub	sp, #36	; 0x24
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	60f8      	str	r0, [r7, #12]
 80067c4:	60b9      	str	r1, [r7, #8]
 80067c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f003 0307 	and.w	r3, r3, #7
 80067ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80067d0:	69fb      	ldr	r3, [r7, #28]
 80067d2:	f1c3 0307 	rsb	r3, r3, #7
 80067d6:	2b04      	cmp	r3, #4
 80067d8:	bf28      	it	cs
 80067da:	2304      	movcs	r3, #4
 80067dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80067de:	69fb      	ldr	r3, [r7, #28]
 80067e0:	3304      	adds	r3, #4
 80067e2:	2b06      	cmp	r3, #6
 80067e4:	d902      	bls.n	80067ec <NVIC_EncodePriority+0x30>
 80067e6:	69fb      	ldr	r3, [r7, #28]
 80067e8:	3b03      	subs	r3, #3
 80067ea:	e000      	b.n	80067ee <NVIC_EncodePriority+0x32>
 80067ec:	2300      	movs	r3, #0
 80067ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80067f0:	f04f 32ff 	mov.w	r2, #4294967295
 80067f4:	69bb      	ldr	r3, [r7, #24]
 80067f6:	fa02 f303 	lsl.w	r3, r2, r3
 80067fa:	43da      	mvns	r2, r3
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	401a      	ands	r2, r3
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006804:	f04f 31ff 	mov.w	r1, #4294967295
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	fa01 f303 	lsl.w	r3, r1, r3
 800680e:	43d9      	mvns	r1, r3
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006814:	4313      	orrs	r3, r2
         );
}
 8006816:	4618      	mov	r0, r3
 8006818:	3724      	adds	r7, #36	; 0x24
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr
	...

08006824 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b082      	sub	sp, #8
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	3b01      	subs	r3, #1
 8006830:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006834:	d301      	bcc.n	800683a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006836:	2301      	movs	r3, #1
 8006838:	e00f      	b.n	800685a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800683a:	4a0a      	ldr	r2, [pc, #40]	; (8006864 <SysTick_Config+0x40>)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	3b01      	subs	r3, #1
 8006840:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006842:	210f      	movs	r1, #15
 8006844:	f04f 30ff 	mov.w	r0, #4294967295
 8006848:	f7ff ff8e 	bl	8006768 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800684c:	4b05      	ldr	r3, [pc, #20]	; (8006864 <SysTick_Config+0x40>)
 800684e:	2200      	movs	r2, #0
 8006850:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006852:	4b04      	ldr	r3, [pc, #16]	; (8006864 <SysTick_Config+0x40>)
 8006854:	2207      	movs	r2, #7
 8006856:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006858:	2300      	movs	r3, #0
}
 800685a:	4618      	mov	r0, r3
 800685c:	3708      	adds	r7, #8
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}
 8006862:	bf00      	nop
 8006864:	e000e010 	.word	0xe000e010

08006868 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b082      	sub	sp, #8
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f7ff ff29 	bl	80066c8 <__NVIC_SetPriorityGrouping>
}
 8006876:	bf00      	nop
 8006878:	3708      	adds	r7, #8
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}

0800687e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800687e:	b580      	push	{r7, lr}
 8006880:	b086      	sub	sp, #24
 8006882:	af00      	add	r7, sp, #0
 8006884:	4603      	mov	r3, r0
 8006886:	60b9      	str	r1, [r7, #8]
 8006888:	607a      	str	r2, [r7, #4]
 800688a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800688c:	2300      	movs	r3, #0
 800688e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006890:	f7ff ff3e 	bl	8006710 <__NVIC_GetPriorityGrouping>
 8006894:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006896:	687a      	ldr	r2, [r7, #4]
 8006898:	68b9      	ldr	r1, [r7, #8]
 800689a:	6978      	ldr	r0, [r7, #20]
 800689c:	f7ff ff8e 	bl	80067bc <NVIC_EncodePriority>
 80068a0:	4602      	mov	r2, r0
 80068a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068a6:	4611      	mov	r1, r2
 80068a8:	4618      	mov	r0, r3
 80068aa:	f7ff ff5d 	bl	8006768 <__NVIC_SetPriority>
}
 80068ae:	bf00      	nop
 80068b0:	3718      	adds	r7, #24
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}

080068b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80068b6:	b580      	push	{r7, lr}
 80068b8:	b082      	sub	sp, #8
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	4603      	mov	r3, r0
 80068be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80068c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068c4:	4618      	mov	r0, r3
 80068c6:	f7ff ff31 	bl	800672c <__NVIC_EnableIRQ>
}
 80068ca:	bf00      	nop
 80068cc:	3708      	adds	r7, #8
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}

080068d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80068d2:	b580      	push	{r7, lr}
 80068d4:	b082      	sub	sp, #8
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f7ff ffa2 	bl	8006824 <SysTick_Config>
 80068e0:	4603      	mov	r3, r0
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3708      	adds	r7, #8
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}

080068ea <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80068ea:	b480      	push	{r7}
 80068ec:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80068ee:	bf00      	nop
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr

080068f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b086      	sub	sp, #24
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006900:	2300      	movs	r3, #0
 8006902:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006904:	f7ff f95c 	bl	8005bc0 <HAL_GetTick>
 8006908:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d101      	bne.n	8006914 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006910:	2301      	movs	r3, #1
 8006912:	e099      	b.n	8006a48 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2202      	movs	r2, #2
 8006920:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f022 0201 	bic.w	r2, r2, #1
 8006932:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006934:	e00f      	b.n	8006956 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006936:	f7ff f943 	bl	8005bc0 <HAL_GetTick>
 800693a:	4602      	mov	r2, r0
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	1ad3      	subs	r3, r2, r3
 8006940:	2b05      	cmp	r3, #5
 8006942:	d908      	bls.n	8006956 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2220      	movs	r2, #32
 8006948:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2203      	movs	r2, #3
 800694e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006952:	2303      	movs	r3, #3
 8006954:	e078      	b.n	8006a48 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f003 0301 	and.w	r3, r3, #1
 8006960:	2b00      	cmp	r3, #0
 8006962:	d1e8      	bne.n	8006936 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800696c:	697a      	ldr	r2, [r7, #20]
 800696e:	4b38      	ldr	r3, [pc, #224]	; (8006a50 <HAL_DMA_Init+0x158>)
 8006970:	4013      	ands	r3, r2
 8006972:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	685a      	ldr	r2, [r3, #4]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	689b      	ldr	r3, [r3, #8]
 800697c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006982:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	691b      	ldr	r3, [r3, #16]
 8006988:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800698e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	699b      	ldr	r3, [r3, #24]
 8006994:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800699a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6a1b      	ldr	r3, [r3, #32]
 80069a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80069a2:	697a      	ldr	r2, [r7, #20]
 80069a4:	4313      	orrs	r3, r2
 80069a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ac:	2b04      	cmp	r3, #4
 80069ae:	d107      	bne.n	80069c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069b8:	4313      	orrs	r3, r2
 80069ba:	697a      	ldr	r2, [r7, #20]
 80069bc:	4313      	orrs	r3, r2
 80069be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	697a      	ldr	r2, [r7, #20]
 80069c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	695b      	ldr	r3, [r3, #20]
 80069ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	f023 0307 	bic.w	r3, r3, #7
 80069d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069dc:	697a      	ldr	r2, [r7, #20]
 80069de:	4313      	orrs	r3, r2
 80069e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e6:	2b04      	cmp	r3, #4
 80069e8:	d117      	bne.n	8006a1a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ee:	697a      	ldr	r2, [r7, #20]
 80069f0:	4313      	orrs	r3, r2
 80069f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d00e      	beq.n	8006a1a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f000 fa99 	bl	8006f34 <DMA_CheckFifoParam>
 8006a02:	4603      	mov	r3, r0
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d008      	beq.n	8006a1a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2240      	movs	r2, #64	; 0x40
 8006a0c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2201      	movs	r2, #1
 8006a12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006a16:	2301      	movs	r3, #1
 8006a18:	e016      	b.n	8006a48 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	697a      	ldr	r2, [r7, #20]
 8006a20:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 fa50 	bl	8006ec8 <DMA_CalcBaseAndBitshift>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a30:	223f      	movs	r2, #63	; 0x3f
 8006a32:	409a      	lsls	r2, r3
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2201      	movs	r2, #1
 8006a42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006a46:	2300      	movs	r3, #0
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3718      	adds	r7, #24
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}
 8006a50:	f010803f 	.word	0xf010803f

08006a54 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b086      	sub	sp, #24
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	60f8      	str	r0, [r7, #12]
 8006a5c:	60b9      	str	r1, [r7, #8]
 8006a5e:	607a      	str	r2, [r7, #4]
 8006a60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a62:	2300      	movs	r3, #0
 8006a64:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a6a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d101      	bne.n	8006a7a <HAL_DMA_Start_IT+0x26>
 8006a76:	2302      	movs	r3, #2
 8006a78:	e048      	b.n	8006b0c <HAL_DMA_Start_IT+0xb8>
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a88:	b2db      	uxtb	r3, r3
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	d137      	bne.n	8006afe <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2202      	movs	r2, #2
 8006a92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	687a      	ldr	r2, [r7, #4]
 8006aa0:	68b9      	ldr	r1, [r7, #8]
 8006aa2:	68f8      	ldr	r0, [r7, #12]
 8006aa4:	f000 f9e2 	bl	8006e6c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006aac:	223f      	movs	r2, #63	; 0x3f
 8006aae:	409a      	lsls	r2, r3
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f042 0216 	orr.w	r2, r2, #22
 8006ac2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	695a      	ldr	r2, [r3, #20]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006ad2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d007      	beq.n	8006aec <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f042 0208 	orr.w	r2, r2, #8
 8006aea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	681a      	ldr	r2, [r3, #0]
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f042 0201 	orr.w	r2, r2, #1
 8006afa:	601a      	str	r2, [r3, #0]
 8006afc:	e005      	b.n	8006b0a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2200      	movs	r2, #0
 8006b02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006b06:	2302      	movs	r3, #2
 8006b08:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006b0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3718      	adds	r7, #24
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}

08006b14 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b083      	sub	sp, #12
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	2b02      	cmp	r3, #2
 8006b26:	d004      	beq.n	8006b32 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2280      	movs	r2, #128	; 0x80
 8006b2c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	e00c      	b.n	8006b4c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2205      	movs	r2, #5
 8006b36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	681a      	ldr	r2, [r3, #0]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f022 0201 	bic.w	r2, r2, #1
 8006b48:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006b4a:	2300      	movs	r3, #0
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	370c      	adds	r7, #12
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr

08006b58 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b086      	sub	sp, #24
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8006b60:	2300      	movs	r3, #0
 8006b62:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8006b64:	4b92      	ldr	r3, [pc, #584]	; (8006db0 <HAL_DMA_IRQHandler+0x258>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a92      	ldr	r2, [pc, #584]	; (8006db4 <HAL_DMA_IRQHandler+0x25c>)
 8006b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8006b6e:	0a9b      	lsrs	r3, r3, #10
 8006b70:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b76:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b82:	2208      	movs	r2, #8
 8006b84:	409a      	lsls	r2, r3
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	4013      	ands	r3, r2
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d01a      	beq.n	8006bc4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f003 0304 	and.w	r3, r3, #4
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d013      	beq.n	8006bc4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f022 0204 	bic.w	r2, r2, #4
 8006baa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bb0:	2208      	movs	r2, #8
 8006bb2:	409a      	lsls	r2, r3
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bbc:	f043 0201 	orr.w	r2, r3, #1
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bc8:	2201      	movs	r2, #1
 8006bca:	409a      	lsls	r2, r3
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	4013      	ands	r3, r2
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d012      	beq.n	8006bfa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	695b      	ldr	r3, [r3, #20]
 8006bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d00b      	beq.n	8006bfa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006be6:	2201      	movs	r2, #1
 8006be8:	409a      	lsls	r2, r3
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bf2:	f043 0202 	orr.w	r2, r3, #2
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bfe:	2204      	movs	r2, #4
 8006c00:	409a      	lsls	r2, r3
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	4013      	ands	r3, r2
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d012      	beq.n	8006c30 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f003 0302 	and.w	r3, r3, #2
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d00b      	beq.n	8006c30 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c1c:	2204      	movs	r2, #4
 8006c1e:	409a      	lsls	r2, r3
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c28:	f043 0204 	orr.w	r2, r3, #4
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c34:	2210      	movs	r2, #16
 8006c36:	409a      	lsls	r2, r3
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	4013      	ands	r3, r2
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d043      	beq.n	8006cc8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f003 0308 	and.w	r3, r3, #8
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d03c      	beq.n	8006cc8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c52:	2210      	movs	r2, #16
 8006c54:	409a      	lsls	r2, r3
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d018      	beq.n	8006c9a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d108      	bne.n	8006c88 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d024      	beq.n	8006cc8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	4798      	blx	r3
 8006c86:	e01f      	b.n	8006cc8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d01b      	beq.n	8006cc8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	4798      	blx	r3
 8006c98:	e016      	b.n	8006cc8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d107      	bne.n	8006cb8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	681a      	ldr	r2, [r3, #0]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f022 0208 	bic.w	r2, r2, #8
 8006cb6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d003      	beq.n	8006cc8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ccc:	2220      	movs	r2, #32
 8006cce:	409a      	lsls	r2, r3
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	4013      	ands	r3, r2
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	f000 808e 	beq.w	8006df6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f003 0310 	and.w	r3, r3, #16
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	f000 8086 	beq.w	8006df6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cee:	2220      	movs	r2, #32
 8006cf0:	409a      	lsls	r2, r3
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	2b05      	cmp	r3, #5
 8006d00:	d136      	bne.n	8006d70 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	681a      	ldr	r2, [r3, #0]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f022 0216 	bic.w	r2, r2, #22
 8006d10:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	695a      	ldr	r2, [r3, #20]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d20:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d103      	bne.n	8006d32 <HAL_DMA_IRQHandler+0x1da>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d007      	beq.n	8006d42 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	681a      	ldr	r2, [r3, #0]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f022 0208 	bic.w	r2, r2, #8
 8006d40:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d46:	223f      	movs	r2, #63	; 0x3f
 8006d48:	409a      	lsls	r2, r3
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2200      	movs	r2, #0
 8006d52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2201      	movs	r2, #1
 8006d5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d07d      	beq.n	8006e62 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	4798      	blx	r3
        }
        return;
 8006d6e:	e078      	b.n	8006e62 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d01c      	beq.n	8006db8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d108      	bne.n	8006d9e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d030      	beq.n	8006df6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	4798      	blx	r3
 8006d9c:	e02b      	b.n	8006df6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d027      	beq.n	8006df6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	4798      	blx	r3
 8006dae:	e022      	b.n	8006df6 <HAL_DMA_IRQHandler+0x29e>
 8006db0:	20000324 	.word	0x20000324
 8006db4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d10f      	bne.n	8006de6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f022 0210 	bic.w	r2, r2, #16
 8006dd4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2201      	movs	r2, #1
 8006de2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d003      	beq.n	8006df6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d032      	beq.n	8006e64 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e02:	f003 0301 	and.w	r3, r3, #1
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d022      	beq.n	8006e50 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2205      	movs	r2, #5
 8006e0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f022 0201 	bic.w	r2, r2, #1
 8006e20:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	3301      	adds	r3, #1
 8006e26:	60bb      	str	r3, [r7, #8]
 8006e28:	697a      	ldr	r2, [r7, #20]
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d307      	bcc.n	8006e3e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f003 0301 	and.w	r3, r3, #1
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d1f2      	bne.n	8006e22 <HAL_DMA_IRQHandler+0x2ca>
 8006e3c:	e000      	b.n	8006e40 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8006e3e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2200      	movs	r2, #0
 8006e44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d005      	beq.n	8006e64 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	4798      	blx	r3
 8006e60:	e000      	b.n	8006e64 <HAL_DMA_IRQHandler+0x30c>
        return;
 8006e62:	bf00      	nop
    }
  }
}
 8006e64:	3718      	adds	r7, #24
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}
 8006e6a:	bf00      	nop

08006e6c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b085      	sub	sp, #20
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	60f8      	str	r0, [r7, #12]
 8006e74:	60b9      	str	r1, [r7, #8]
 8006e76:	607a      	str	r2, [r7, #4]
 8006e78:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006e88:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	683a      	ldr	r2, [r7, #0]
 8006e90:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	2b40      	cmp	r3, #64	; 0x40
 8006e98:	d108      	bne.n	8006eac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	68ba      	ldr	r2, [r7, #8]
 8006ea8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006eaa:	e007      	b.n	8006ebc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	68ba      	ldr	r2, [r7, #8]
 8006eb2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	687a      	ldr	r2, [r7, #4]
 8006eba:	60da      	str	r2, [r3, #12]
}
 8006ebc:	bf00      	nop
 8006ebe:	3714      	adds	r7, #20
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec6:	4770      	bx	lr

08006ec8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b085      	sub	sp, #20
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	b2db      	uxtb	r3, r3
 8006ed6:	3b10      	subs	r3, #16
 8006ed8:	4a13      	ldr	r2, [pc, #76]	; (8006f28 <DMA_CalcBaseAndBitshift+0x60>)
 8006eda:	fba2 2303 	umull	r2, r3, r2, r3
 8006ede:	091b      	lsrs	r3, r3, #4
 8006ee0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006ee2:	4a12      	ldr	r2, [pc, #72]	; (8006f2c <DMA_CalcBaseAndBitshift+0x64>)
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	4413      	add	r3, r2
 8006ee8:	781b      	ldrb	r3, [r3, #0]
 8006eea:	461a      	mov	r2, r3
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2b03      	cmp	r3, #3
 8006ef4:	d908      	bls.n	8006f08 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	461a      	mov	r2, r3
 8006efc:	4b0c      	ldr	r3, [pc, #48]	; (8006f30 <DMA_CalcBaseAndBitshift+0x68>)
 8006efe:	4013      	ands	r3, r2
 8006f00:	1d1a      	adds	r2, r3, #4
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	659a      	str	r2, [r3, #88]	; 0x58
 8006f06:	e006      	b.n	8006f16 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	4b08      	ldr	r3, [pc, #32]	; (8006f30 <DMA_CalcBaseAndBitshift+0x68>)
 8006f10:	4013      	ands	r3, r2
 8006f12:	687a      	ldr	r2, [r7, #4]
 8006f14:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3714      	adds	r7, #20
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr
 8006f26:	bf00      	nop
 8006f28:	aaaaaaab 	.word	0xaaaaaaab
 8006f2c:	0800b1f4 	.word	0x0800b1f4
 8006f30:	fffffc00 	.word	0xfffffc00

08006f34 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b085      	sub	sp, #20
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f44:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	699b      	ldr	r3, [r3, #24]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d11f      	bne.n	8006f8e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	2b03      	cmp	r3, #3
 8006f52:	d855      	bhi.n	8007000 <DMA_CheckFifoParam+0xcc>
 8006f54:	a201      	add	r2, pc, #4	; (adr r2, 8006f5c <DMA_CheckFifoParam+0x28>)
 8006f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f5a:	bf00      	nop
 8006f5c:	08006f6d 	.word	0x08006f6d
 8006f60:	08006f7f 	.word	0x08006f7f
 8006f64:	08006f6d 	.word	0x08006f6d
 8006f68:	08007001 	.word	0x08007001
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d045      	beq.n	8007004 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006f7c:	e042      	b.n	8007004 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f82:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006f86:	d13f      	bne.n	8007008 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006f8c:	e03c      	b.n	8007008 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	699b      	ldr	r3, [r3, #24]
 8006f92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f96:	d121      	bne.n	8006fdc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	2b03      	cmp	r3, #3
 8006f9c:	d836      	bhi.n	800700c <DMA_CheckFifoParam+0xd8>
 8006f9e:	a201      	add	r2, pc, #4	; (adr r2, 8006fa4 <DMA_CheckFifoParam+0x70>)
 8006fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa4:	08006fb5 	.word	0x08006fb5
 8006fa8:	08006fbb 	.word	0x08006fbb
 8006fac:	08006fb5 	.word	0x08006fb5
 8006fb0:	08006fcd 	.word	0x08006fcd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	73fb      	strb	r3, [r7, #15]
      break;
 8006fb8:	e02f      	b.n	800701a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fbe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d024      	beq.n	8007010 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006fca:	e021      	b.n	8007010 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fd0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006fd4:	d11e      	bne.n	8007014 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006fda:	e01b      	b.n	8007014 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	2b02      	cmp	r3, #2
 8006fe0:	d902      	bls.n	8006fe8 <DMA_CheckFifoParam+0xb4>
 8006fe2:	2b03      	cmp	r3, #3
 8006fe4:	d003      	beq.n	8006fee <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006fe6:	e018      	b.n	800701a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	73fb      	strb	r3, [r7, #15]
      break;
 8006fec:	e015      	b.n	800701a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ff2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d00e      	beq.n	8007018 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	73fb      	strb	r3, [r7, #15]
      break;
 8006ffe:	e00b      	b.n	8007018 <DMA_CheckFifoParam+0xe4>
      break;
 8007000:	bf00      	nop
 8007002:	e00a      	b.n	800701a <DMA_CheckFifoParam+0xe6>
      break;
 8007004:	bf00      	nop
 8007006:	e008      	b.n	800701a <DMA_CheckFifoParam+0xe6>
      break;
 8007008:	bf00      	nop
 800700a:	e006      	b.n	800701a <DMA_CheckFifoParam+0xe6>
      break;
 800700c:	bf00      	nop
 800700e:	e004      	b.n	800701a <DMA_CheckFifoParam+0xe6>
      break;
 8007010:	bf00      	nop
 8007012:	e002      	b.n	800701a <DMA_CheckFifoParam+0xe6>
      break;   
 8007014:	bf00      	nop
 8007016:	e000      	b.n	800701a <DMA_CheckFifoParam+0xe6>
      break;
 8007018:	bf00      	nop
    }
  } 
  
  return status; 
 800701a:	7bfb      	ldrb	r3, [r7, #15]
}
 800701c:	4618      	mov	r0, r3
 800701e:	3714      	adds	r7, #20
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr

08007028 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007028:	b480      	push	{r7}
 800702a:	b089      	sub	sp, #36	; 0x24
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8007032:	2300      	movs	r3, #0
 8007034:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8007036:	2300      	movs	r3, #0
 8007038:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800703a:	2300      	movs	r3, #0
 800703c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800703e:	2300      	movs	r3, #0
 8007040:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8007042:	2300      	movs	r3, #0
 8007044:	61fb      	str	r3, [r7, #28]
 8007046:	e175      	b.n	8007334 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8007048:	2201      	movs	r2, #1
 800704a:	69fb      	ldr	r3, [r7, #28]
 800704c:	fa02 f303 	lsl.w	r3, r2, r3
 8007050:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	697a      	ldr	r2, [r7, #20]
 8007058:	4013      	ands	r3, r2
 800705a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800705c:	693a      	ldr	r2, [r7, #16]
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	429a      	cmp	r2, r3
 8007062:	f040 8164 	bne.w	800732e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	2b02      	cmp	r3, #2
 800706c:	d003      	beq.n	8007076 <HAL_GPIO_Init+0x4e>
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	2b12      	cmp	r3, #18
 8007074:	d123      	bne.n	80070be <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8007076:	69fb      	ldr	r3, [r7, #28]
 8007078:	08da      	lsrs	r2, r3, #3
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	3208      	adds	r2, #8
 800707e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007082:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007084:	69fb      	ldr	r3, [r7, #28]
 8007086:	f003 0307 	and.w	r3, r3, #7
 800708a:	009b      	lsls	r3, r3, #2
 800708c:	220f      	movs	r2, #15
 800708e:	fa02 f303 	lsl.w	r3, r2, r3
 8007092:	43db      	mvns	r3, r3
 8007094:	69ba      	ldr	r2, [r7, #24]
 8007096:	4013      	ands	r3, r2
 8007098:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	691a      	ldr	r2, [r3, #16]
 800709e:	69fb      	ldr	r3, [r7, #28]
 80070a0:	f003 0307 	and.w	r3, r3, #7
 80070a4:	009b      	lsls	r3, r3, #2
 80070a6:	fa02 f303 	lsl.w	r3, r2, r3
 80070aa:	69ba      	ldr	r2, [r7, #24]
 80070ac:	4313      	orrs	r3, r2
 80070ae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80070b0:	69fb      	ldr	r3, [r7, #28]
 80070b2:	08da      	lsrs	r2, r3, #3
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	3208      	adds	r2, #8
 80070b8:	69b9      	ldr	r1, [r7, #24]
 80070ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80070c4:	69fb      	ldr	r3, [r7, #28]
 80070c6:	005b      	lsls	r3, r3, #1
 80070c8:	2203      	movs	r2, #3
 80070ca:	fa02 f303 	lsl.w	r3, r2, r3
 80070ce:	43db      	mvns	r3, r3
 80070d0:	69ba      	ldr	r2, [r7, #24]
 80070d2:	4013      	ands	r3, r2
 80070d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	f003 0203 	and.w	r2, r3, #3
 80070de:	69fb      	ldr	r3, [r7, #28]
 80070e0:	005b      	lsls	r3, r3, #1
 80070e2:	fa02 f303 	lsl.w	r3, r2, r3
 80070e6:	69ba      	ldr	r2, [r7, #24]
 80070e8:	4313      	orrs	r3, r2
 80070ea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	69ba      	ldr	r2, [r7, #24]
 80070f0:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	2b01      	cmp	r3, #1
 80070f8:	d00b      	beq.n	8007112 <HAL_GPIO_Init+0xea>
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	2b02      	cmp	r3, #2
 8007100:	d007      	beq.n	8007112 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007106:	2b11      	cmp	r3, #17
 8007108:	d003      	beq.n	8007112 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	2b12      	cmp	r3, #18
 8007110:	d130      	bne.n	8007174 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	689b      	ldr	r3, [r3, #8]
 8007116:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007118:	69fb      	ldr	r3, [r7, #28]
 800711a:	005b      	lsls	r3, r3, #1
 800711c:	2203      	movs	r2, #3
 800711e:	fa02 f303 	lsl.w	r3, r2, r3
 8007122:	43db      	mvns	r3, r3
 8007124:	69ba      	ldr	r2, [r7, #24]
 8007126:	4013      	ands	r3, r2
 8007128:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	68da      	ldr	r2, [r3, #12]
 800712e:	69fb      	ldr	r3, [r7, #28]
 8007130:	005b      	lsls	r3, r3, #1
 8007132:	fa02 f303 	lsl.w	r3, r2, r3
 8007136:	69ba      	ldr	r2, [r7, #24]
 8007138:	4313      	orrs	r3, r2
 800713a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	69ba      	ldr	r2, [r7, #24]
 8007140:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	685b      	ldr	r3, [r3, #4]
 8007146:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007148:	2201      	movs	r2, #1
 800714a:	69fb      	ldr	r3, [r7, #28]
 800714c:	fa02 f303 	lsl.w	r3, r2, r3
 8007150:	43db      	mvns	r3, r3
 8007152:	69ba      	ldr	r2, [r7, #24]
 8007154:	4013      	ands	r3, r2
 8007156:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	091b      	lsrs	r3, r3, #4
 800715e:	f003 0201 	and.w	r2, r3, #1
 8007162:	69fb      	ldr	r3, [r7, #28]
 8007164:	fa02 f303 	lsl.w	r3, r2, r3
 8007168:	69ba      	ldr	r2, [r7, #24]
 800716a:	4313      	orrs	r3, r2
 800716c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	69ba      	ldr	r2, [r7, #24]
 8007172:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	68db      	ldr	r3, [r3, #12]
 8007178:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800717a:	69fb      	ldr	r3, [r7, #28]
 800717c:	005b      	lsls	r3, r3, #1
 800717e:	2203      	movs	r2, #3
 8007180:	fa02 f303 	lsl.w	r3, r2, r3
 8007184:	43db      	mvns	r3, r3
 8007186:	69ba      	ldr	r2, [r7, #24]
 8007188:	4013      	ands	r3, r2
 800718a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	689a      	ldr	r2, [r3, #8]
 8007190:	69fb      	ldr	r3, [r7, #28]
 8007192:	005b      	lsls	r3, r3, #1
 8007194:	fa02 f303 	lsl.w	r3, r2, r3
 8007198:	69ba      	ldr	r2, [r7, #24]
 800719a:	4313      	orrs	r3, r2
 800719c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	69ba      	ldr	r2, [r7, #24]
 80071a2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	f000 80be 	beq.w	800732e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80071b2:	4b65      	ldr	r3, [pc, #404]	; (8007348 <HAL_GPIO_Init+0x320>)
 80071b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071b6:	4a64      	ldr	r2, [pc, #400]	; (8007348 <HAL_GPIO_Init+0x320>)
 80071b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80071bc:	6453      	str	r3, [r2, #68]	; 0x44
 80071be:	4b62      	ldr	r3, [pc, #392]	; (8007348 <HAL_GPIO_Init+0x320>)
 80071c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071c6:	60fb      	str	r3, [r7, #12]
 80071c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80071ca:	4a60      	ldr	r2, [pc, #384]	; (800734c <HAL_GPIO_Init+0x324>)
 80071cc:	69fb      	ldr	r3, [r7, #28]
 80071ce:	089b      	lsrs	r3, r3, #2
 80071d0:	3302      	adds	r3, #2
 80071d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80071d8:	69fb      	ldr	r3, [r7, #28]
 80071da:	f003 0303 	and.w	r3, r3, #3
 80071de:	009b      	lsls	r3, r3, #2
 80071e0:	220f      	movs	r2, #15
 80071e2:	fa02 f303 	lsl.w	r3, r2, r3
 80071e6:	43db      	mvns	r3, r3
 80071e8:	69ba      	ldr	r2, [r7, #24]
 80071ea:	4013      	ands	r3, r2
 80071ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	4a57      	ldr	r2, [pc, #348]	; (8007350 <HAL_GPIO_Init+0x328>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d037      	beq.n	8007266 <HAL_GPIO_Init+0x23e>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	4a56      	ldr	r2, [pc, #344]	; (8007354 <HAL_GPIO_Init+0x32c>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d031      	beq.n	8007262 <HAL_GPIO_Init+0x23a>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	4a55      	ldr	r2, [pc, #340]	; (8007358 <HAL_GPIO_Init+0x330>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d02b      	beq.n	800725e <HAL_GPIO_Init+0x236>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	4a54      	ldr	r2, [pc, #336]	; (800735c <HAL_GPIO_Init+0x334>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d025      	beq.n	800725a <HAL_GPIO_Init+0x232>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	4a53      	ldr	r2, [pc, #332]	; (8007360 <HAL_GPIO_Init+0x338>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d01f      	beq.n	8007256 <HAL_GPIO_Init+0x22e>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	4a52      	ldr	r2, [pc, #328]	; (8007364 <HAL_GPIO_Init+0x33c>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d019      	beq.n	8007252 <HAL_GPIO_Init+0x22a>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	4a51      	ldr	r2, [pc, #324]	; (8007368 <HAL_GPIO_Init+0x340>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d013      	beq.n	800724e <HAL_GPIO_Init+0x226>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	4a50      	ldr	r2, [pc, #320]	; (800736c <HAL_GPIO_Init+0x344>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d00d      	beq.n	800724a <HAL_GPIO_Init+0x222>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	4a4f      	ldr	r2, [pc, #316]	; (8007370 <HAL_GPIO_Init+0x348>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d007      	beq.n	8007246 <HAL_GPIO_Init+0x21e>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	4a4e      	ldr	r2, [pc, #312]	; (8007374 <HAL_GPIO_Init+0x34c>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d101      	bne.n	8007242 <HAL_GPIO_Init+0x21a>
 800723e:	2309      	movs	r3, #9
 8007240:	e012      	b.n	8007268 <HAL_GPIO_Init+0x240>
 8007242:	230a      	movs	r3, #10
 8007244:	e010      	b.n	8007268 <HAL_GPIO_Init+0x240>
 8007246:	2308      	movs	r3, #8
 8007248:	e00e      	b.n	8007268 <HAL_GPIO_Init+0x240>
 800724a:	2307      	movs	r3, #7
 800724c:	e00c      	b.n	8007268 <HAL_GPIO_Init+0x240>
 800724e:	2306      	movs	r3, #6
 8007250:	e00a      	b.n	8007268 <HAL_GPIO_Init+0x240>
 8007252:	2305      	movs	r3, #5
 8007254:	e008      	b.n	8007268 <HAL_GPIO_Init+0x240>
 8007256:	2304      	movs	r3, #4
 8007258:	e006      	b.n	8007268 <HAL_GPIO_Init+0x240>
 800725a:	2303      	movs	r3, #3
 800725c:	e004      	b.n	8007268 <HAL_GPIO_Init+0x240>
 800725e:	2302      	movs	r3, #2
 8007260:	e002      	b.n	8007268 <HAL_GPIO_Init+0x240>
 8007262:	2301      	movs	r3, #1
 8007264:	e000      	b.n	8007268 <HAL_GPIO_Init+0x240>
 8007266:	2300      	movs	r3, #0
 8007268:	69fa      	ldr	r2, [r7, #28]
 800726a:	f002 0203 	and.w	r2, r2, #3
 800726e:	0092      	lsls	r2, r2, #2
 8007270:	4093      	lsls	r3, r2
 8007272:	69ba      	ldr	r2, [r7, #24]
 8007274:	4313      	orrs	r3, r2
 8007276:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8007278:	4934      	ldr	r1, [pc, #208]	; (800734c <HAL_GPIO_Init+0x324>)
 800727a:	69fb      	ldr	r3, [r7, #28]
 800727c:	089b      	lsrs	r3, r3, #2
 800727e:	3302      	adds	r3, #2
 8007280:	69ba      	ldr	r2, [r7, #24]
 8007282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007286:	4b3c      	ldr	r3, [pc, #240]	; (8007378 <HAL_GPIO_Init+0x350>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	43db      	mvns	r3, r3
 8007290:	69ba      	ldr	r2, [r7, #24]
 8007292:	4013      	ands	r3, r2
 8007294:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d003      	beq.n	80072aa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80072a2:	69ba      	ldr	r2, [r7, #24]
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	4313      	orrs	r3, r2
 80072a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80072aa:	4a33      	ldr	r2, [pc, #204]	; (8007378 <HAL_GPIO_Init+0x350>)
 80072ac:	69bb      	ldr	r3, [r7, #24]
 80072ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80072b0:	4b31      	ldr	r3, [pc, #196]	; (8007378 <HAL_GPIO_Init+0x350>)
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	43db      	mvns	r3, r3
 80072ba:	69ba      	ldr	r2, [r7, #24]
 80072bc:	4013      	ands	r3, r2
 80072be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	685b      	ldr	r3, [r3, #4]
 80072c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d003      	beq.n	80072d4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80072cc:	69ba      	ldr	r2, [r7, #24]
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	4313      	orrs	r3, r2
 80072d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80072d4:	4a28      	ldr	r2, [pc, #160]	; (8007378 <HAL_GPIO_Init+0x350>)
 80072d6:	69bb      	ldr	r3, [r7, #24]
 80072d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80072da:	4b27      	ldr	r3, [pc, #156]	; (8007378 <HAL_GPIO_Init+0x350>)
 80072dc:	689b      	ldr	r3, [r3, #8]
 80072de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	43db      	mvns	r3, r3
 80072e4:	69ba      	ldr	r2, [r7, #24]
 80072e6:	4013      	ands	r3, r2
 80072e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d003      	beq.n	80072fe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80072f6:	69ba      	ldr	r2, [r7, #24]
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	4313      	orrs	r3, r2
 80072fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80072fe:	4a1e      	ldr	r2, [pc, #120]	; (8007378 <HAL_GPIO_Init+0x350>)
 8007300:	69bb      	ldr	r3, [r7, #24]
 8007302:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007304:	4b1c      	ldr	r3, [pc, #112]	; (8007378 <HAL_GPIO_Init+0x350>)
 8007306:	68db      	ldr	r3, [r3, #12]
 8007308:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	43db      	mvns	r3, r3
 800730e:	69ba      	ldr	r2, [r7, #24]
 8007310:	4013      	ands	r3, r2
 8007312:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800731c:	2b00      	cmp	r3, #0
 800731e:	d003      	beq.n	8007328 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8007320:	69ba      	ldr	r2, [r7, #24]
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	4313      	orrs	r3, r2
 8007326:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007328:	4a13      	ldr	r2, [pc, #76]	; (8007378 <HAL_GPIO_Init+0x350>)
 800732a:	69bb      	ldr	r3, [r7, #24]
 800732c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800732e:	69fb      	ldr	r3, [r7, #28]
 8007330:	3301      	adds	r3, #1
 8007332:	61fb      	str	r3, [r7, #28]
 8007334:	69fb      	ldr	r3, [r7, #28]
 8007336:	2b0f      	cmp	r3, #15
 8007338:	f67f ae86 	bls.w	8007048 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800733c:	bf00      	nop
 800733e:	3724      	adds	r7, #36	; 0x24
 8007340:	46bd      	mov	sp, r7
 8007342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007346:	4770      	bx	lr
 8007348:	40023800 	.word	0x40023800
 800734c:	40013800 	.word	0x40013800
 8007350:	40020000 	.word	0x40020000
 8007354:	40020400 	.word	0x40020400
 8007358:	40020800 	.word	0x40020800
 800735c:	40020c00 	.word	0x40020c00
 8007360:	40021000 	.word	0x40021000
 8007364:	40021400 	.word	0x40021400
 8007368:	40021800 	.word	0x40021800
 800736c:	40021c00 	.word	0x40021c00
 8007370:	40022000 	.word	0x40022000
 8007374:	40022400 	.word	0x40022400
 8007378:	40013c00 	.word	0x40013c00

0800737c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800737c:	b480      	push	{r7}
 800737e:	b085      	sub	sp, #20
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	460b      	mov	r3, r1
 8007386:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	691a      	ldr	r2, [r3, #16]
 800738c:	887b      	ldrh	r3, [r7, #2]
 800738e:	4013      	ands	r3, r2
 8007390:	2b00      	cmp	r3, #0
 8007392:	d002      	beq.n	800739a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007394:	2301      	movs	r3, #1
 8007396:	73fb      	strb	r3, [r7, #15]
 8007398:	e001      	b.n	800739e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800739a:	2300      	movs	r3, #0
 800739c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800739e:	7bfb      	ldrb	r3, [r7, #15]
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3714      	adds	r7, #20
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr

080073ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b083      	sub	sp, #12
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	460b      	mov	r3, r1
 80073b6:	807b      	strh	r3, [r7, #2]
 80073b8:	4613      	mov	r3, r2
 80073ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80073bc:	787b      	ldrb	r3, [r7, #1]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d003      	beq.n	80073ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80073c2:	887a      	ldrh	r2, [r7, #2]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80073c8:	e003      	b.n	80073d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80073ca:	887b      	ldrh	r3, [r7, #2]
 80073cc:	041a      	lsls	r2, r3, #16
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	619a      	str	r2, [r3, #24]
}
 80073d2:	bf00      	nop
 80073d4:	370c      	adds	r7, #12
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr

080073de <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80073de:	b480      	push	{r7}
 80073e0:	b083      	sub	sp, #12
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	6078      	str	r0, [r7, #4]
 80073e6:	460b      	mov	r3, r1
 80073e8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	695a      	ldr	r2, [r3, #20]
 80073ee:	887b      	ldrh	r3, [r7, #2]
 80073f0:	401a      	ands	r2, r3
 80073f2:	887b      	ldrh	r3, [r7, #2]
 80073f4:	429a      	cmp	r2, r3
 80073f6:	d104      	bne.n	8007402 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80073f8:	887b      	ldrh	r3, [r7, #2]
 80073fa:	041a      	lsls	r2, r3, #16
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8007400:	e002      	b.n	8007408 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8007402:	887a      	ldrh	r2, [r7, #2]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	619a      	str	r2, [r3, #24]
}
 8007408:	bf00      	nop
 800740a:	370c      	adds	r7, #12
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr

08007414 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b082      	sub	sp, #8
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d101      	bne.n	8007426 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007422:	2301      	movs	r3, #1
 8007424:	e07f      	b.n	8007526 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800742c:	b2db      	uxtb	r3, r3
 800742e:	2b00      	cmp	r3, #0
 8007430:	d106      	bne.n	8007440 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f7fd ff84 	bl	8005348 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2224      	movs	r2, #36	; 0x24
 8007444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	681a      	ldr	r2, [r3, #0]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f022 0201 	bic.w	r2, r2, #1
 8007456:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	685a      	ldr	r2, [r3, #4]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007464:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	689a      	ldr	r2, [r3, #8]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007474:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	68db      	ldr	r3, [r3, #12]
 800747a:	2b01      	cmp	r3, #1
 800747c:	d107      	bne.n	800748e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	689a      	ldr	r2, [r3, #8]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800748a:	609a      	str	r2, [r3, #8]
 800748c:	e006      	b.n	800749c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	689a      	ldr	r2, [r3, #8]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800749a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	68db      	ldr	r3, [r3, #12]
 80074a0:	2b02      	cmp	r3, #2
 80074a2:	d104      	bne.n	80074ae <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80074ac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	6859      	ldr	r1, [r3, #4]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681a      	ldr	r2, [r3, #0]
 80074b8:	4b1d      	ldr	r3, [pc, #116]	; (8007530 <HAL_I2C_Init+0x11c>)
 80074ba:	430b      	orrs	r3, r1
 80074bc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	68da      	ldr	r2, [r3, #12]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80074cc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	691a      	ldr	r2, [r3, #16]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	695b      	ldr	r3, [r3, #20]
 80074d6:	ea42 0103 	orr.w	r1, r2, r3
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	699b      	ldr	r3, [r3, #24]
 80074de:	021a      	lsls	r2, r3, #8
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	430a      	orrs	r2, r1
 80074e6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	69d9      	ldr	r1, [r3, #28]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6a1a      	ldr	r2, [r3, #32]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	430a      	orrs	r2, r1
 80074f6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	681a      	ldr	r2, [r3, #0]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f042 0201 	orr.w	r2, r2, #1
 8007506:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2200      	movs	r2, #0
 800750c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2220      	movs	r2, #32
 8007512:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2200      	movs	r2, #0
 800751a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2200      	movs	r2, #0
 8007520:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007524:	2300      	movs	r3, #0
}
 8007526:	4618      	mov	r0, r3
 8007528:	3708      	adds	r7, #8
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}
 800752e:	bf00      	nop
 8007530:	02008000 	.word	0x02008000

08007534 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b088      	sub	sp, #32
 8007538:	af02      	add	r7, sp, #8
 800753a:	60f8      	str	r0, [r7, #12]
 800753c:	607a      	str	r2, [r7, #4]
 800753e:	461a      	mov	r2, r3
 8007540:	460b      	mov	r3, r1
 8007542:	817b      	strh	r3, [r7, #10]
 8007544:	4613      	mov	r3, r2
 8007546:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800754e:	b2db      	uxtb	r3, r3
 8007550:	2b20      	cmp	r3, #32
 8007552:	f040 80da 	bne.w	800770a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800755c:	2b01      	cmp	r3, #1
 800755e:	d101      	bne.n	8007564 <HAL_I2C_Master_Transmit+0x30>
 8007560:	2302      	movs	r3, #2
 8007562:	e0d3      	b.n	800770c <HAL_I2C_Master_Transmit+0x1d8>
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	2201      	movs	r2, #1
 8007568:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800756c:	f7fe fb28 	bl	8005bc0 <HAL_GetTick>
 8007570:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	9300      	str	r3, [sp, #0]
 8007576:	2319      	movs	r3, #25
 8007578:	2201      	movs	r2, #1
 800757a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800757e:	68f8      	ldr	r0, [r7, #12]
 8007580:	f000 fd80 	bl	8008084 <I2C_WaitOnFlagUntilTimeout>
 8007584:	4603      	mov	r3, r0
 8007586:	2b00      	cmp	r3, #0
 8007588:	d001      	beq.n	800758e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800758a:	2301      	movs	r3, #1
 800758c:	e0be      	b.n	800770c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	2221      	movs	r2, #33	; 0x21
 8007592:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2210      	movs	r2, #16
 800759a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2200      	movs	r2, #0
 80075a2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	687a      	ldr	r2, [r7, #4]
 80075a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	893a      	ldrh	r2, [r7, #8]
 80075ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	2200      	movs	r2, #0
 80075b4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	2bff      	cmp	r3, #255	; 0xff
 80075be:	d90e      	bls.n	80075de <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	22ff      	movs	r2, #255	; 0xff
 80075c4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075ca:	b2da      	uxtb	r2, r3
 80075cc:	8979      	ldrh	r1, [r7, #10]
 80075ce:	4b51      	ldr	r3, [pc, #324]	; (8007714 <HAL_I2C_Master_Transmit+0x1e0>)
 80075d0:	9300      	str	r3, [sp, #0]
 80075d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80075d6:	68f8      	ldr	r0, [r7, #12]
 80075d8:	f000 fe76 	bl	80082c8 <I2C_TransferConfig>
 80075dc:	e06c      	b.n	80076b8 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075e2:	b29a      	uxth	r2, r3
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075ec:	b2da      	uxtb	r2, r3
 80075ee:	8979      	ldrh	r1, [r7, #10]
 80075f0:	4b48      	ldr	r3, [pc, #288]	; (8007714 <HAL_I2C_Master_Transmit+0x1e0>)
 80075f2:	9300      	str	r3, [sp, #0]
 80075f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80075f8:	68f8      	ldr	r0, [r7, #12]
 80075fa:	f000 fe65 	bl	80082c8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80075fe:	e05b      	b.n	80076b8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007600:	697a      	ldr	r2, [r7, #20]
 8007602:	6a39      	ldr	r1, [r7, #32]
 8007604:	68f8      	ldr	r0, [r7, #12]
 8007606:	f000 fd7d 	bl	8008104 <I2C_WaitOnTXISFlagUntilTimeout>
 800760a:	4603      	mov	r3, r0
 800760c:	2b00      	cmp	r3, #0
 800760e:	d001      	beq.n	8007614 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8007610:	2301      	movs	r3, #1
 8007612:	e07b      	b.n	800770c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007618:	781a      	ldrb	r2, [r3, #0]
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007624:	1c5a      	adds	r2, r3, #1
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800762e:	b29b      	uxth	r3, r3
 8007630:	3b01      	subs	r3, #1
 8007632:	b29a      	uxth	r2, r3
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800763c:	3b01      	subs	r3, #1
 800763e:	b29a      	uxth	r2, r3
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007648:	b29b      	uxth	r3, r3
 800764a:	2b00      	cmp	r3, #0
 800764c:	d034      	beq.n	80076b8 <HAL_I2C_Master_Transmit+0x184>
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007652:	2b00      	cmp	r3, #0
 8007654:	d130      	bne.n	80076b8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	9300      	str	r3, [sp, #0]
 800765a:	6a3b      	ldr	r3, [r7, #32]
 800765c:	2200      	movs	r2, #0
 800765e:	2180      	movs	r1, #128	; 0x80
 8007660:	68f8      	ldr	r0, [r7, #12]
 8007662:	f000 fd0f 	bl	8008084 <I2C_WaitOnFlagUntilTimeout>
 8007666:	4603      	mov	r3, r0
 8007668:	2b00      	cmp	r3, #0
 800766a:	d001      	beq.n	8007670 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800766c:	2301      	movs	r3, #1
 800766e:	e04d      	b.n	800770c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007674:	b29b      	uxth	r3, r3
 8007676:	2bff      	cmp	r3, #255	; 0xff
 8007678:	d90e      	bls.n	8007698 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	22ff      	movs	r2, #255	; 0xff
 800767e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007684:	b2da      	uxtb	r2, r3
 8007686:	8979      	ldrh	r1, [r7, #10]
 8007688:	2300      	movs	r3, #0
 800768a:	9300      	str	r3, [sp, #0]
 800768c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007690:	68f8      	ldr	r0, [r7, #12]
 8007692:	f000 fe19 	bl	80082c8 <I2C_TransferConfig>
 8007696:	e00f      	b.n	80076b8 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800769c:	b29a      	uxth	r2, r3
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076a6:	b2da      	uxtb	r2, r3
 80076a8:	8979      	ldrh	r1, [r7, #10]
 80076aa:	2300      	movs	r3, #0
 80076ac:	9300      	str	r3, [sp, #0]
 80076ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80076b2:	68f8      	ldr	r0, [r7, #12]
 80076b4:	f000 fe08 	bl	80082c8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076bc:	b29b      	uxth	r3, r3
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d19e      	bne.n	8007600 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80076c2:	697a      	ldr	r2, [r7, #20]
 80076c4:	6a39      	ldr	r1, [r7, #32]
 80076c6:	68f8      	ldr	r0, [r7, #12]
 80076c8:	f000 fd5c 	bl	8008184 <I2C_WaitOnSTOPFlagUntilTimeout>
 80076cc:	4603      	mov	r3, r0
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d001      	beq.n	80076d6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80076d2:	2301      	movs	r3, #1
 80076d4:	e01a      	b.n	800770c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	2220      	movs	r2, #32
 80076dc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	6859      	ldr	r1, [r3, #4]
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681a      	ldr	r2, [r3, #0]
 80076e8:	4b0b      	ldr	r3, [pc, #44]	; (8007718 <HAL_I2C_Master_Transmit+0x1e4>)
 80076ea:	400b      	ands	r3, r1
 80076ec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2220      	movs	r2, #32
 80076f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2200      	movs	r2, #0
 80076fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2200      	movs	r2, #0
 8007702:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007706:	2300      	movs	r3, #0
 8007708:	e000      	b.n	800770c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800770a:	2302      	movs	r3, #2
  }
}
 800770c:	4618      	mov	r0, r3
 800770e:	3718      	adds	r7, #24
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}
 8007714:	80002000 	.word	0x80002000
 8007718:	fe00e800 	.word	0xfe00e800

0800771c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b084      	sub	sp, #16
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	699b      	ldr	r3, [r3, #24]
 800772a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007738:	2b00      	cmp	r3, #0
 800773a:	d005      	beq.n	8007748 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007740:	68ba      	ldr	r2, [r7, #8]
 8007742:	68f9      	ldr	r1, [r7, #12]
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	4798      	blx	r3
  }
}
 8007748:	bf00      	nop
 800774a:	3710      	adds	r7, #16
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}

08007750 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b086      	sub	sp, #24
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	699b      	ldr	r3, [r3, #24]
 800775e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	0a1b      	lsrs	r3, r3, #8
 800776c:	f003 0301 	and.w	r3, r3, #1
 8007770:	2b00      	cmp	r3, #0
 8007772:	d010      	beq.n	8007796 <HAL_I2C_ER_IRQHandler+0x46>
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	09db      	lsrs	r3, r3, #7
 8007778:	f003 0301 	and.w	r3, r3, #1
 800777c:	2b00      	cmp	r3, #0
 800777e:	d00a      	beq.n	8007796 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007784:	f043 0201 	orr.w	r2, r3, #1
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007794:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	0a9b      	lsrs	r3, r3, #10
 800779a:	f003 0301 	and.w	r3, r3, #1
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d010      	beq.n	80077c4 <HAL_I2C_ER_IRQHandler+0x74>
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	09db      	lsrs	r3, r3, #7
 80077a6:	f003 0301 	and.w	r3, r3, #1
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d00a      	beq.n	80077c4 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077b2:	f043 0208 	orr.w	r2, r3, #8
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80077c2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	0a5b      	lsrs	r3, r3, #9
 80077c8:	f003 0301 	and.w	r3, r3, #1
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d010      	beq.n	80077f2 <HAL_I2C_ER_IRQHandler+0xa2>
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	09db      	lsrs	r3, r3, #7
 80077d4:	f003 0301 	and.w	r3, r3, #1
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d00a      	beq.n	80077f2 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077e0:	f043 0202 	orr.w	r2, r3, #2
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077f0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077f6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f003 030b 	and.w	r3, r3, #11
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d003      	beq.n	800780a <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8007802:	68f9      	ldr	r1, [r7, #12]
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f000 fb35 	bl	8007e74 <I2C_ITError>
  }
}
 800780a:	bf00      	nop
 800780c:	3718      	adds	r7, #24
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}

08007812 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007812:	b480      	push	{r7}
 8007814:	b083      	sub	sp, #12
 8007816:	af00      	add	r7, sp, #0
 8007818:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800781a:	bf00      	nop
 800781c:	370c      	adds	r7, #12
 800781e:	46bd      	mov	sp, r7
 8007820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007824:	4770      	bx	lr

08007826 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007826:	b480      	push	{r7}
 8007828:	b083      	sub	sp, #12
 800782a:	af00      	add	r7, sp, #0
 800782c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800782e:	bf00      	nop
 8007830:	370c      	adds	r7, #12
 8007832:	46bd      	mov	sp, r7
 8007834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007838:	4770      	bx	lr

0800783a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800783a:	b480      	push	{r7}
 800783c:	b083      	sub	sp, #12
 800783e:	af00      	add	r7, sp, #0
 8007840:	6078      	str	r0, [r7, #4]
 8007842:	460b      	mov	r3, r1
 8007844:	70fb      	strb	r3, [r7, #3]
 8007846:	4613      	mov	r3, r2
 8007848:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800784a:	bf00      	nop
 800784c:	370c      	adds	r7, #12
 800784e:	46bd      	mov	sp, r7
 8007850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007854:	4770      	bx	lr

08007856 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007856:	b480      	push	{r7}
 8007858:	b083      	sub	sp, #12
 800785a:	af00      	add	r7, sp, #0
 800785c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800785e:	bf00      	nop
 8007860:	370c      	adds	r7, #12
 8007862:	46bd      	mov	sp, r7
 8007864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007868:	4770      	bx	lr

0800786a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800786a:	b480      	push	{r7}
 800786c:	b083      	sub	sp, #12
 800786e:	af00      	add	r7, sp, #0
 8007870:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007872:	bf00      	nop
 8007874:	370c      	adds	r7, #12
 8007876:	46bd      	mov	sp, r7
 8007878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787c:	4770      	bx	lr

0800787e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800787e:	b480      	push	{r7}
 8007880:	b083      	sub	sp, #12
 8007882:	af00      	add	r7, sp, #0
 8007884:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007886:	bf00      	nop
 8007888:	370c      	adds	r7, #12
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr

08007892 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8007892:	b580      	push	{r7, lr}
 8007894:	b086      	sub	sp, #24
 8007896:	af00      	add	r7, sp, #0
 8007898:	60f8      	str	r0, [r7, #12]
 800789a:	60b9      	str	r1, [r7, #8]
 800789c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a2:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80078ae:	2b01      	cmp	r3, #1
 80078b0:	d101      	bne.n	80078b6 <I2C_Slave_ISR_IT+0x24>
 80078b2:	2302      	movs	r3, #2
 80078b4:	e0f0      	b.n	8007a98 <I2C_Slave_ISR_IT+0x206>
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2201      	movs	r2, #1
 80078ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	091b      	lsrs	r3, r3, #4
 80078c2:	f003 0301 	and.w	r3, r3, #1
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d04d      	beq.n	8007966 <I2C_Slave_ISR_IT+0xd4>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	091b      	lsrs	r3, r3, #4
 80078ce:	f003 0301 	and.w	r3, r3, #1
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d047      	beq.n	8007966 <I2C_Slave_ISR_IT+0xd4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078da:	b29b      	uxth	r3, r3
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d128      	bne.n	8007932 <I2C_Slave_ISR_IT+0xa0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078e6:	b2db      	uxtb	r3, r3
 80078e8:	2b28      	cmp	r3, #40	; 0x28
 80078ea:	d108      	bne.n	80078fe <I2C_Slave_ISR_IT+0x6c>
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80078f2:	d104      	bne.n	80078fe <I2C_Slave_ISR_IT+0x6c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80078f4:	6979      	ldr	r1, [r7, #20]
 80078f6:	68f8      	ldr	r0, [r7, #12]
 80078f8:	f000 fa68 	bl	8007dcc <I2C_ITListenCplt>
 80078fc:	e032      	b.n	8007964 <I2C_Slave_ISR_IT+0xd2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007904:	b2db      	uxtb	r3, r3
 8007906:	2b29      	cmp	r3, #41	; 0x29
 8007908:	d10e      	bne.n	8007928 <I2C_Slave_ISR_IT+0x96>
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007910:	d00a      	beq.n	8007928 <I2C_Slave_ISR_IT+0x96>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	2210      	movs	r2, #16
 8007918:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800791a:	68f8      	ldr	r0, [r7, #12]
 800791c:	f000 fb6a 	bl	8007ff4 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007920:	68f8      	ldr	r0, [r7, #12]
 8007922:	f000 f93f 	bl	8007ba4 <I2C_ITSlaveSeqCplt>
 8007926:	e01d      	b.n	8007964 <I2C_Slave_ISR_IT+0xd2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	2210      	movs	r2, #16
 800792e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8007930:	e09a      	b.n	8007a68 <I2C_Slave_ISR_IT+0x1d6>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	2210      	movs	r2, #16
 8007938:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800793e:	f043 0204 	orr.w	r2, r3, #4
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d004      	beq.n	8007956 <I2C_Slave_ISR_IT+0xc4>
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007952:	f040 8089 	bne.w	8007a68 <I2C_Slave_ISR_IT+0x1d6>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800795a:	4619      	mov	r1, r3
 800795c:	68f8      	ldr	r0, [r7, #12]
 800795e:	f000 fa89 	bl	8007e74 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8007962:	e081      	b.n	8007a68 <I2C_Slave_ISR_IT+0x1d6>
 8007964:	e080      	b.n	8007a68 <I2C_Slave_ISR_IT+0x1d6>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	089b      	lsrs	r3, r3, #2
 800796a:	f003 0301 	and.w	r3, r3, #1
 800796e:	2b00      	cmp	r3, #0
 8007970:	d034      	beq.n	80079dc <I2C_Slave_ISR_IT+0x14a>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	089b      	lsrs	r3, r3, #2
 8007976:	f003 0301 	and.w	r3, r3, #1
 800797a:	2b00      	cmp	r3, #0
 800797c:	d02e      	beq.n	80079dc <I2C_Slave_ISR_IT+0x14a>
  {
    if (hi2c->XferCount > 0U)
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007982:	b29b      	uxth	r3, r3
 8007984:	2b00      	cmp	r3, #0
 8007986:	d01c      	beq.n	80079c2 <I2C_Slave_ISR_IT+0x130>
    {
      /* Remove RXNE flag on temporary variable as read done */
      tmpITFlags &= ~I2C_FLAG_RXNE;
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	f023 0304 	bic.w	r3, r3, #4
 800798e:	617b      	str	r3, [r7, #20]

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800799a:	b2d2      	uxtb	r2, r2
 800799c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a2:	1c5a      	adds	r2, r3, #1
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079ac:	3b01      	subs	r3, #1
 80079ae:	b29a      	uxth	r2, r3
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	3b01      	subs	r3, #1
 80079bc:	b29a      	uxth	r2, r3
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d14f      	bne.n	8007a6c <I2C_Slave_ISR_IT+0x1da>
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80079d2:	d04b      	beq.n	8007a6c <I2C_Slave_ISR_IT+0x1da>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80079d4:	68f8      	ldr	r0, [r7, #12]
 80079d6:	f000 f8e5 	bl	8007ba4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80079da:	e047      	b.n	8007a6c <I2C_Slave_ISR_IT+0x1da>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	08db      	lsrs	r3, r3, #3
 80079e0:	f003 0301 	and.w	r3, r3, #1
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d00a      	beq.n	80079fe <I2C_Slave_ISR_IT+0x16c>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	08db      	lsrs	r3, r3, #3
 80079ec:	f003 0301 	and.w	r3, r3, #1
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d004      	beq.n	80079fe <I2C_Slave_ISR_IT+0x16c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80079f4:	6979      	ldr	r1, [r7, #20]
 80079f6:	68f8      	ldr	r0, [r7, #12]
 80079f8:	f000 f852 	bl	8007aa0 <I2C_ITAddrCplt>
 80079fc:	e037      	b.n	8007a6e <I2C_Slave_ISR_IT+0x1dc>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	085b      	lsrs	r3, r3, #1
 8007a02:	f003 0301 	and.w	r3, r3, #1
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d031      	beq.n	8007a6e <I2C_Slave_ISR_IT+0x1dc>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	085b      	lsrs	r3, r3, #1
 8007a0e:	f003 0301 	and.w	r3, r3, #1
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d02b      	beq.n	8007a6e <I2C_Slave_ISR_IT+0x1dc>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Datas have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a1a:	b29b      	uxth	r3, r3
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d018      	beq.n	8007a52 <I2C_Slave_ISR_IT+0x1c0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a24:	781a      	ldrb	r2, [r3, #0]
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a30:	1c5a      	adds	r2, r3, #1
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a3a:	b29b      	uxth	r3, r3
 8007a3c:	3b01      	subs	r3, #1
 8007a3e:	b29a      	uxth	r2, r3
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a48:	3b01      	subs	r3, #1
 8007a4a:	b29a      	uxth	r2, r3
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	851a      	strh	r2, [r3, #40]	; 0x28
 8007a50:	e00d      	b.n	8007a6e <I2C_Slave_ISR_IT+0x1dc>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007a58:	d002      	beq.n	8007a60 <I2C_Slave_ISR_IT+0x1ce>
 8007a5a:	693b      	ldr	r3, [r7, #16]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d106      	bne.n	8007a6e <I2C_Slave_ISR_IT+0x1dc>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007a60:	68f8      	ldr	r0, [r7, #12]
 8007a62:	f000 f89f 	bl	8007ba4 <I2C_ITSlaveSeqCplt>
 8007a66:	e002      	b.n	8007a6e <I2C_Slave_ISR_IT+0x1dc>
    if (hi2c->XferCount == 0U)
 8007a68:	bf00      	nop
 8007a6a:	e000      	b.n	8007a6e <I2C_Slave_ISR_IT+0x1dc>
    if ((hi2c->XferCount == 0U) && \
 8007a6c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	095b      	lsrs	r3, r3, #5
 8007a72:	f003 0301 	and.w	r3, r3, #1
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d009      	beq.n	8007a8e <I2C_Slave_ISR_IT+0x1fc>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	095b      	lsrs	r3, r3, #5
 8007a7e:	f003 0301 	and.w	r3, r3, #1
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d003      	beq.n	8007a8e <I2C_Slave_ISR_IT+0x1fc>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8007a86:	6979      	ldr	r1, [r7, #20]
 8007a88:	68f8      	ldr	r0, [r7, #12]
 8007a8a:	f000 f8c9 	bl	8007c20 <I2C_ITSlaveCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2200      	movs	r2, #0
 8007a92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007a96:	2300      	movs	r3, #0
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3718      	adds	r7, #24
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b084      	sub	sp, #16
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ab0:	b2db      	uxtb	r3, r3
 8007ab2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007ab6:	2b28      	cmp	r3, #40	; 0x28
 8007ab8:	d168      	bne.n	8007b8c <I2C_ITAddrCplt+0xec>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	699b      	ldr	r3, [r3, #24]
 8007ac0:	0c1b      	lsrs	r3, r3, #16
 8007ac2:	b2db      	uxtb	r3, r3
 8007ac4:	f003 0301 	and.w	r3, r3, #1
 8007ac8:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	699b      	ldr	r3, [r3, #24]
 8007ad0:	0c1b      	lsrs	r3, r3, #16
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8007ad8:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	689b      	ldr	r3, [r3, #8]
 8007ae0:	b29b      	uxth	r3, r3
 8007ae2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ae6:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	68db      	ldr	r3, [r3, #12]
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8007af4:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	68db      	ldr	r3, [r3, #12]
 8007afa:	2b02      	cmp	r3, #2
 8007afc:	d137      	bne.n	8007b6e <I2C_ITAddrCplt+0xce>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8007afe:	897b      	ldrh	r3, [r7, #10]
 8007b00:	09db      	lsrs	r3, r3, #7
 8007b02:	b29a      	uxth	r2, r3
 8007b04:	89bb      	ldrh	r3, [r7, #12]
 8007b06:	4053      	eors	r3, r2
 8007b08:	b29b      	uxth	r3, r3
 8007b0a:	f003 0306 	and.w	r3, r3, #6
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d11c      	bne.n	8007b4c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8007b12:	897b      	ldrh	r3, [r7, #10]
 8007b14:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b1a:	1c5a      	adds	r2, r3, #1
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b24:	2b02      	cmp	r3, #2
 8007b26:	d139      	bne.n	8007b9c <I2C_ITAddrCplt+0xfc>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	2208      	movs	r2, #8
 8007b34:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007b3e:	89ba      	ldrh	r2, [r7, #12]
 8007b40:	7bfb      	ldrb	r3, [r7, #15]
 8007b42:	4619      	mov	r1, r3
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f7ff fe78 	bl	800783a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007b4a:	e027      	b.n	8007b9c <I2C_ITAddrCplt+0xfc>
        slaveaddrcode = ownadd2code;
 8007b4c:	893b      	ldrh	r3, [r7, #8]
 8007b4e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007b50:	2104      	movs	r1, #4
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f000 fbe6 	bl	8008324 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007b60:	89ba      	ldrh	r2, [r7, #12]
 8007b62:	7bfb      	ldrb	r3, [r7, #15]
 8007b64:	4619      	mov	r1, r3
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f7ff fe67 	bl	800783a <HAL_I2C_AddrCallback>
}
 8007b6c:	e016      	b.n	8007b9c <I2C_ITAddrCplt+0xfc>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007b6e:	2104      	movs	r1, #4
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f000 fbd7 	bl	8008324 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007b7e:	89ba      	ldrh	r2, [r7, #12]
 8007b80:	7bfb      	ldrb	r3, [r7, #15]
 8007b82:	4619      	mov	r1, r3
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f7ff fe58 	bl	800783a <HAL_I2C_AddrCallback>
}
 8007b8a:	e007      	b.n	8007b9c <I2C_ITAddrCplt+0xfc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	2208      	movs	r2, #8
 8007b92:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2200      	movs	r2, #0
 8007b98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8007b9c:	bf00      	nop
 8007b9e:	3710      	adds	r7, #16
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}

08007ba4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b082      	sub	sp, #8
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007bba:	b2db      	uxtb	r3, r3
 8007bbc:	2b29      	cmp	r3, #41	; 0x29
 8007bbe:	d112      	bne.n	8007be6 <I2C_ITSlaveSeqCplt+0x42>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2228      	movs	r2, #40	; 0x28
 8007bc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2221      	movs	r2, #33	; 0x21
 8007bcc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007bce:	2101      	movs	r1, #1
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f000 fba7 	bl	8008324 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f7ff fe17 	bl	8007812 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007be4:	e017      	b.n	8007c16 <I2C_ITSlaveSeqCplt+0x72>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007bec:	b2db      	uxtb	r3, r3
 8007bee:	2b2a      	cmp	r3, #42	; 0x2a
 8007bf0:	d111      	bne.n	8007c16 <I2C_ITSlaveSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2228      	movs	r2, #40	; 0x28
 8007bf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2222      	movs	r2, #34	; 0x22
 8007bfe:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007c00:	2102      	movs	r1, #2
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f000 fb8e 	bl	8008324 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f7ff fe08 	bl	8007826 <HAL_I2C_SlaveRxCpltCallback>
}
 8007c16:	bf00      	nop
 8007c18:	3708      	adds	r7, #8
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}
	...

08007c20 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b084      	sub	sp, #16
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	60bb      	str	r3, [r7, #8]
  uint32_t tmpITFlags = ITFlags;
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	60fb      	str	r3, [r7, #12]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	2220      	movs	r2, #32
 8007c3c:	61da      	str	r2, [r3, #28]

  /* Disable all interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8007c3e:	2107      	movs	r1, #7
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f000 fb6f 	bl	8008324 <I2C_Disable_IRQ>

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	685a      	ldr	r2, [r3, #4]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007c54:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	6859      	ldr	r1, [r3, #4]
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681a      	ldr	r2, [r3, #0]
 8007c60:	4b58      	ldr	r3, [pc, #352]	; (8007dc4 <I2C_ITSlaveCplt+0x1a4>)
 8007c62:	400b      	ands	r3, r1
 8007c64:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f000 f9c4 	bl	8007ff4 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	0b9b      	lsrs	r3, r3, #14
 8007c70:	f003 0301 	and.w	r3, r3, #1
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d00b      	beq.n	8007c90 <I2C_ITSlaveCplt+0x70>
  {
    if (hi2c->hdmatx != NULL)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d018      	beq.n	8007cb2 <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	b29a      	uxth	r2, r3
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007c8e:	e010      	b.n	8007cb2 <I2C_ITSlaveCplt+0x92>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	0bdb      	lsrs	r3, r3, #15
 8007c94:	f003 0301 	and.w	r3, r3, #1
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d00a      	beq.n	8007cb2 <I2C_ITSlaveCplt+0x92>
  {
    if (hi2c->hdmarx != NULL)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d006      	beq.n	8007cb2 <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	b29a      	uxth	r2, r3
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	089b      	lsrs	r3, r3, #2
 8007cb6:	f003 0301 	and.w	r3, r3, #1
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d020      	beq.n	8007d00 <I2C_ITSlaveCplt+0xe0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	f023 0304 	bic.w	r3, r3, #4
 8007cc4:	60fb      	str	r3, [r7, #12]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd0:	b2d2      	uxtb	r2, r2
 8007cd2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd8:	1c5a      	adds	r2, r3, #1
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d00c      	beq.n	8007d00 <I2C_ITSlaveCplt+0xe0>
    {
      hi2c->XferSize--;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cea:	3b01      	subs	r3, #1
 8007cec:	b29a      	uxth	r2, r3
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cf6:	b29b      	uxth	r3, r3
 8007cf8:	3b01      	subs	r3, #1
 8007cfa:	b29a      	uxth	r2, r3
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d04:	b29b      	uxth	r3, r3
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d005      	beq.n	8007d16 <I2C_ITSlaveCplt+0xf6>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d0e:	f043 0204 	orr.w	r2, r3, #4
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->PreviousState = I2C_STATE_NONE;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2200      	movs	r2, #0
 8007d28:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d010      	beq.n	8007d54 <I2C_ITSlaveCplt+0x134>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d36:	4619      	mov	r1, r3
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f000 f89b 	bl	8007e74 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d44:	b2db      	uxtb	r3, r3
 8007d46:	2b28      	cmp	r3, #40	; 0x28
 8007d48:	d138      	bne.n	8007dbc <I2C_ITSlaveCplt+0x19c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8007d4a:	68f9      	ldr	r1, [r7, #12]
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f000 f83d 	bl	8007dcc <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007d52:	e033      	b.n	8007dbc <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d58:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007d5c:	d011      	beq.n	8007d82 <I2C_ITSlaveCplt+0x162>
    I2C_ITSlaveSeqCplt(hi2c);
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f7ff ff20 	bl	8007ba4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	4a18      	ldr	r2, [pc, #96]	; (8007dc8 <I2C_ITSlaveCplt+0x1a8>)
 8007d68:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2220      	movs	r2, #32
 8007d6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2200      	movs	r2, #0
 8007d76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f7ff fd6b 	bl	8007856 <HAL_I2C_ListenCpltCallback>
}
 8007d80:	e01c      	b.n	8007dbc <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d88:	b2db      	uxtb	r3, r3
 8007d8a:	2b22      	cmp	r3, #34	; 0x22
 8007d8c:	d10b      	bne.n	8007da6 <I2C_ITSlaveCplt+0x186>
    hi2c->State = HAL_I2C_STATE_READY;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2220      	movs	r2, #32
 8007d92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f7ff fd41 	bl	8007826 <HAL_I2C_SlaveRxCpltCallback>
}
 8007da4:	e00a      	b.n	8007dbc <I2C_ITSlaveCplt+0x19c>
    hi2c->State = HAL_I2C_STATE_READY;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2220      	movs	r2, #32
 8007daa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2200      	movs	r2, #0
 8007db2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f7ff fd2b 	bl	8007812 <HAL_I2C_SlaveTxCpltCallback>
}
 8007dbc:	bf00      	nop
 8007dbe:	3710      	adds	r7, #16
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}
 8007dc4:	fe00e800 	.word	0xfe00e800
 8007dc8:	ffff0000 	.word	0xffff0000

08007dcc <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b082      	sub	sp, #8
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
 8007dd4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	4a25      	ldr	r2, [pc, #148]	; (8007e70 <I2C_ITListenCplt+0xa4>)
 8007dda:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2200      	movs	r2, #0
 8007de0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2220      	movs	r2, #32
 8007de6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2200      	movs	r2, #0
 8007dee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2200      	movs	r2, #0
 8007df6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	089b      	lsrs	r3, r3, #2
 8007dfc:	f003 0301 	and.w	r3, r3, #1
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d022      	beq.n	8007e4a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e0e:	b2d2      	uxtb	r2, r2
 8007e10:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e16:	1c5a      	adds	r2, r3, #1
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d012      	beq.n	8007e4a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e28:	3b01      	subs	r3, #1
 8007e2a:	b29a      	uxth	r2, r3
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e34:	b29b      	uxth	r3, r3
 8007e36:	3b01      	subs	r3, #1
 8007e38:	b29a      	uxth	r2, r3
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e42:	f043 0204 	orr.w	r2, r3, #4
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007e4a:	2107      	movs	r1, #7
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f000 fa69 	bl	8008324 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	2210      	movs	r2, #16
 8007e58:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f7ff fcf7 	bl	8007856 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8007e68:	bf00      	nop
 8007e6a:	3708      	adds	r7, #8
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}
 8007e70:	ffff0000 	.word	0xffff0000

08007e74 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b084      	sub	sp, #16
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e84:	73fb      	strb	r3, [r7, #15]

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	4a55      	ldr	r2, [pc, #340]	; (8007fe8 <I2C_ITError+0x174>)
 8007e92:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2200      	movs	r2, #0
 8007e98:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	431a      	orrs	r2, r3
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8007ea6:	7bfb      	ldrb	r3, [r7, #15]
 8007ea8:	2b28      	cmp	r3, #40	; 0x28
 8007eaa:	d005      	beq.n	8007eb8 <I2C_ITError+0x44>
 8007eac:	7bfb      	ldrb	r3, [r7, #15]
 8007eae:	2b29      	cmp	r3, #41	; 0x29
 8007eb0:	d002      	beq.n	8007eb8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8007eb2:	7bfb      	ldrb	r3, [r7, #15]
 8007eb4:	2b2a      	cmp	r3, #42	; 0x2a
 8007eb6:	d10e      	bne.n	8007ed6 <I2C_ITError+0x62>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007eb8:	2103      	movs	r1, #3
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f000 fa32 	bl	8008324 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2228      	movs	r2, #40	; 0x28
 8007ec4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	4a46      	ldr	r2, [pc, #280]	; (8007fec <I2C_ITError+0x178>)
 8007ed2:	635a      	str	r2, [r3, #52]	; 0x34
 8007ed4:	e013      	b.n	8007efe <I2C_ITError+0x8a>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007ed6:	2107      	movs	r1, #7
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f000 fa23 	bl	8008324 <I2C_Disable_IRQ>

    /* If state is an abort treatment on goind, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ee4:	b2db      	uxtb	r3, r3
 8007ee6:	2b60      	cmp	r3, #96	; 0x60
 8007ee8:	d003      	beq.n	8007ef2 <I2C_ITError+0x7e>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2220      	movs	r2, #32
 8007eee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2200      	movs	r2, #0
 8007efc:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f0c:	d123      	bne.n	8007f56 <I2C_ITError+0xe2>
  {
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	681a      	ldr	r2, [r3, #0]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007f1c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d05c      	beq.n	8007fe0 <I2C_ITError+0x16c>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f2a:	4a31      	ldr	r2, [pc, #196]	; (8007ff0 <I2C_ITError+0x17c>)
 8007f2c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2200      	movs	r2, #0
 8007f32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f7fe fdea 	bl	8006b14 <HAL_DMA_Abort_IT>
 8007f40:	4603      	mov	r3, r0
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d04c      	beq.n	8007fe0 <I2C_ITError+0x16c>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f4c:	687a      	ldr	r2, [r7, #4]
 8007f4e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007f50:	4610      	mov	r0, r2
 8007f52:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007f54:	e044      	b.n	8007fe0 <I2C_ITError+0x16c>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f64:	d123      	bne.n	8007fae <I2C_ITError+0x13a>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	681a      	ldr	r2, [r3, #0]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007f74:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d030      	beq.n	8007fe0 <I2C_ITError+0x16c>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f82:	4a1b      	ldr	r2, [pc, #108]	; (8007ff0 <I2C_ITError+0x17c>)
 8007f84:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f92:	4618      	mov	r0, r3
 8007f94:	f7fe fdbe 	bl	8006b14 <HAL_DMA_Abort_IT>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d020      	beq.n	8007fe0 <I2C_ITError+0x16c>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fa4:	687a      	ldr	r2, [r7, #4]
 8007fa6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007fa8:	4610      	mov	r0, r2
 8007faa:	4798      	blx	r3
}
 8007fac:	e018      	b.n	8007fe0 <I2C_ITError+0x16c>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007fb4:	b2db      	uxtb	r3, r3
 8007fb6:	2b60      	cmp	r3, #96	; 0x60
 8007fb8:	d10b      	bne.n	8007fd2 <I2C_ITError+0x15e>
    hi2c->State = HAL_I2C_STATE_READY;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2220      	movs	r2, #32
 8007fbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f7ff fc57 	bl	800787e <HAL_I2C_AbortCpltCallback>
}
 8007fd0:	e006      	b.n	8007fe0 <I2C_ITError+0x16c>
    __HAL_UNLOCK(hi2c);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f7ff fc45 	bl	800786a <HAL_I2C_ErrorCallback>
}
 8007fe0:	bf00      	nop
 8007fe2:	3710      	adds	r7, #16
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}
 8007fe8:	ffff0000 	.word	0xffff0000
 8007fec:	08007893 	.word	0x08007893
 8007ff0:	0800803d 	.word	0x0800803d

08007ff4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b083      	sub	sp, #12
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	699b      	ldr	r3, [r3, #24]
 8008002:	f003 0302 	and.w	r3, r3, #2
 8008006:	2b02      	cmp	r3, #2
 8008008:	d103      	bne.n	8008012 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	2200      	movs	r2, #0
 8008010:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	699b      	ldr	r3, [r3, #24]
 8008018:	f003 0301 	and.w	r3, r3, #1
 800801c:	2b01      	cmp	r3, #1
 800801e:	d007      	beq.n	8008030 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	699a      	ldr	r2, [r3, #24]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f042 0201 	orr.w	r2, r2, #1
 800802e:	619a      	str	r2, [r3, #24]
  }
}
 8008030:	bf00      	nop
 8008032:	370c      	adds	r7, #12
 8008034:	46bd      	mov	sp, r7
 8008036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803a:	4770      	bx	lr

0800803c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b084      	sub	sp, #16
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008048:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800804e:	2200      	movs	r2, #0
 8008050:	651a      	str	r2, [r3, #80]	; 0x50
  hi2c->hdmarx->XferAbortCallback = NULL;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008056:	2200      	movs	r2, #0
 8008058:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008060:	b2db      	uxtb	r3, r3
 8008062:	2b60      	cmp	r3, #96	; 0x60
 8008064:	d107      	bne.n	8008076 <I2C_DMAAbort+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	2220      	movs	r2, #32
 800806a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800806e:	68f8      	ldr	r0, [r7, #12]
 8008070:	f7ff fc05 	bl	800787e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008074:	e002      	b.n	800807c <I2C_DMAAbort+0x40>
    HAL_I2C_ErrorCallback(hi2c);
 8008076:	68f8      	ldr	r0, [r7, #12]
 8008078:	f7ff fbf7 	bl	800786a <HAL_I2C_ErrorCallback>
}
 800807c:	bf00      	nop
 800807e:	3710      	adds	r7, #16
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}

08008084 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b084      	sub	sp, #16
 8008088:	af00      	add	r7, sp, #0
 800808a:	60f8      	str	r0, [r7, #12]
 800808c:	60b9      	str	r1, [r7, #8]
 800808e:	603b      	str	r3, [r7, #0]
 8008090:	4613      	mov	r3, r2
 8008092:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008094:	e022      	b.n	80080dc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800809c:	d01e      	beq.n	80080dc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800809e:	f7fd fd8f 	bl	8005bc0 <HAL_GetTick>
 80080a2:	4602      	mov	r2, r0
 80080a4:	69bb      	ldr	r3, [r7, #24]
 80080a6:	1ad3      	subs	r3, r2, r3
 80080a8:	683a      	ldr	r2, [r7, #0]
 80080aa:	429a      	cmp	r2, r3
 80080ac:	d302      	bcc.n	80080b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d113      	bne.n	80080dc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080b8:	f043 0220 	orr.w	r2, r3, #32
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	2220      	movs	r2, #32
 80080c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	2200      	movs	r2, #0
 80080cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	2200      	movs	r2, #0
 80080d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80080d8:	2301      	movs	r3, #1
 80080da:	e00f      	b.n	80080fc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	699a      	ldr	r2, [r3, #24]
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	4013      	ands	r3, r2
 80080e6:	68ba      	ldr	r2, [r7, #8]
 80080e8:	429a      	cmp	r2, r3
 80080ea:	bf0c      	ite	eq
 80080ec:	2301      	moveq	r3, #1
 80080ee:	2300      	movne	r3, #0
 80080f0:	b2db      	uxtb	r3, r3
 80080f2:	461a      	mov	r2, r3
 80080f4:	79fb      	ldrb	r3, [r7, #7]
 80080f6:	429a      	cmp	r2, r3
 80080f8:	d0cd      	beq.n	8008096 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80080fa:	2300      	movs	r3, #0
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3710      	adds	r7, #16
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}

08008104 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b084      	sub	sp, #16
 8008108:	af00      	add	r7, sp, #0
 800810a:	60f8      	str	r0, [r7, #12]
 800810c:	60b9      	str	r1, [r7, #8]
 800810e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008110:	e02c      	b.n	800816c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8008112:	687a      	ldr	r2, [r7, #4]
 8008114:	68b9      	ldr	r1, [r7, #8]
 8008116:	68f8      	ldr	r0, [r7, #12]
 8008118:	f000 f870 	bl	80081fc <I2C_IsAcknowledgeFailed>
 800811c:	4603      	mov	r3, r0
 800811e:	2b00      	cmp	r3, #0
 8008120:	d001      	beq.n	8008126 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008122:	2301      	movs	r3, #1
 8008124:	e02a      	b.n	800817c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800812c:	d01e      	beq.n	800816c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800812e:	f7fd fd47 	bl	8005bc0 <HAL_GetTick>
 8008132:	4602      	mov	r2, r0
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	1ad3      	subs	r3, r2, r3
 8008138:	68ba      	ldr	r2, [r7, #8]
 800813a:	429a      	cmp	r2, r3
 800813c:	d302      	bcc.n	8008144 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d113      	bne.n	800816c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008148:	f043 0220 	orr.w	r2, r3, #32
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	2220      	movs	r2, #32
 8008154:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	2200      	movs	r2, #0
 800815c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	2200      	movs	r2, #0
 8008164:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008168:	2301      	movs	r3, #1
 800816a:	e007      	b.n	800817c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	699b      	ldr	r3, [r3, #24]
 8008172:	f003 0302 	and.w	r3, r3, #2
 8008176:	2b02      	cmp	r3, #2
 8008178:	d1cb      	bne.n	8008112 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800817a:	2300      	movs	r3, #0
}
 800817c:	4618      	mov	r0, r3
 800817e:	3710      	adds	r7, #16
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}

08008184 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b084      	sub	sp, #16
 8008188:	af00      	add	r7, sp, #0
 800818a:	60f8      	str	r0, [r7, #12]
 800818c:	60b9      	str	r1, [r7, #8]
 800818e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008190:	e028      	b.n	80081e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8008192:	687a      	ldr	r2, [r7, #4]
 8008194:	68b9      	ldr	r1, [r7, #8]
 8008196:	68f8      	ldr	r0, [r7, #12]
 8008198:	f000 f830 	bl	80081fc <I2C_IsAcknowledgeFailed>
 800819c:	4603      	mov	r3, r0
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d001      	beq.n	80081a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80081a2:	2301      	movs	r3, #1
 80081a4:	e026      	b.n	80081f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081a6:	f7fd fd0b 	bl	8005bc0 <HAL_GetTick>
 80081aa:	4602      	mov	r2, r0
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	1ad3      	subs	r3, r2, r3
 80081b0:	68ba      	ldr	r2, [r7, #8]
 80081b2:	429a      	cmp	r2, r3
 80081b4:	d302      	bcc.n	80081bc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d113      	bne.n	80081e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081c0:	f043 0220 	orr.w	r2, r3, #32
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	2220      	movs	r2, #32
 80081cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	2200      	movs	r2, #0
 80081d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2200      	movs	r2, #0
 80081dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80081e0:	2301      	movs	r3, #1
 80081e2:	e007      	b.n	80081f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	699b      	ldr	r3, [r3, #24]
 80081ea:	f003 0320 	and.w	r3, r3, #32
 80081ee:	2b20      	cmp	r3, #32
 80081f0:	d1cf      	bne.n	8008192 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80081f2:	2300      	movs	r3, #0
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3710      	adds	r7, #16
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b084      	sub	sp, #16
 8008200:	af00      	add	r7, sp, #0
 8008202:	60f8      	str	r0, [r7, #12]
 8008204:	60b9      	str	r1, [r7, #8]
 8008206:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	699b      	ldr	r3, [r3, #24]
 800820e:	f003 0310 	and.w	r3, r3, #16
 8008212:	2b10      	cmp	r3, #16
 8008214:	d151      	bne.n	80082ba <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008216:	e022      	b.n	800825e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800821e:	d01e      	beq.n	800825e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008220:	f7fd fcce 	bl	8005bc0 <HAL_GetTick>
 8008224:	4602      	mov	r2, r0
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	1ad3      	subs	r3, r2, r3
 800822a:	68ba      	ldr	r2, [r7, #8]
 800822c:	429a      	cmp	r2, r3
 800822e:	d302      	bcc.n	8008236 <I2C_IsAcknowledgeFailed+0x3a>
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d113      	bne.n	800825e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800823a:	f043 0220 	orr.w	r2, r3, #32
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	2220      	movs	r2, #32
 8008246:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	2200      	movs	r2, #0
 800824e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	2200      	movs	r2, #0
 8008256:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800825a:	2301      	movs	r3, #1
 800825c:	e02e      	b.n	80082bc <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	699b      	ldr	r3, [r3, #24]
 8008264:	f003 0320 	and.w	r3, r3, #32
 8008268:	2b20      	cmp	r3, #32
 800826a:	d1d5      	bne.n	8008218 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	2210      	movs	r2, #16
 8008272:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	2220      	movs	r2, #32
 800827a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800827c:	68f8      	ldr	r0, [r7, #12]
 800827e:	f7ff feb9 	bl	8007ff4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	6859      	ldr	r1, [r3, #4]
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681a      	ldr	r2, [r3, #0]
 800828c:	4b0d      	ldr	r3, [pc, #52]	; (80082c4 <I2C_IsAcknowledgeFailed+0xc8>)
 800828e:	400b      	ands	r3, r1
 8008290:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008296:	f043 0204 	orr.w	r2, r3, #4
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	2220      	movs	r2, #32
 80082a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	2200      	movs	r2, #0
 80082aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	2200      	movs	r2, #0
 80082b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80082b6:	2301      	movs	r3, #1
 80082b8:	e000      	b.n	80082bc <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80082ba:	2300      	movs	r3, #0
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3710      	adds	r7, #16
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}
 80082c4:	fe00e800 	.word	0xfe00e800

080082c8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b085      	sub	sp, #20
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	60f8      	str	r0, [r7, #12]
 80082d0:	607b      	str	r3, [r7, #4]
 80082d2:	460b      	mov	r3, r1
 80082d4:	817b      	strh	r3, [r7, #10]
 80082d6:	4613      	mov	r3, r2
 80082d8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	685a      	ldr	r2, [r3, #4]
 80082e0:	69bb      	ldr	r3, [r7, #24]
 80082e2:	0d5b      	lsrs	r3, r3, #21
 80082e4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80082e8:	4b0d      	ldr	r3, [pc, #52]	; (8008320 <I2C_TransferConfig+0x58>)
 80082ea:	430b      	orrs	r3, r1
 80082ec:	43db      	mvns	r3, r3
 80082ee:	ea02 0103 	and.w	r1, r2, r3
 80082f2:	897b      	ldrh	r3, [r7, #10]
 80082f4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80082f8:	7a7b      	ldrb	r3, [r7, #9]
 80082fa:	041b      	lsls	r3, r3, #16
 80082fc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008300:	431a      	orrs	r2, r3
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	431a      	orrs	r2, r3
 8008306:	69bb      	ldr	r3, [r7, #24]
 8008308:	431a      	orrs	r2, r3
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	430a      	orrs	r2, r1
 8008310:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8008312:	bf00      	nop
 8008314:	3714      	adds	r7, #20
 8008316:	46bd      	mov	sp, r7
 8008318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831c:	4770      	bx	lr
 800831e:	bf00      	nop
 8008320:	03ff63ff 	.word	0x03ff63ff

08008324 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8008324:	b480      	push	{r7}
 8008326:	b085      	sub	sp, #20
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
 800832c:	460b      	mov	r3, r1
 800832e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8008330:	2300      	movs	r3, #0
 8008332:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008334:	887b      	ldrh	r3, [r7, #2]
 8008336:	f003 0301 	and.w	r3, r3, #1
 800833a:	2b00      	cmp	r3, #0
 800833c:	d00f      	beq.n	800835e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8008344:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800834c:	b2db      	uxtb	r3, r3
 800834e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008352:	2b28      	cmp	r3, #40	; 0x28
 8008354:	d003      	beq.n	800835e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800835c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800835e:	887b      	ldrh	r3, [r7, #2]
 8008360:	f003 0302 	and.w	r3, r3, #2
 8008364:	2b00      	cmp	r3, #0
 8008366:	d00f      	beq.n	8008388 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800836e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008376:	b2db      	uxtb	r3, r3
 8008378:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800837c:	2b28      	cmp	r3, #40	; 0x28
 800837e:	d003      	beq.n	8008388 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8008386:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008388:	887b      	ldrh	r3, [r7, #2]
 800838a:	f003 0304 	and.w	r3, r3, #4
 800838e:	2b00      	cmp	r3, #0
 8008390:	d003      	beq.n	800839a <I2C_Disable_IRQ+0x76>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8008398:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 800839a:	887b      	ldrh	r3, [r7, #2]
 800839c:	f003 0311 	and.w	r3, r3, #17
 80083a0:	2b11      	cmp	r3, #17
 80083a2:	d103      	bne.n	80083ac <I2C_Disable_IRQ+0x88>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80083aa:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 80083ac:	887b      	ldrh	r3, [r7, #2]
 80083ae:	f003 0312 	and.w	r3, r3, #18
 80083b2:	2b12      	cmp	r3, #18
 80083b4:	d103      	bne.n	80083be <I2C_Disable_IRQ+0x9a>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	f043 0320 	orr.w	r3, r3, #32
 80083bc:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 80083be:	887b      	ldrh	r3, [r7, #2]
 80083c0:	f003 0312 	and.w	r3, r3, #18
 80083c4:	2b12      	cmp	r3, #18
 80083c6:	d103      	bne.n	80083d0 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083ce:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	6819      	ldr	r1, [r3, #0]
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	43da      	mvns	r2, r3
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	400a      	ands	r2, r1
 80083e0:	601a      	str	r2, [r3, #0]
}
 80083e2:	bf00      	nop
 80083e4:	3714      	adds	r7, #20
 80083e6:	46bd      	mov	sp, r7
 80083e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ec:	4770      	bx	lr

080083ee <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80083ee:	b480      	push	{r7}
 80083f0:	b083      	sub	sp, #12
 80083f2:	af00      	add	r7, sp, #0
 80083f4:	6078      	str	r0, [r7, #4]
 80083f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80083fe:	b2db      	uxtb	r3, r3
 8008400:	2b20      	cmp	r3, #32
 8008402:	d138      	bne.n	8008476 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800840a:	2b01      	cmp	r3, #1
 800840c:	d101      	bne.n	8008412 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800840e:	2302      	movs	r3, #2
 8008410:	e032      	b.n	8008478 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2201      	movs	r2, #1
 8008416:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2224      	movs	r2, #36	; 0x24
 800841e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	681a      	ldr	r2, [r3, #0]
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f022 0201 	bic.w	r2, r2, #1
 8008430:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	681a      	ldr	r2, [r3, #0]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008440:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	6819      	ldr	r1, [r3, #0]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	683a      	ldr	r2, [r7, #0]
 800844e:	430a      	orrs	r2, r1
 8008450:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	681a      	ldr	r2, [r3, #0]
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f042 0201 	orr.w	r2, r2, #1
 8008460:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2220      	movs	r2, #32
 8008466:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2200      	movs	r2, #0
 800846e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008472:	2300      	movs	r3, #0
 8008474:	e000      	b.n	8008478 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008476:	2302      	movs	r3, #2
  }
}
 8008478:	4618      	mov	r0, r3
 800847a:	370c      	adds	r7, #12
 800847c:	46bd      	mov	sp, r7
 800847e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008482:	4770      	bx	lr

08008484 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008484:	b480      	push	{r7}
 8008486:	b085      	sub	sp, #20
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008494:	b2db      	uxtb	r3, r3
 8008496:	2b20      	cmp	r3, #32
 8008498:	d139      	bne.n	800850e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80084a0:	2b01      	cmp	r3, #1
 80084a2:	d101      	bne.n	80084a8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80084a4:	2302      	movs	r3, #2
 80084a6:	e033      	b.n	8008510 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2201      	movs	r2, #1
 80084ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2224      	movs	r2, #36	; 0x24
 80084b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	681a      	ldr	r2, [r3, #0]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f022 0201 	bic.w	r2, r2, #1
 80084c6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80084d6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	021b      	lsls	r3, r3, #8
 80084dc:	68fa      	ldr	r2, [r7, #12]
 80084de:	4313      	orrs	r3, r2
 80084e0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	68fa      	ldr	r2, [r7, #12]
 80084e8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	681a      	ldr	r2, [r3, #0]
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f042 0201 	orr.w	r2, r2, #1
 80084f8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2220      	movs	r2, #32
 80084fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2200      	movs	r2, #0
 8008506:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800850a:	2300      	movs	r3, #0
 800850c:	e000      	b.n	8008510 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800850e:	2302      	movs	r3, #2
  }
}
 8008510:	4618      	mov	r0, r3
 8008512:	3714      	adds	r7, #20
 8008514:	46bd      	mov	sp, r7
 8008516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851a:	4770      	bx	lr

0800851c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b082      	sub	sp, #8
 8008520:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8008522:	2300      	movs	r3, #0
 8008524:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8008526:	4b23      	ldr	r3, [pc, #140]	; (80085b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8008528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800852a:	4a22      	ldr	r2, [pc, #136]	; (80085b4 <HAL_PWREx_EnableOverDrive+0x98>)
 800852c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008530:	6413      	str	r3, [r2, #64]	; 0x40
 8008532:	4b20      	ldr	r3, [pc, #128]	; (80085b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8008534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800853a:	603b      	str	r3, [r7, #0]
 800853c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800853e:	4b1e      	ldr	r3, [pc, #120]	; (80085b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4a1d      	ldr	r2, [pc, #116]	; (80085b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008544:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008548:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800854a:	f7fd fb39 	bl	8005bc0 <HAL_GetTick>
 800854e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008550:	e009      	b.n	8008566 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008552:	f7fd fb35 	bl	8005bc0 <HAL_GetTick>
 8008556:	4602      	mov	r2, r0
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	1ad3      	subs	r3, r2, r3
 800855c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008560:	d901      	bls.n	8008566 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8008562:	2303      	movs	r3, #3
 8008564:	e022      	b.n	80085ac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008566:	4b14      	ldr	r3, [pc, #80]	; (80085b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008568:	685b      	ldr	r3, [r3, #4]
 800856a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800856e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008572:	d1ee      	bne.n	8008552 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008574:	4b10      	ldr	r3, [pc, #64]	; (80085b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	4a0f      	ldr	r2, [pc, #60]	; (80085b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800857a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800857e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008580:	f7fd fb1e 	bl	8005bc0 <HAL_GetTick>
 8008584:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008586:	e009      	b.n	800859c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008588:	f7fd fb1a 	bl	8005bc0 <HAL_GetTick>
 800858c:	4602      	mov	r2, r0
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	1ad3      	subs	r3, r2, r3
 8008592:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008596:	d901      	bls.n	800859c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8008598:	2303      	movs	r3, #3
 800859a:	e007      	b.n	80085ac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800859c:	4b06      	ldr	r3, [pc, #24]	; (80085b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800859e:	685b      	ldr	r3, [r3, #4]
 80085a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80085a8:	d1ee      	bne.n	8008588 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80085aa:	2300      	movs	r3, #0
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3708      	adds	r7, #8
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}
 80085b4:	40023800 	.word	0x40023800
 80085b8:	40007000 	.word	0x40007000

080085bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b086      	sub	sp, #24
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 80085c4:	2300      	movs	r3, #0
 80085c6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d101      	bne.n	80085d2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80085ce:	2301      	movs	r3, #1
 80085d0:	e25c      	b.n	8008a8c <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f003 0301 	and.w	r3, r3, #1
 80085da:	2b00      	cmp	r3, #0
 80085dc:	f000 8087 	beq.w	80086ee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80085e0:	4b96      	ldr	r3, [pc, #600]	; (800883c <HAL_RCC_OscConfig+0x280>)
 80085e2:	689b      	ldr	r3, [r3, #8]
 80085e4:	f003 030c 	and.w	r3, r3, #12
 80085e8:	2b04      	cmp	r3, #4
 80085ea:	d00c      	beq.n	8008606 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80085ec:	4b93      	ldr	r3, [pc, #588]	; (800883c <HAL_RCC_OscConfig+0x280>)
 80085ee:	689b      	ldr	r3, [r3, #8]
 80085f0:	f003 030c 	and.w	r3, r3, #12
 80085f4:	2b08      	cmp	r3, #8
 80085f6:	d112      	bne.n	800861e <HAL_RCC_OscConfig+0x62>
 80085f8:	4b90      	ldr	r3, [pc, #576]	; (800883c <HAL_RCC_OscConfig+0x280>)
 80085fa:	685b      	ldr	r3, [r3, #4]
 80085fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008600:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008604:	d10b      	bne.n	800861e <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008606:	4b8d      	ldr	r3, [pc, #564]	; (800883c <HAL_RCC_OscConfig+0x280>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800860e:	2b00      	cmp	r3, #0
 8008610:	d06c      	beq.n	80086ec <HAL_RCC_OscConfig+0x130>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d168      	bne.n	80086ec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800861a:	2301      	movs	r3, #1
 800861c:	e236      	b.n	8008a8c <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	685b      	ldr	r3, [r3, #4]
 8008622:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008626:	d106      	bne.n	8008636 <HAL_RCC_OscConfig+0x7a>
 8008628:	4b84      	ldr	r3, [pc, #528]	; (800883c <HAL_RCC_OscConfig+0x280>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	4a83      	ldr	r2, [pc, #524]	; (800883c <HAL_RCC_OscConfig+0x280>)
 800862e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008632:	6013      	str	r3, [r2, #0]
 8008634:	e02e      	b.n	8008694 <HAL_RCC_OscConfig+0xd8>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d10c      	bne.n	8008658 <HAL_RCC_OscConfig+0x9c>
 800863e:	4b7f      	ldr	r3, [pc, #508]	; (800883c <HAL_RCC_OscConfig+0x280>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	4a7e      	ldr	r2, [pc, #504]	; (800883c <HAL_RCC_OscConfig+0x280>)
 8008644:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008648:	6013      	str	r3, [r2, #0]
 800864a:	4b7c      	ldr	r3, [pc, #496]	; (800883c <HAL_RCC_OscConfig+0x280>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	4a7b      	ldr	r2, [pc, #492]	; (800883c <HAL_RCC_OscConfig+0x280>)
 8008650:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008654:	6013      	str	r3, [r2, #0]
 8008656:	e01d      	b.n	8008694 <HAL_RCC_OscConfig+0xd8>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	685b      	ldr	r3, [r3, #4]
 800865c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008660:	d10c      	bne.n	800867c <HAL_RCC_OscConfig+0xc0>
 8008662:	4b76      	ldr	r3, [pc, #472]	; (800883c <HAL_RCC_OscConfig+0x280>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4a75      	ldr	r2, [pc, #468]	; (800883c <HAL_RCC_OscConfig+0x280>)
 8008668:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800866c:	6013      	str	r3, [r2, #0]
 800866e:	4b73      	ldr	r3, [pc, #460]	; (800883c <HAL_RCC_OscConfig+0x280>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4a72      	ldr	r2, [pc, #456]	; (800883c <HAL_RCC_OscConfig+0x280>)
 8008674:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008678:	6013      	str	r3, [r2, #0]
 800867a:	e00b      	b.n	8008694 <HAL_RCC_OscConfig+0xd8>
 800867c:	4b6f      	ldr	r3, [pc, #444]	; (800883c <HAL_RCC_OscConfig+0x280>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4a6e      	ldr	r2, [pc, #440]	; (800883c <HAL_RCC_OscConfig+0x280>)
 8008682:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008686:	6013      	str	r3, [r2, #0]
 8008688:	4b6c      	ldr	r3, [pc, #432]	; (800883c <HAL_RCC_OscConfig+0x280>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a6b      	ldr	r2, [pc, #428]	; (800883c <HAL_RCC_OscConfig+0x280>)
 800868e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008692:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d013      	beq.n	80086c4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800869c:	f7fd fa90 	bl	8005bc0 <HAL_GetTick>
 80086a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80086a2:	e008      	b.n	80086b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80086a4:	f7fd fa8c 	bl	8005bc0 <HAL_GetTick>
 80086a8:	4602      	mov	r2, r0
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	1ad3      	subs	r3, r2, r3
 80086ae:	2b64      	cmp	r3, #100	; 0x64
 80086b0:	d901      	bls.n	80086b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80086b2:	2303      	movs	r3, #3
 80086b4:	e1ea      	b.n	8008a8c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80086b6:	4b61      	ldr	r3, [pc, #388]	; (800883c <HAL_RCC_OscConfig+0x280>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d0f0      	beq.n	80086a4 <HAL_RCC_OscConfig+0xe8>
 80086c2:	e014      	b.n	80086ee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086c4:	f7fd fa7c 	bl	8005bc0 <HAL_GetTick>
 80086c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80086ca:	e008      	b.n	80086de <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80086cc:	f7fd fa78 	bl	8005bc0 <HAL_GetTick>
 80086d0:	4602      	mov	r2, r0
 80086d2:	693b      	ldr	r3, [r7, #16]
 80086d4:	1ad3      	subs	r3, r2, r3
 80086d6:	2b64      	cmp	r3, #100	; 0x64
 80086d8:	d901      	bls.n	80086de <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80086da:	2303      	movs	r3, #3
 80086dc:	e1d6      	b.n	8008a8c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80086de:	4b57      	ldr	r3, [pc, #348]	; (800883c <HAL_RCC_OscConfig+0x280>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d1f0      	bne.n	80086cc <HAL_RCC_OscConfig+0x110>
 80086ea:	e000      	b.n	80086ee <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80086ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f003 0302 	and.w	r3, r3, #2
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d069      	beq.n	80087ce <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80086fa:	4b50      	ldr	r3, [pc, #320]	; (800883c <HAL_RCC_OscConfig+0x280>)
 80086fc:	689b      	ldr	r3, [r3, #8]
 80086fe:	f003 030c 	and.w	r3, r3, #12
 8008702:	2b00      	cmp	r3, #0
 8008704:	d00b      	beq.n	800871e <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008706:	4b4d      	ldr	r3, [pc, #308]	; (800883c <HAL_RCC_OscConfig+0x280>)
 8008708:	689b      	ldr	r3, [r3, #8]
 800870a:	f003 030c 	and.w	r3, r3, #12
 800870e:	2b08      	cmp	r3, #8
 8008710:	d11c      	bne.n	800874c <HAL_RCC_OscConfig+0x190>
 8008712:	4b4a      	ldr	r3, [pc, #296]	; (800883c <HAL_RCC_OscConfig+0x280>)
 8008714:	685b      	ldr	r3, [r3, #4]
 8008716:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800871a:	2b00      	cmp	r3, #0
 800871c:	d116      	bne.n	800874c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800871e:	4b47      	ldr	r3, [pc, #284]	; (800883c <HAL_RCC_OscConfig+0x280>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f003 0302 	and.w	r3, r3, #2
 8008726:	2b00      	cmp	r3, #0
 8008728:	d005      	beq.n	8008736 <HAL_RCC_OscConfig+0x17a>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	68db      	ldr	r3, [r3, #12]
 800872e:	2b01      	cmp	r3, #1
 8008730:	d001      	beq.n	8008736 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008732:	2301      	movs	r3, #1
 8008734:	e1aa      	b.n	8008a8c <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008736:	4b41      	ldr	r3, [pc, #260]	; (800883c <HAL_RCC_OscConfig+0x280>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	691b      	ldr	r3, [r3, #16]
 8008742:	00db      	lsls	r3, r3, #3
 8008744:	493d      	ldr	r1, [pc, #244]	; (800883c <HAL_RCC_OscConfig+0x280>)
 8008746:	4313      	orrs	r3, r2
 8008748:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800874a:	e040      	b.n	80087ce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	68db      	ldr	r3, [r3, #12]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d023      	beq.n	800879c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008754:	4b39      	ldr	r3, [pc, #228]	; (800883c <HAL_RCC_OscConfig+0x280>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4a38      	ldr	r2, [pc, #224]	; (800883c <HAL_RCC_OscConfig+0x280>)
 800875a:	f043 0301 	orr.w	r3, r3, #1
 800875e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008760:	f7fd fa2e 	bl	8005bc0 <HAL_GetTick>
 8008764:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008766:	e008      	b.n	800877a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008768:	f7fd fa2a 	bl	8005bc0 <HAL_GetTick>
 800876c:	4602      	mov	r2, r0
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	1ad3      	subs	r3, r2, r3
 8008772:	2b02      	cmp	r3, #2
 8008774:	d901      	bls.n	800877a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8008776:	2303      	movs	r3, #3
 8008778:	e188      	b.n	8008a8c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800877a:	4b30      	ldr	r3, [pc, #192]	; (800883c <HAL_RCC_OscConfig+0x280>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f003 0302 	and.w	r3, r3, #2
 8008782:	2b00      	cmp	r3, #0
 8008784:	d0f0      	beq.n	8008768 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008786:	4b2d      	ldr	r3, [pc, #180]	; (800883c <HAL_RCC_OscConfig+0x280>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	691b      	ldr	r3, [r3, #16]
 8008792:	00db      	lsls	r3, r3, #3
 8008794:	4929      	ldr	r1, [pc, #164]	; (800883c <HAL_RCC_OscConfig+0x280>)
 8008796:	4313      	orrs	r3, r2
 8008798:	600b      	str	r3, [r1, #0]
 800879a:	e018      	b.n	80087ce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800879c:	4b27      	ldr	r3, [pc, #156]	; (800883c <HAL_RCC_OscConfig+0x280>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4a26      	ldr	r2, [pc, #152]	; (800883c <HAL_RCC_OscConfig+0x280>)
 80087a2:	f023 0301 	bic.w	r3, r3, #1
 80087a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087a8:	f7fd fa0a 	bl	8005bc0 <HAL_GetTick>
 80087ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80087ae:	e008      	b.n	80087c2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80087b0:	f7fd fa06 	bl	8005bc0 <HAL_GetTick>
 80087b4:	4602      	mov	r2, r0
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	1ad3      	subs	r3, r2, r3
 80087ba:	2b02      	cmp	r3, #2
 80087bc:	d901      	bls.n	80087c2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80087be:	2303      	movs	r3, #3
 80087c0:	e164      	b.n	8008a8c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80087c2:	4b1e      	ldr	r3, [pc, #120]	; (800883c <HAL_RCC_OscConfig+0x280>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f003 0302 	and.w	r3, r3, #2
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d1f0      	bne.n	80087b0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f003 0308 	and.w	r3, r3, #8
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d038      	beq.n	800884c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	695b      	ldr	r3, [r3, #20]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d019      	beq.n	8008816 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80087e2:	4b16      	ldr	r3, [pc, #88]	; (800883c <HAL_RCC_OscConfig+0x280>)
 80087e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087e6:	4a15      	ldr	r2, [pc, #84]	; (800883c <HAL_RCC_OscConfig+0x280>)
 80087e8:	f043 0301 	orr.w	r3, r3, #1
 80087ec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087ee:	f7fd f9e7 	bl	8005bc0 <HAL_GetTick>
 80087f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80087f4:	e008      	b.n	8008808 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80087f6:	f7fd f9e3 	bl	8005bc0 <HAL_GetTick>
 80087fa:	4602      	mov	r2, r0
 80087fc:	693b      	ldr	r3, [r7, #16]
 80087fe:	1ad3      	subs	r3, r2, r3
 8008800:	2b02      	cmp	r3, #2
 8008802:	d901      	bls.n	8008808 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008804:	2303      	movs	r3, #3
 8008806:	e141      	b.n	8008a8c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008808:	4b0c      	ldr	r3, [pc, #48]	; (800883c <HAL_RCC_OscConfig+0x280>)
 800880a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800880c:	f003 0302 	and.w	r3, r3, #2
 8008810:	2b00      	cmp	r3, #0
 8008812:	d0f0      	beq.n	80087f6 <HAL_RCC_OscConfig+0x23a>
 8008814:	e01a      	b.n	800884c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008816:	4b09      	ldr	r3, [pc, #36]	; (800883c <HAL_RCC_OscConfig+0x280>)
 8008818:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800881a:	4a08      	ldr	r2, [pc, #32]	; (800883c <HAL_RCC_OscConfig+0x280>)
 800881c:	f023 0301 	bic.w	r3, r3, #1
 8008820:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008822:	f7fd f9cd 	bl	8005bc0 <HAL_GetTick>
 8008826:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008828:	e00a      	b.n	8008840 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800882a:	f7fd f9c9 	bl	8005bc0 <HAL_GetTick>
 800882e:	4602      	mov	r2, r0
 8008830:	693b      	ldr	r3, [r7, #16]
 8008832:	1ad3      	subs	r3, r2, r3
 8008834:	2b02      	cmp	r3, #2
 8008836:	d903      	bls.n	8008840 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008838:	2303      	movs	r3, #3
 800883a:	e127      	b.n	8008a8c <HAL_RCC_OscConfig+0x4d0>
 800883c:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008840:	4b94      	ldr	r3, [pc, #592]	; (8008a94 <HAL_RCC_OscConfig+0x4d8>)
 8008842:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008844:	f003 0302 	and.w	r3, r3, #2
 8008848:	2b00      	cmp	r3, #0
 800884a:	d1ee      	bne.n	800882a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f003 0304 	and.w	r3, r3, #4
 8008854:	2b00      	cmp	r3, #0
 8008856:	f000 80a4 	beq.w	80089a2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800885a:	4b8e      	ldr	r3, [pc, #568]	; (8008a94 <HAL_RCC_OscConfig+0x4d8>)
 800885c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800885e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008862:	2b00      	cmp	r3, #0
 8008864:	d10d      	bne.n	8008882 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8008866:	4b8b      	ldr	r3, [pc, #556]	; (8008a94 <HAL_RCC_OscConfig+0x4d8>)
 8008868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800886a:	4a8a      	ldr	r2, [pc, #552]	; (8008a94 <HAL_RCC_OscConfig+0x4d8>)
 800886c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008870:	6413      	str	r3, [r2, #64]	; 0x40
 8008872:	4b88      	ldr	r3, [pc, #544]	; (8008a94 <HAL_RCC_OscConfig+0x4d8>)
 8008874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800887a:	60fb      	str	r3, [r7, #12]
 800887c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800887e:	2301      	movs	r3, #1
 8008880:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008882:	4b85      	ldr	r3, [pc, #532]	; (8008a98 <HAL_RCC_OscConfig+0x4dc>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800888a:	2b00      	cmp	r3, #0
 800888c:	d118      	bne.n	80088c0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800888e:	4b82      	ldr	r3, [pc, #520]	; (8008a98 <HAL_RCC_OscConfig+0x4dc>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	4a81      	ldr	r2, [pc, #516]	; (8008a98 <HAL_RCC_OscConfig+0x4dc>)
 8008894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008898:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800889a:	f7fd f991 	bl	8005bc0 <HAL_GetTick>
 800889e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80088a0:	e008      	b.n	80088b4 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80088a2:	f7fd f98d 	bl	8005bc0 <HAL_GetTick>
 80088a6:	4602      	mov	r2, r0
 80088a8:	693b      	ldr	r3, [r7, #16]
 80088aa:	1ad3      	subs	r3, r2, r3
 80088ac:	2b64      	cmp	r3, #100	; 0x64
 80088ae:	d901      	bls.n	80088b4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80088b0:	2303      	movs	r3, #3
 80088b2:	e0eb      	b.n	8008a8c <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80088b4:	4b78      	ldr	r3, [pc, #480]	; (8008a98 <HAL_RCC_OscConfig+0x4dc>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d0f0      	beq.n	80088a2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	689b      	ldr	r3, [r3, #8]
 80088c4:	2b01      	cmp	r3, #1
 80088c6:	d106      	bne.n	80088d6 <HAL_RCC_OscConfig+0x31a>
 80088c8:	4b72      	ldr	r3, [pc, #456]	; (8008a94 <HAL_RCC_OscConfig+0x4d8>)
 80088ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088cc:	4a71      	ldr	r2, [pc, #452]	; (8008a94 <HAL_RCC_OscConfig+0x4d8>)
 80088ce:	f043 0301 	orr.w	r3, r3, #1
 80088d2:	6713      	str	r3, [r2, #112]	; 0x70
 80088d4:	e02d      	b.n	8008932 <HAL_RCC_OscConfig+0x376>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	689b      	ldr	r3, [r3, #8]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d10c      	bne.n	80088f8 <HAL_RCC_OscConfig+0x33c>
 80088de:	4b6d      	ldr	r3, [pc, #436]	; (8008a94 <HAL_RCC_OscConfig+0x4d8>)
 80088e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088e2:	4a6c      	ldr	r2, [pc, #432]	; (8008a94 <HAL_RCC_OscConfig+0x4d8>)
 80088e4:	f023 0301 	bic.w	r3, r3, #1
 80088e8:	6713      	str	r3, [r2, #112]	; 0x70
 80088ea:	4b6a      	ldr	r3, [pc, #424]	; (8008a94 <HAL_RCC_OscConfig+0x4d8>)
 80088ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088ee:	4a69      	ldr	r2, [pc, #420]	; (8008a94 <HAL_RCC_OscConfig+0x4d8>)
 80088f0:	f023 0304 	bic.w	r3, r3, #4
 80088f4:	6713      	str	r3, [r2, #112]	; 0x70
 80088f6:	e01c      	b.n	8008932 <HAL_RCC_OscConfig+0x376>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	689b      	ldr	r3, [r3, #8]
 80088fc:	2b05      	cmp	r3, #5
 80088fe:	d10c      	bne.n	800891a <HAL_RCC_OscConfig+0x35e>
 8008900:	4b64      	ldr	r3, [pc, #400]	; (8008a94 <HAL_RCC_OscConfig+0x4d8>)
 8008902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008904:	4a63      	ldr	r2, [pc, #396]	; (8008a94 <HAL_RCC_OscConfig+0x4d8>)
 8008906:	f043 0304 	orr.w	r3, r3, #4
 800890a:	6713      	str	r3, [r2, #112]	; 0x70
 800890c:	4b61      	ldr	r3, [pc, #388]	; (8008a94 <HAL_RCC_OscConfig+0x4d8>)
 800890e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008910:	4a60      	ldr	r2, [pc, #384]	; (8008a94 <HAL_RCC_OscConfig+0x4d8>)
 8008912:	f043 0301 	orr.w	r3, r3, #1
 8008916:	6713      	str	r3, [r2, #112]	; 0x70
 8008918:	e00b      	b.n	8008932 <HAL_RCC_OscConfig+0x376>
 800891a:	4b5e      	ldr	r3, [pc, #376]	; (8008a94 <HAL_RCC_OscConfig+0x4d8>)
 800891c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800891e:	4a5d      	ldr	r2, [pc, #372]	; (8008a94 <HAL_RCC_OscConfig+0x4d8>)
 8008920:	f023 0301 	bic.w	r3, r3, #1
 8008924:	6713      	str	r3, [r2, #112]	; 0x70
 8008926:	4b5b      	ldr	r3, [pc, #364]	; (8008a94 <HAL_RCC_OscConfig+0x4d8>)
 8008928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800892a:	4a5a      	ldr	r2, [pc, #360]	; (8008a94 <HAL_RCC_OscConfig+0x4d8>)
 800892c:	f023 0304 	bic.w	r3, r3, #4
 8008930:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	689b      	ldr	r3, [r3, #8]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d015      	beq.n	8008966 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800893a:	f7fd f941 	bl	8005bc0 <HAL_GetTick>
 800893e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008940:	e00a      	b.n	8008958 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008942:	f7fd f93d 	bl	8005bc0 <HAL_GetTick>
 8008946:	4602      	mov	r2, r0
 8008948:	693b      	ldr	r3, [r7, #16]
 800894a:	1ad3      	subs	r3, r2, r3
 800894c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008950:	4293      	cmp	r3, r2
 8008952:	d901      	bls.n	8008958 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8008954:	2303      	movs	r3, #3
 8008956:	e099      	b.n	8008a8c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008958:	4b4e      	ldr	r3, [pc, #312]	; (8008a94 <HAL_RCC_OscConfig+0x4d8>)
 800895a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800895c:	f003 0302 	and.w	r3, r3, #2
 8008960:	2b00      	cmp	r3, #0
 8008962:	d0ee      	beq.n	8008942 <HAL_RCC_OscConfig+0x386>
 8008964:	e014      	b.n	8008990 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008966:	f7fd f92b 	bl	8005bc0 <HAL_GetTick>
 800896a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800896c:	e00a      	b.n	8008984 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800896e:	f7fd f927 	bl	8005bc0 <HAL_GetTick>
 8008972:	4602      	mov	r2, r0
 8008974:	693b      	ldr	r3, [r7, #16]
 8008976:	1ad3      	subs	r3, r2, r3
 8008978:	f241 3288 	movw	r2, #5000	; 0x1388
 800897c:	4293      	cmp	r3, r2
 800897e:	d901      	bls.n	8008984 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8008980:	2303      	movs	r3, #3
 8008982:	e083      	b.n	8008a8c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008984:	4b43      	ldr	r3, [pc, #268]	; (8008a94 <HAL_RCC_OscConfig+0x4d8>)
 8008986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008988:	f003 0302 	and.w	r3, r3, #2
 800898c:	2b00      	cmp	r3, #0
 800898e:	d1ee      	bne.n	800896e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008990:	7dfb      	ldrb	r3, [r7, #23]
 8008992:	2b01      	cmp	r3, #1
 8008994:	d105      	bne.n	80089a2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008996:	4b3f      	ldr	r3, [pc, #252]	; (8008a94 <HAL_RCC_OscConfig+0x4d8>)
 8008998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800899a:	4a3e      	ldr	r2, [pc, #248]	; (8008a94 <HAL_RCC_OscConfig+0x4d8>)
 800899c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80089a0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	699b      	ldr	r3, [r3, #24]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d06f      	beq.n	8008a8a <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80089aa:	4b3a      	ldr	r3, [pc, #232]	; (8008a94 <HAL_RCC_OscConfig+0x4d8>)
 80089ac:	689b      	ldr	r3, [r3, #8]
 80089ae:	f003 030c 	and.w	r3, r3, #12
 80089b2:	2b08      	cmp	r3, #8
 80089b4:	d067      	beq.n	8008a86 <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	699b      	ldr	r3, [r3, #24]
 80089ba:	2b02      	cmp	r3, #2
 80089bc:	d149      	bne.n	8008a52 <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80089be:	4b35      	ldr	r3, [pc, #212]	; (8008a94 <HAL_RCC_OscConfig+0x4d8>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4a34      	ldr	r2, [pc, #208]	; (8008a94 <HAL_RCC_OscConfig+0x4d8>)
 80089c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80089c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089ca:	f7fd f8f9 	bl	8005bc0 <HAL_GetTick>
 80089ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80089d0:	e008      	b.n	80089e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80089d2:	f7fd f8f5 	bl	8005bc0 <HAL_GetTick>
 80089d6:	4602      	mov	r2, r0
 80089d8:	693b      	ldr	r3, [r7, #16]
 80089da:	1ad3      	subs	r3, r2, r3
 80089dc:	2b02      	cmp	r3, #2
 80089de:	d901      	bls.n	80089e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80089e0:	2303      	movs	r3, #3
 80089e2:	e053      	b.n	8008a8c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80089e4:	4b2b      	ldr	r3, [pc, #172]	; (8008a94 <HAL_RCC_OscConfig+0x4d8>)
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d1f0      	bne.n	80089d2 <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	69da      	ldr	r2, [r3, #28]
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6a1b      	ldr	r3, [r3, #32]
 80089f8:	431a      	orrs	r2, r3
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089fe:	019b      	lsls	r3, r3, #6
 8008a00:	431a      	orrs	r2, r3
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a06:	085b      	lsrs	r3, r3, #1
 8008a08:	3b01      	subs	r3, #1
 8008a0a:	041b      	lsls	r3, r3, #16
 8008a0c:	431a      	orrs	r2, r3
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a12:	061b      	lsls	r3, r3, #24
 8008a14:	4313      	orrs	r3, r2
 8008a16:	4a1f      	ldr	r2, [pc, #124]	; (8008a94 <HAL_RCC_OscConfig+0x4d8>)
 8008a18:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008a1c:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008a1e:	4b1d      	ldr	r3, [pc, #116]	; (8008a94 <HAL_RCC_OscConfig+0x4d8>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	4a1c      	ldr	r2, [pc, #112]	; (8008a94 <HAL_RCC_OscConfig+0x4d8>)
 8008a24:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008a28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a2a:	f7fd f8c9 	bl	8005bc0 <HAL_GetTick>
 8008a2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a30:	e008      	b.n	8008a44 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a32:	f7fd f8c5 	bl	8005bc0 <HAL_GetTick>
 8008a36:	4602      	mov	r2, r0
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	1ad3      	subs	r3, r2, r3
 8008a3c:	2b02      	cmp	r3, #2
 8008a3e:	d901      	bls.n	8008a44 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 8008a40:	2303      	movs	r3, #3
 8008a42:	e023      	b.n	8008a8c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a44:	4b13      	ldr	r3, [pc, #76]	; (8008a94 <HAL_RCC_OscConfig+0x4d8>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d0f0      	beq.n	8008a32 <HAL_RCC_OscConfig+0x476>
 8008a50:	e01b      	b.n	8008a8a <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a52:	4b10      	ldr	r3, [pc, #64]	; (8008a94 <HAL_RCC_OscConfig+0x4d8>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	4a0f      	ldr	r2, [pc, #60]	; (8008a94 <HAL_RCC_OscConfig+0x4d8>)
 8008a58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008a5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a5e:	f7fd f8af 	bl	8005bc0 <HAL_GetTick>
 8008a62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a64:	e008      	b.n	8008a78 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a66:	f7fd f8ab 	bl	8005bc0 <HAL_GetTick>
 8008a6a:	4602      	mov	r2, r0
 8008a6c:	693b      	ldr	r3, [r7, #16]
 8008a6e:	1ad3      	subs	r3, r2, r3
 8008a70:	2b02      	cmp	r3, #2
 8008a72:	d901      	bls.n	8008a78 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8008a74:	2303      	movs	r3, #3
 8008a76:	e009      	b.n	8008a8c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a78:	4b06      	ldr	r3, [pc, #24]	; (8008a94 <HAL_RCC_OscConfig+0x4d8>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d1f0      	bne.n	8008a66 <HAL_RCC_OscConfig+0x4aa>
 8008a84:	e001      	b.n	8008a8a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8008a86:	2301      	movs	r3, #1
 8008a88:	e000      	b.n	8008a8c <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 8008a8a:	2300      	movs	r3, #0
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	3718      	adds	r7, #24
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}
 8008a94:	40023800 	.word	0x40023800
 8008a98:	40007000 	.word	0x40007000

08008a9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b084      	sub	sp, #16
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
 8008aa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d101      	bne.n	8008ab4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	e0ce      	b.n	8008c52 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008ab4:	4b69      	ldr	r3, [pc, #420]	; (8008c5c <HAL_RCC_ClockConfig+0x1c0>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f003 030f 	and.w	r3, r3, #15
 8008abc:	683a      	ldr	r2, [r7, #0]
 8008abe:	429a      	cmp	r2, r3
 8008ac0:	d910      	bls.n	8008ae4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ac2:	4b66      	ldr	r3, [pc, #408]	; (8008c5c <HAL_RCC_ClockConfig+0x1c0>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f023 020f 	bic.w	r2, r3, #15
 8008aca:	4964      	ldr	r1, [pc, #400]	; (8008c5c <HAL_RCC_ClockConfig+0x1c0>)
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	4313      	orrs	r3, r2
 8008ad0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ad2:	4b62      	ldr	r3, [pc, #392]	; (8008c5c <HAL_RCC_ClockConfig+0x1c0>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f003 030f 	and.w	r3, r3, #15
 8008ada:	683a      	ldr	r2, [r7, #0]
 8008adc:	429a      	cmp	r2, r3
 8008ade:	d001      	beq.n	8008ae4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	e0b6      	b.n	8008c52 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f003 0302 	and.w	r3, r3, #2
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d020      	beq.n	8008b32 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f003 0304 	and.w	r3, r3, #4
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d005      	beq.n	8008b08 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008afc:	4b58      	ldr	r3, [pc, #352]	; (8008c60 <HAL_RCC_ClockConfig+0x1c4>)
 8008afe:	689b      	ldr	r3, [r3, #8]
 8008b00:	4a57      	ldr	r2, [pc, #348]	; (8008c60 <HAL_RCC_ClockConfig+0x1c4>)
 8008b02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008b06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f003 0308 	and.w	r3, r3, #8
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d005      	beq.n	8008b20 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008b14:	4b52      	ldr	r3, [pc, #328]	; (8008c60 <HAL_RCC_ClockConfig+0x1c4>)
 8008b16:	689b      	ldr	r3, [r3, #8]
 8008b18:	4a51      	ldr	r2, [pc, #324]	; (8008c60 <HAL_RCC_ClockConfig+0x1c4>)
 8008b1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008b1e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008b20:	4b4f      	ldr	r3, [pc, #316]	; (8008c60 <HAL_RCC_ClockConfig+0x1c4>)
 8008b22:	689b      	ldr	r3, [r3, #8]
 8008b24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	689b      	ldr	r3, [r3, #8]
 8008b2c:	494c      	ldr	r1, [pc, #304]	; (8008c60 <HAL_RCC_ClockConfig+0x1c4>)
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f003 0301 	and.w	r3, r3, #1
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d040      	beq.n	8008bc0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	685b      	ldr	r3, [r3, #4]
 8008b42:	2b01      	cmp	r3, #1
 8008b44:	d107      	bne.n	8008b56 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b46:	4b46      	ldr	r3, [pc, #280]	; (8008c60 <HAL_RCC_ClockConfig+0x1c4>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d115      	bne.n	8008b7e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008b52:	2301      	movs	r3, #1
 8008b54:	e07d      	b.n	8008c52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	685b      	ldr	r3, [r3, #4]
 8008b5a:	2b02      	cmp	r3, #2
 8008b5c:	d107      	bne.n	8008b6e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008b5e:	4b40      	ldr	r3, [pc, #256]	; (8008c60 <HAL_RCC_ClockConfig+0x1c4>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d109      	bne.n	8008b7e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	e071      	b.n	8008c52 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008b6e:	4b3c      	ldr	r3, [pc, #240]	; (8008c60 <HAL_RCC_ClockConfig+0x1c4>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f003 0302 	and.w	r3, r3, #2
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d101      	bne.n	8008b7e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	e069      	b.n	8008c52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008b7e:	4b38      	ldr	r3, [pc, #224]	; (8008c60 <HAL_RCC_ClockConfig+0x1c4>)
 8008b80:	689b      	ldr	r3, [r3, #8]
 8008b82:	f023 0203 	bic.w	r2, r3, #3
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	685b      	ldr	r3, [r3, #4]
 8008b8a:	4935      	ldr	r1, [pc, #212]	; (8008c60 <HAL_RCC_ClockConfig+0x1c4>)
 8008b8c:	4313      	orrs	r3, r2
 8008b8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b90:	f7fd f816 	bl	8005bc0 <HAL_GetTick>
 8008b94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b96:	e00a      	b.n	8008bae <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008b98:	f7fd f812 	bl	8005bc0 <HAL_GetTick>
 8008b9c:	4602      	mov	r2, r0
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	1ad3      	subs	r3, r2, r3
 8008ba2:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d901      	bls.n	8008bae <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8008baa:	2303      	movs	r3, #3
 8008bac:	e051      	b.n	8008c52 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008bae:	4b2c      	ldr	r3, [pc, #176]	; (8008c60 <HAL_RCC_ClockConfig+0x1c4>)
 8008bb0:	689b      	ldr	r3, [r3, #8]
 8008bb2:	f003 020c 	and.w	r2, r3, #12
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	685b      	ldr	r3, [r3, #4]
 8008bba:	009b      	lsls	r3, r3, #2
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d1eb      	bne.n	8008b98 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008bc0:	4b26      	ldr	r3, [pc, #152]	; (8008c5c <HAL_RCC_ClockConfig+0x1c0>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f003 030f 	and.w	r3, r3, #15
 8008bc8:	683a      	ldr	r2, [r7, #0]
 8008bca:	429a      	cmp	r2, r3
 8008bcc:	d210      	bcs.n	8008bf0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008bce:	4b23      	ldr	r3, [pc, #140]	; (8008c5c <HAL_RCC_ClockConfig+0x1c0>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f023 020f 	bic.w	r2, r3, #15
 8008bd6:	4921      	ldr	r1, [pc, #132]	; (8008c5c <HAL_RCC_ClockConfig+0x1c0>)
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	4313      	orrs	r3, r2
 8008bdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008bde:	4b1f      	ldr	r3, [pc, #124]	; (8008c5c <HAL_RCC_ClockConfig+0x1c0>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f003 030f 	and.w	r3, r3, #15
 8008be6:	683a      	ldr	r2, [r7, #0]
 8008be8:	429a      	cmp	r2, r3
 8008bea:	d001      	beq.n	8008bf0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8008bec:	2301      	movs	r3, #1
 8008bee:	e030      	b.n	8008c52 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f003 0304 	and.w	r3, r3, #4
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d008      	beq.n	8008c0e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008bfc:	4b18      	ldr	r3, [pc, #96]	; (8008c60 <HAL_RCC_ClockConfig+0x1c4>)
 8008bfe:	689b      	ldr	r3, [r3, #8]
 8008c00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	68db      	ldr	r3, [r3, #12]
 8008c08:	4915      	ldr	r1, [pc, #84]	; (8008c60 <HAL_RCC_ClockConfig+0x1c4>)
 8008c0a:	4313      	orrs	r3, r2
 8008c0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f003 0308 	and.w	r3, r3, #8
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d009      	beq.n	8008c2e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008c1a:	4b11      	ldr	r3, [pc, #68]	; (8008c60 <HAL_RCC_ClockConfig+0x1c4>)
 8008c1c:	689b      	ldr	r3, [r3, #8]
 8008c1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	691b      	ldr	r3, [r3, #16]
 8008c26:	00db      	lsls	r3, r3, #3
 8008c28:	490d      	ldr	r1, [pc, #52]	; (8008c60 <HAL_RCC_ClockConfig+0x1c4>)
 8008c2a:	4313      	orrs	r3, r2
 8008c2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008c2e:	f000 f81d 	bl	8008c6c <HAL_RCC_GetSysClockFreq>
 8008c32:	4601      	mov	r1, r0
 8008c34:	4b0a      	ldr	r3, [pc, #40]	; (8008c60 <HAL_RCC_ClockConfig+0x1c4>)
 8008c36:	689b      	ldr	r3, [r3, #8]
 8008c38:	091b      	lsrs	r3, r3, #4
 8008c3a:	f003 030f 	and.w	r3, r3, #15
 8008c3e:	4a09      	ldr	r2, [pc, #36]	; (8008c64 <HAL_RCC_ClockConfig+0x1c8>)
 8008c40:	5cd3      	ldrb	r3, [r2, r3]
 8008c42:	fa21 f303 	lsr.w	r3, r1, r3
 8008c46:	4a08      	ldr	r2, [pc, #32]	; (8008c68 <HAL_RCC_ClockConfig+0x1cc>)
 8008c48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8008c4a:	2000      	movs	r0, #0
 8008c4c:	f7fc ff74 	bl	8005b38 <HAL_InitTick>

  return HAL_OK;
 8008c50:	2300      	movs	r3, #0
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	3710      	adds	r7, #16
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}
 8008c5a:	bf00      	nop
 8008c5c:	40023c00 	.word	0x40023c00
 8008c60:	40023800 	.word	0x40023800
 8008c64:	0800ade4 	.word	0x0800ade4
 8008c68:	20000324 	.word	0x20000324

08008c6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c6e:	b085      	sub	sp, #20
 8008c70:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8008c72:	2300      	movs	r3, #0
 8008c74:	607b      	str	r3, [r7, #4]
 8008c76:	2300      	movs	r3, #0
 8008c78:	60fb      	str	r3, [r7, #12]
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008c82:	4b63      	ldr	r3, [pc, #396]	; (8008e10 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008c84:	689b      	ldr	r3, [r3, #8]
 8008c86:	f003 030c 	and.w	r3, r3, #12
 8008c8a:	2b04      	cmp	r3, #4
 8008c8c:	d007      	beq.n	8008c9e <HAL_RCC_GetSysClockFreq+0x32>
 8008c8e:	2b08      	cmp	r3, #8
 8008c90:	d008      	beq.n	8008ca4 <HAL_RCC_GetSysClockFreq+0x38>
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	f040 80b4 	bne.w	8008e00 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008c98:	4b5e      	ldr	r3, [pc, #376]	; (8008e14 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8008c9a:	60bb      	str	r3, [r7, #8]
       break;
 8008c9c:	e0b3      	b.n	8008e06 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008c9e:	4b5e      	ldr	r3, [pc, #376]	; (8008e18 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8008ca0:	60bb      	str	r3, [r7, #8]
      break;
 8008ca2:	e0b0      	b.n	8008e06 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008ca4:	4b5a      	ldr	r3, [pc, #360]	; (8008e10 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008ca6:	685b      	ldr	r3, [r3, #4]
 8008ca8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008cac:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8008cae:	4b58      	ldr	r3, [pc, #352]	; (8008e10 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008cb0:	685b      	ldr	r3, [r3, #4]
 8008cb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d04a      	beq.n	8008d50 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008cba:	4b55      	ldr	r3, [pc, #340]	; (8008e10 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008cbc:	685b      	ldr	r3, [r3, #4]
 8008cbe:	099b      	lsrs	r3, r3, #6
 8008cc0:	f04f 0400 	mov.w	r4, #0
 8008cc4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008cc8:	f04f 0200 	mov.w	r2, #0
 8008ccc:	ea03 0501 	and.w	r5, r3, r1
 8008cd0:	ea04 0602 	and.w	r6, r4, r2
 8008cd4:	4629      	mov	r1, r5
 8008cd6:	4632      	mov	r2, r6
 8008cd8:	f04f 0300 	mov.w	r3, #0
 8008cdc:	f04f 0400 	mov.w	r4, #0
 8008ce0:	0154      	lsls	r4, r2, #5
 8008ce2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008ce6:	014b      	lsls	r3, r1, #5
 8008ce8:	4619      	mov	r1, r3
 8008cea:	4622      	mov	r2, r4
 8008cec:	1b49      	subs	r1, r1, r5
 8008cee:	eb62 0206 	sbc.w	r2, r2, r6
 8008cf2:	f04f 0300 	mov.w	r3, #0
 8008cf6:	f04f 0400 	mov.w	r4, #0
 8008cfa:	0194      	lsls	r4, r2, #6
 8008cfc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008d00:	018b      	lsls	r3, r1, #6
 8008d02:	1a5b      	subs	r3, r3, r1
 8008d04:	eb64 0402 	sbc.w	r4, r4, r2
 8008d08:	f04f 0100 	mov.w	r1, #0
 8008d0c:	f04f 0200 	mov.w	r2, #0
 8008d10:	00e2      	lsls	r2, r4, #3
 8008d12:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008d16:	00d9      	lsls	r1, r3, #3
 8008d18:	460b      	mov	r3, r1
 8008d1a:	4614      	mov	r4, r2
 8008d1c:	195b      	adds	r3, r3, r5
 8008d1e:	eb44 0406 	adc.w	r4, r4, r6
 8008d22:	f04f 0100 	mov.w	r1, #0
 8008d26:	f04f 0200 	mov.w	r2, #0
 8008d2a:	0262      	lsls	r2, r4, #9
 8008d2c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8008d30:	0259      	lsls	r1, r3, #9
 8008d32:	460b      	mov	r3, r1
 8008d34:	4614      	mov	r4, r2
 8008d36:	4618      	mov	r0, r3
 8008d38:	4621      	mov	r1, r4
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f04f 0400 	mov.w	r4, #0
 8008d40:	461a      	mov	r2, r3
 8008d42:	4623      	mov	r3, r4
 8008d44:	f7f7 fa60 	bl	8000208 <__aeabi_uldivmod>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	460c      	mov	r4, r1
 8008d4c:	60fb      	str	r3, [r7, #12]
 8008d4e:	e049      	b.n	8008de4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008d50:	4b2f      	ldr	r3, [pc, #188]	; (8008e10 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008d52:	685b      	ldr	r3, [r3, #4]
 8008d54:	099b      	lsrs	r3, r3, #6
 8008d56:	f04f 0400 	mov.w	r4, #0
 8008d5a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008d5e:	f04f 0200 	mov.w	r2, #0
 8008d62:	ea03 0501 	and.w	r5, r3, r1
 8008d66:	ea04 0602 	and.w	r6, r4, r2
 8008d6a:	4629      	mov	r1, r5
 8008d6c:	4632      	mov	r2, r6
 8008d6e:	f04f 0300 	mov.w	r3, #0
 8008d72:	f04f 0400 	mov.w	r4, #0
 8008d76:	0154      	lsls	r4, r2, #5
 8008d78:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008d7c:	014b      	lsls	r3, r1, #5
 8008d7e:	4619      	mov	r1, r3
 8008d80:	4622      	mov	r2, r4
 8008d82:	1b49      	subs	r1, r1, r5
 8008d84:	eb62 0206 	sbc.w	r2, r2, r6
 8008d88:	f04f 0300 	mov.w	r3, #0
 8008d8c:	f04f 0400 	mov.w	r4, #0
 8008d90:	0194      	lsls	r4, r2, #6
 8008d92:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008d96:	018b      	lsls	r3, r1, #6
 8008d98:	1a5b      	subs	r3, r3, r1
 8008d9a:	eb64 0402 	sbc.w	r4, r4, r2
 8008d9e:	f04f 0100 	mov.w	r1, #0
 8008da2:	f04f 0200 	mov.w	r2, #0
 8008da6:	00e2      	lsls	r2, r4, #3
 8008da8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008dac:	00d9      	lsls	r1, r3, #3
 8008dae:	460b      	mov	r3, r1
 8008db0:	4614      	mov	r4, r2
 8008db2:	195b      	adds	r3, r3, r5
 8008db4:	eb44 0406 	adc.w	r4, r4, r6
 8008db8:	f04f 0100 	mov.w	r1, #0
 8008dbc:	f04f 0200 	mov.w	r2, #0
 8008dc0:	02a2      	lsls	r2, r4, #10
 8008dc2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8008dc6:	0299      	lsls	r1, r3, #10
 8008dc8:	460b      	mov	r3, r1
 8008dca:	4614      	mov	r4, r2
 8008dcc:	4618      	mov	r0, r3
 8008dce:	4621      	mov	r1, r4
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f04f 0400 	mov.w	r4, #0
 8008dd6:	461a      	mov	r2, r3
 8008dd8:	4623      	mov	r3, r4
 8008dda:	f7f7 fa15 	bl	8000208 <__aeabi_uldivmod>
 8008dde:	4603      	mov	r3, r0
 8008de0:	460c      	mov	r4, r1
 8008de2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8008de4:	4b0a      	ldr	r3, [pc, #40]	; (8008e10 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008de6:	685b      	ldr	r3, [r3, #4]
 8008de8:	0c1b      	lsrs	r3, r3, #16
 8008dea:	f003 0303 	and.w	r3, r3, #3
 8008dee:	3301      	adds	r3, #1
 8008df0:	005b      	lsls	r3, r3, #1
 8008df2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008df4:	68fa      	ldr	r2, [r7, #12]
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dfc:	60bb      	str	r3, [r7, #8]
      break;
 8008dfe:	e002      	b.n	8008e06 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008e00:	4b04      	ldr	r3, [pc, #16]	; (8008e14 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8008e02:	60bb      	str	r3, [r7, #8]
      break;
 8008e04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008e06:	68bb      	ldr	r3, [r7, #8]
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3714      	adds	r7, #20
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e10:	40023800 	.word	0x40023800
 8008e14:	00f42400 	.word	0x00f42400
 8008e18:	007a1200 	.word	0x007a1200

08008e1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b088      	sub	sp, #32
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008e24:	2300      	movs	r3, #0
 8008e26:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8008e28:	2300      	movs	r3, #0
 8008e2a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8008e30:	2300      	movs	r3, #0
 8008e32:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8008e34:	2300      	movs	r3, #0
 8008e36:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f003 0301 	and.w	r3, r3, #1
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d012      	beq.n	8008e6a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008e44:	4b69      	ldr	r3, [pc, #420]	; (8008fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e46:	689b      	ldr	r3, [r3, #8]
 8008e48:	4a68      	ldr	r2, [pc, #416]	; (8008fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e4a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008e4e:	6093      	str	r3, [r2, #8]
 8008e50:	4b66      	ldr	r3, [pc, #408]	; (8008fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e52:	689a      	ldr	r2, [r3, #8]
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e58:	4964      	ldr	r1, [pc, #400]	; (8008fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e5a:	4313      	orrs	r3, r2
 8008e5c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d101      	bne.n	8008e6a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8008e66:	2301      	movs	r3, #1
 8008e68:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d017      	beq.n	8008ea6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008e76:	4b5d      	ldr	r3, [pc, #372]	; (8008fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e7c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e84:	4959      	ldr	r1, [pc, #356]	; (8008fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e86:	4313      	orrs	r3, r2
 8008e88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e94:	d101      	bne.n	8008e9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8008e96:	2301      	movs	r3, #1
 8008e98:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d101      	bne.n	8008ea6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d017      	beq.n	8008ee2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008eb2:	4b4e      	ldr	r3, [pc, #312]	; (8008fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008eb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008eb8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ec0:	494a      	ldr	r1, [pc, #296]	; (8008fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008ec2:	4313      	orrs	r3, r2
 8008ec4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ecc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008ed0:	d101      	bne.n	8008ed6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d101      	bne.n	8008ee2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8008ede:	2301      	movs	r3, #1
 8008ee0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d001      	beq.n	8008ef2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8008eee:	2301      	movs	r3, #1
 8008ef0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f003 0320 	and.w	r3, r3, #32
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	f000 808b 	beq.w	8009016 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008f00:	4b3a      	ldr	r3, [pc, #232]	; (8008fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f04:	4a39      	ldr	r2, [pc, #228]	; (8008fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f0a:	6413      	str	r3, [r2, #64]	; 0x40
 8008f0c:	4b37      	ldr	r3, [pc, #220]	; (8008fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f14:	60bb      	str	r3, [r7, #8]
 8008f16:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008f18:	4b35      	ldr	r3, [pc, #212]	; (8008ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	4a34      	ldr	r2, [pc, #208]	; (8008ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008f1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f24:	f7fc fe4c 	bl	8005bc0 <HAL_GetTick>
 8008f28:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008f2a:	e008      	b.n	8008f3e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008f2c:	f7fc fe48 	bl	8005bc0 <HAL_GetTick>
 8008f30:	4602      	mov	r2, r0
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	1ad3      	subs	r3, r2, r3
 8008f36:	2b64      	cmp	r3, #100	; 0x64
 8008f38:	d901      	bls.n	8008f3e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8008f3a:	2303      	movs	r3, #3
 8008f3c:	e355      	b.n	80095ea <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008f3e:	4b2c      	ldr	r3, [pc, #176]	; (8008ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d0f0      	beq.n	8008f2c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008f4a:	4b28      	ldr	r3, [pc, #160]	; (8008fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f52:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008f54:	693b      	ldr	r3, [r7, #16]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d035      	beq.n	8008fc6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f62:	693a      	ldr	r2, [r7, #16]
 8008f64:	429a      	cmp	r2, r3
 8008f66:	d02e      	beq.n	8008fc6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008f68:	4b20      	ldr	r3, [pc, #128]	; (8008fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f70:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008f72:	4b1e      	ldr	r3, [pc, #120]	; (8008fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f76:	4a1d      	ldr	r2, [pc, #116]	; (8008fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008f7c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008f7e:	4b1b      	ldr	r3, [pc, #108]	; (8008fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f82:	4a1a      	ldr	r2, [pc, #104]	; (8008fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f88:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8008f8a:	4a18      	ldr	r2, [pc, #96]	; (8008fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f8c:	693b      	ldr	r3, [r7, #16]
 8008f8e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008f90:	4b16      	ldr	r3, [pc, #88]	; (8008fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f94:	f003 0301 	and.w	r3, r3, #1
 8008f98:	2b01      	cmp	r3, #1
 8008f9a:	d114      	bne.n	8008fc6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f9c:	f7fc fe10 	bl	8005bc0 <HAL_GetTick>
 8008fa0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008fa2:	e00a      	b.n	8008fba <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008fa4:	f7fc fe0c 	bl	8005bc0 <HAL_GetTick>
 8008fa8:	4602      	mov	r2, r0
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	1ad3      	subs	r3, r2, r3
 8008fae:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d901      	bls.n	8008fba <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8008fb6:	2303      	movs	r3, #3
 8008fb8:	e317      	b.n	80095ea <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008fba:	4b0c      	ldr	r3, [pc, #48]	; (8008fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fbe:	f003 0302 	and.w	r3, r3, #2
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d0ee      	beq.n	8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008fce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008fd2:	d111      	bne.n	8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8008fd4:	4b05      	ldr	r3, [pc, #20]	; (8008fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008fd6:	689b      	ldr	r3, [r3, #8]
 8008fd8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008fe0:	4b04      	ldr	r3, [pc, #16]	; (8008ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008fe2:	400b      	ands	r3, r1
 8008fe4:	4901      	ldr	r1, [pc, #4]	; (8008fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008fe6:	4313      	orrs	r3, r2
 8008fe8:	608b      	str	r3, [r1, #8]
 8008fea:	e00b      	b.n	8009004 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008fec:	40023800 	.word	0x40023800
 8008ff0:	40007000 	.word	0x40007000
 8008ff4:	0ffffcff 	.word	0x0ffffcff
 8008ff8:	4bb0      	ldr	r3, [pc, #704]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008ffa:	689b      	ldr	r3, [r3, #8]
 8008ffc:	4aaf      	ldr	r2, [pc, #700]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008ffe:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009002:	6093      	str	r3, [r2, #8]
 8009004:	4bad      	ldr	r3, [pc, #692]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009006:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800900c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009010:	49aa      	ldr	r1, [pc, #680]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009012:	4313      	orrs	r3, r2
 8009014:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f003 0310 	and.w	r3, r3, #16
 800901e:	2b00      	cmp	r3, #0
 8009020:	d010      	beq.n	8009044 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009022:	4ba6      	ldr	r3, [pc, #664]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009024:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009028:	4aa4      	ldr	r2, [pc, #656]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800902a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800902e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8009032:	4ba2      	ldr	r3, [pc, #648]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009034:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800903c:	499f      	ldr	r1, [pc, #636]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800903e:	4313      	orrs	r3, r2
 8009040:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800904c:	2b00      	cmp	r3, #0
 800904e:	d00a      	beq.n	8009066 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009050:	4b9a      	ldr	r3, [pc, #616]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009056:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800905e:	4997      	ldr	r1, [pc, #604]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009060:	4313      	orrs	r3, r2
 8009062:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800906e:	2b00      	cmp	r3, #0
 8009070:	d00a      	beq.n	8009088 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009072:	4b92      	ldr	r3, [pc, #584]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009078:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009080:	498e      	ldr	r1, [pc, #568]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009082:	4313      	orrs	r3, r2
 8009084:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009090:	2b00      	cmp	r3, #0
 8009092:	d00a      	beq.n	80090aa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009094:	4b89      	ldr	r3, [pc, #548]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800909a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090a2:	4986      	ldr	r1, [pc, #536]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80090a4:	4313      	orrs	r3, r2
 80090a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d00a      	beq.n	80090cc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80090b6:	4b81      	ldr	r3, [pc, #516]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80090b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090bc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090c4:	497d      	ldr	r1, [pc, #500]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80090c6:	4313      	orrs	r3, r2
 80090c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d00a      	beq.n	80090ee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80090d8:	4b78      	ldr	r3, [pc, #480]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80090da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090de:	f023 0203 	bic.w	r2, r3, #3
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090e6:	4975      	ldr	r1, [pc, #468]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80090e8:	4313      	orrs	r3, r2
 80090ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d00a      	beq.n	8009110 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80090fa:	4b70      	ldr	r3, [pc, #448]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80090fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009100:	f023 020c 	bic.w	r2, r3, #12
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009108:	496c      	ldr	r1, [pc, #432]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800910a:	4313      	orrs	r3, r2
 800910c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009118:	2b00      	cmp	r3, #0
 800911a:	d00a      	beq.n	8009132 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800911c:	4b67      	ldr	r3, [pc, #412]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800911e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009122:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800912a:	4964      	ldr	r1, [pc, #400]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800912c:	4313      	orrs	r3, r2
 800912e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800913a:	2b00      	cmp	r3, #0
 800913c:	d00a      	beq.n	8009154 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800913e:	4b5f      	ldr	r3, [pc, #380]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009144:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800914c:	495b      	ldr	r1, [pc, #364]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800914e:	4313      	orrs	r3, r2
 8009150:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800915c:	2b00      	cmp	r3, #0
 800915e:	d00a      	beq.n	8009176 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009160:	4b56      	ldr	r3, [pc, #344]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009166:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800916e:	4953      	ldr	r1, [pc, #332]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009170:	4313      	orrs	r3, r2
 8009172:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800917e:	2b00      	cmp	r3, #0
 8009180:	d00a      	beq.n	8009198 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8009182:	4b4e      	ldr	r3, [pc, #312]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009188:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009190:	494a      	ldr	r1, [pc, #296]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009192:	4313      	orrs	r3, r2
 8009194:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d00a      	beq.n	80091ba <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80091a4:	4b45      	ldr	r3, [pc, #276]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80091a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091aa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091b2:	4942      	ldr	r1, [pc, #264]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80091b4:	4313      	orrs	r3, r2
 80091b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d00a      	beq.n	80091dc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80091c6:	4b3d      	ldr	r3, [pc, #244]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80091c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091cc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80091d4:	4939      	ldr	r1, [pc, #228]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80091d6:	4313      	orrs	r3, r2
 80091d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d00a      	beq.n	80091fe <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80091e8:	4b34      	ldr	r3, [pc, #208]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80091ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091ee:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80091f6:	4931      	ldr	r1, [pc, #196]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80091f8:	4313      	orrs	r3, r2
 80091fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009206:	2b00      	cmp	r3, #0
 8009208:	d011      	beq.n	800922e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800920a:	4b2c      	ldr	r3, [pc, #176]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800920c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009210:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009218:	4928      	ldr	r1, [pc, #160]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800921a:	4313      	orrs	r3, r2
 800921c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009224:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009228:	d101      	bne.n	800922e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800922a:	2301      	movs	r3, #1
 800922c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f003 0308 	and.w	r3, r3, #8
 8009236:	2b00      	cmp	r3, #0
 8009238:	d001      	beq.n	800923e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800923a:	2301      	movs	r3, #1
 800923c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009246:	2b00      	cmp	r3, #0
 8009248:	d00a      	beq.n	8009260 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800924a:	4b1c      	ldr	r3, [pc, #112]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800924c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009250:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009258:	4918      	ldr	r1, [pc, #96]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800925a:	4313      	orrs	r3, r2
 800925c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009268:	2b00      	cmp	r3, #0
 800926a:	d00b      	beq.n	8009284 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800926c:	4b13      	ldr	r3, [pc, #76]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800926e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009272:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800927c:	490f      	ldr	r1, [pc, #60]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800927e:	4313      	orrs	r3, r2
 8009280:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8009284:	69fb      	ldr	r3, [r7, #28]
 8009286:	2b01      	cmp	r3, #1
 8009288:	d005      	beq.n	8009296 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009292:	f040 80d8 	bne.w	8009446 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009296:	4b09      	ldr	r3, [pc, #36]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	4a08      	ldr	r2, [pc, #32]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800929c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80092a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80092a2:	f7fc fc8d 	bl	8005bc0 <HAL_GetTick>
 80092a6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80092a8:	e00a      	b.n	80092c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80092aa:	f7fc fc89 	bl	8005bc0 <HAL_GetTick>
 80092ae:	4602      	mov	r2, r0
 80092b0:	697b      	ldr	r3, [r7, #20]
 80092b2:	1ad3      	subs	r3, r2, r3
 80092b4:	2b64      	cmp	r3, #100	; 0x64
 80092b6:	d903      	bls.n	80092c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80092b8:	2303      	movs	r3, #3
 80092ba:	e196      	b.n	80095ea <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80092bc:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80092c0:	4b6c      	ldr	r3, [pc, #432]	; (8009474 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d1ee      	bne.n	80092aa <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f003 0301 	and.w	r3, r3, #1
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d021      	beq.n	800931c <HAL_RCCEx_PeriphCLKConfig+0x500>
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d11d      	bne.n	800931c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80092e0:	4b64      	ldr	r3, [pc, #400]	; (8009474 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80092e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092e6:	0c1b      	lsrs	r3, r3, #16
 80092e8:	f003 0303 	and.w	r3, r3, #3
 80092ec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80092ee:	4b61      	ldr	r3, [pc, #388]	; (8009474 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80092f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092f4:	0e1b      	lsrs	r3, r3, #24
 80092f6:	f003 030f 	and.w	r3, r3, #15
 80092fa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	685b      	ldr	r3, [r3, #4]
 8009300:	019a      	lsls	r2, r3, #6
 8009302:	693b      	ldr	r3, [r7, #16]
 8009304:	041b      	lsls	r3, r3, #16
 8009306:	431a      	orrs	r2, r3
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	061b      	lsls	r3, r3, #24
 800930c:	431a      	orrs	r2, r3
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	689b      	ldr	r3, [r3, #8]
 8009312:	071b      	lsls	r3, r3, #28
 8009314:	4957      	ldr	r1, [pc, #348]	; (8009474 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009316:	4313      	orrs	r3, r2
 8009318:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009324:	2b00      	cmp	r3, #0
 8009326:	d004      	beq.n	8009332 <HAL_RCCEx_PeriphCLKConfig+0x516>
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800932c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009330:	d00a      	beq.n	8009348 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800933a:	2b00      	cmp	r3, #0
 800933c:	d02e      	beq.n	800939c <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009342:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009346:	d129      	bne.n	800939c <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009348:	4b4a      	ldr	r3, [pc, #296]	; (8009474 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800934a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800934e:	0c1b      	lsrs	r3, r3, #16
 8009350:	f003 0303 	and.w	r3, r3, #3
 8009354:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009356:	4b47      	ldr	r3, [pc, #284]	; (8009474 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009358:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800935c:	0f1b      	lsrs	r3, r3, #28
 800935e:	f003 0307 	and.w	r3, r3, #7
 8009362:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	685b      	ldr	r3, [r3, #4]
 8009368:	019a      	lsls	r2, r3, #6
 800936a:	693b      	ldr	r3, [r7, #16]
 800936c:	041b      	lsls	r3, r3, #16
 800936e:	431a      	orrs	r2, r3
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	68db      	ldr	r3, [r3, #12]
 8009374:	061b      	lsls	r3, r3, #24
 8009376:	431a      	orrs	r2, r3
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	071b      	lsls	r3, r3, #28
 800937c:	493d      	ldr	r1, [pc, #244]	; (8009474 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800937e:	4313      	orrs	r3, r2
 8009380:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009384:	4b3b      	ldr	r3, [pc, #236]	; (8009474 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009386:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800938a:	f023 021f 	bic.w	r2, r3, #31
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009392:	3b01      	subs	r3, #1
 8009394:	4937      	ldr	r1, [pc, #220]	; (8009474 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009396:	4313      	orrs	r3, r2
 8009398:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d01d      	beq.n	80093e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80093a8:	4b32      	ldr	r3, [pc, #200]	; (8009474 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80093aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093ae:	0e1b      	lsrs	r3, r3, #24
 80093b0:	f003 030f 	and.w	r3, r3, #15
 80093b4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80093b6:	4b2f      	ldr	r3, [pc, #188]	; (8009474 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80093b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093bc:	0f1b      	lsrs	r3, r3, #28
 80093be:	f003 0307 	and.w	r3, r3, #7
 80093c2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	685b      	ldr	r3, [r3, #4]
 80093c8:	019a      	lsls	r2, r3, #6
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	691b      	ldr	r3, [r3, #16]
 80093ce:	041b      	lsls	r3, r3, #16
 80093d0:	431a      	orrs	r2, r3
 80093d2:	693b      	ldr	r3, [r7, #16]
 80093d4:	061b      	lsls	r3, r3, #24
 80093d6:	431a      	orrs	r2, r3
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	071b      	lsls	r3, r3, #28
 80093dc:	4925      	ldr	r1, [pc, #148]	; (8009474 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80093de:	4313      	orrs	r3, r2
 80093e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d011      	beq.n	8009414 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	685b      	ldr	r3, [r3, #4]
 80093f4:	019a      	lsls	r2, r3, #6
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	691b      	ldr	r3, [r3, #16]
 80093fa:	041b      	lsls	r3, r3, #16
 80093fc:	431a      	orrs	r2, r3
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	68db      	ldr	r3, [r3, #12]
 8009402:	061b      	lsls	r3, r3, #24
 8009404:	431a      	orrs	r2, r3
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	689b      	ldr	r3, [r3, #8]
 800940a:	071b      	lsls	r3, r3, #28
 800940c:	4919      	ldr	r1, [pc, #100]	; (8009474 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800940e:	4313      	orrs	r3, r2
 8009410:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009414:	4b17      	ldr	r3, [pc, #92]	; (8009474 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	4a16      	ldr	r2, [pc, #88]	; (8009474 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800941a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800941e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009420:	f7fc fbce 	bl	8005bc0 <HAL_GetTick>
 8009424:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009426:	e008      	b.n	800943a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009428:	f7fc fbca 	bl	8005bc0 <HAL_GetTick>
 800942c:	4602      	mov	r2, r0
 800942e:	697b      	ldr	r3, [r7, #20]
 8009430:	1ad3      	subs	r3, r2, r3
 8009432:	2b64      	cmp	r3, #100	; 0x64
 8009434:	d901      	bls.n	800943a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009436:	2303      	movs	r3, #3
 8009438:	e0d7      	b.n	80095ea <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800943a:	4b0e      	ldr	r3, [pc, #56]	; (8009474 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009442:	2b00      	cmp	r3, #0
 8009444:	d0f0      	beq.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8009446:	69bb      	ldr	r3, [r7, #24]
 8009448:	2b01      	cmp	r3, #1
 800944a:	f040 80cd 	bne.w	80095e8 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800944e:	4b09      	ldr	r3, [pc, #36]	; (8009474 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	4a08      	ldr	r2, [pc, #32]	; (8009474 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009454:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009458:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800945a:	f7fc fbb1 	bl	8005bc0 <HAL_GetTick>
 800945e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009460:	e00a      	b.n	8009478 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009462:	f7fc fbad 	bl	8005bc0 <HAL_GetTick>
 8009466:	4602      	mov	r2, r0
 8009468:	697b      	ldr	r3, [r7, #20]
 800946a:	1ad3      	subs	r3, r2, r3
 800946c:	2b64      	cmp	r3, #100	; 0x64
 800946e:	d903      	bls.n	8009478 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009470:	2303      	movs	r3, #3
 8009472:	e0ba      	b.n	80095ea <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8009474:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009478:	4b5e      	ldr	r3, [pc, #376]	; (80095f4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009480:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009484:	d0ed      	beq.n	8009462 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800948e:	2b00      	cmp	r3, #0
 8009490:	d003      	beq.n	800949a <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009496:	2b00      	cmp	r3, #0
 8009498:	d009      	beq.n	80094ae <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d02e      	beq.n	8009504 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d12a      	bne.n	8009504 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80094ae:	4b51      	ldr	r3, [pc, #324]	; (80095f4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80094b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094b4:	0c1b      	lsrs	r3, r3, #16
 80094b6:	f003 0303 	and.w	r3, r3, #3
 80094ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80094bc:	4b4d      	ldr	r3, [pc, #308]	; (80095f4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80094be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094c2:	0f1b      	lsrs	r3, r3, #28
 80094c4:	f003 0307 	and.w	r3, r3, #7
 80094c8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	695b      	ldr	r3, [r3, #20]
 80094ce:	019a      	lsls	r2, r3, #6
 80094d0:	693b      	ldr	r3, [r7, #16]
 80094d2:	041b      	lsls	r3, r3, #16
 80094d4:	431a      	orrs	r2, r3
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	699b      	ldr	r3, [r3, #24]
 80094da:	061b      	lsls	r3, r3, #24
 80094dc:	431a      	orrs	r2, r3
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	071b      	lsls	r3, r3, #28
 80094e2:	4944      	ldr	r1, [pc, #272]	; (80095f4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80094e4:	4313      	orrs	r3, r2
 80094e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80094ea:	4b42      	ldr	r3, [pc, #264]	; (80095f4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80094ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094f0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094f8:	3b01      	subs	r3, #1
 80094fa:	021b      	lsls	r3, r3, #8
 80094fc:	493d      	ldr	r1, [pc, #244]	; (80095f4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80094fe:	4313      	orrs	r3, r2
 8009500:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800950c:	2b00      	cmp	r3, #0
 800950e:	d022      	beq.n	8009556 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009514:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009518:	d11d      	bne.n	8009556 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800951a:	4b36      	ldr	r3, [pc, #216]	; (80095f4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800951c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009520:	0e1b      	lsrs	r3, r3, #24
 8009522:	f003 030f 	and.w	r3, r3, #15
 8009526:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009528:	4b32      	ldr	r3, [pc, #200]	; (80095f4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800952a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800952e:	0f1b      	lsrs	r3, r3, #28
 8009530:	f003 0307 	and.w	r3, r3, #7
 8009534:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	695b      	ldr	r3, [r3, #20]
 800953a:	019a      	lsls	r2, r3, #6
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	6a1b      	ldr	r3, [r3, #32]
 8009540:	041b      	lsls	r3, r3, #16
 8009542:	431a      	orrs	r2, r3
 8009544:	693b      	ldr	r3, [r7, #16]
 8009546:	061b      	lsls	r3, r3, #24
 8009548:	431a      	orrs	r2, r3
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	071b      	lsls	r3, r3, #28
 800954e:	4929      	ldr	r1, [pc, #164]	; (80095f4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009550:	4313      	orrs	r3, r2
 8009552:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f003 0308 	and.w	r3, r3, #8
 800955e:	2b00      	cmp	r3, #0
 8009560:	d028      	beq.n	80095b4 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009562:	4b24      	ldr	r3, [pc, #144]	; (80095f4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009564:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009568:	0e1b      	lsrs	r3, r3, #24
 800956a:	f003 030f 	and.w	r3, r3, #15
 800956e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009570:	4b20      	ldr	r3, [pc, #128]	; (80095f4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009576:	0c1b      	lsrs	r3, r3, #16
 8009578:	f003 0303 	and.w	r3, r3, #3
 800957c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	695b      	ldr	r3, [r3, #20]
 8009582:	019a      	lsls	r2, r3, #6
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	041b      	lsls	r3, r3, #16
 8009588:	431a      	orrs	r2, r3
 800958a:	693b      	ldr	r3, [r7, #16]
 800958c:	061b      	lsls	r3, r3, #24
 800958e:	431a      	orrs	r2, r3
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	69db      	ldr	r3, [r3, #28]
 8009594:	071b      	lsls	r3, r3, #28
 8009596:	4917      	ldr	r1, [pc, #92]	; (80095f4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009598:	4313      	orrs	r3, r2
 800959a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800959e:	4b15      	ldr	r3, [pc, #84]	; (80095f4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80095a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095ac:	4911      	ldr	r1, [pc, #68]	; (80095f4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80095ae:	4313      	orrs	r3, r2
 80095b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80095b4:	4b0f      	ldr	r3, [pc, #60]	; (80095f4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	4a0e      	ldr	r2, [pc, #56]	; (80095f4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80095ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80095c0:	f7fc fafe 	bl	8005bc0 <HAL_GetTick>
 80095c4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80095c6:	e008      	b.n	80095da <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80095c8:	f7fc fafa 	bl	8005bc0 <HAL_GetTick>
 80095cc:	4602      	mov	r2, r0
 80095ce:	697b      	ldr	r3, [r7, #20]
 80095d0:	1ad3      	subs	r3, r2, r3
 80095d2:	2b64      	cmp	r3, #100	; 0x64
 80095d4:	d901      	bls.n	80095da <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80095d6:	2303      	movs	r3, #3
 80095d8:	e007      	b.n	80095ea <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80095da:	4b06      	ldr	r3, [pc, #24]	; (80095f4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80095e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80095e6:	d1ef      	bne.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 80095e8:	2300      	movs	r3, #0
}
 80095ea:	4618      	mov	r0, r3
 80095ec:	3720      	adds	r7, #32
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bd80      	pop	{r7, pc}
 80095f2:	bf00      	nop
 80095f4:	40023800 	.word	0x40023800

080095f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b084      	sub	sp, #16
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d101      	bne.n	800960a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009606:	2301      	movs	r3, #1
 8009608:	e084      	b.n	8009714 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2200      	movs	r2, #0
 800960e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009616:	b2db      	uxtb	r3, r3
 8009618:	2b00      	cmp	r3, #0
 800961a:	d106      	bne.n	800962a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2200      	movs	r2, #0
 8009620:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	f7fb fd71 	bl	800510c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2202      	movs	r2, #2
 800962e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	681a      	ldr	r2, [r3, #0]
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009640:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	68db      	ldr	r3, [r3, #12]
 8009646:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800964a:	d902      	bls.n	8009652 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800964c:	2300      	movs	r3, #0
 800964e:	60fb      	str	r3, [r7, #12]
 8009650:	e002      	b.n	8009658 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009652:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009656:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	68db      	ldr	r3, [r3, #12]
 800965c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009660:	d007      	beq.n	8009672 <HAL_SPI_Init+0x7a>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	68db      	ldr	r3, [r3, #12]
 8009666:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800966a:	d002      	beq.n	8009672 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2200      	movs	r2, #0
 8009670:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009676:	2b00      	cmp	r3, #0
 8009678:	d10b      	bne.n	8009692 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	68db      	ldr	r3, [r3, #12]
 800967e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009682:	d903      	bls.n	800968c <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2202      	movs	r2, #2
 8009688:	631a      	str	r2, [r3, #48]	; 0x30
 800968a:	e002      	b.n	8009692 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2201      	movs	r2, #1
 8009690:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	685a      	ldr	r2, [r3, #4]
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	689b      	ldr	r3, [r3, #8]
 800969a:	431a      	orrs	r2, r3
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	691b      	ldr	r3, [r3, #16]
 80096a0:	431a      	orrs	r2, r3
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	695b      	ldr	r3, [r3, #20]
 80096a6:	431a      	orrs	r2, r3
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	699b      	ldr	r3, [r3, #24]
 80096ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80096b0:	431a      	orrs	r2, r3
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	69db      	ldr	r3, [r3, #28]
 80096b6:	431a      	orrs	r2, r3
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6a1b      	ldr	r3, [r3, #32]
 80096bc:	ea42 0103 	orr.w	r1, r2, r3
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	430a      	orrs	r2, r1
 80096ca:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	699b      	ldr	r3, [r3, #24]
 80096d0:	0c1b      	lsrs	r3, r3, #16
 80096d2:	f003 0204 	and.w	r2, r3, #4
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096da:	431a      	orrs	r2, r3
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096e0:	431a      	orrs	r2, r3
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	68db      	ldr	r3, [r3, #12]
 80096e6:	ea42 0103 	orr.w	r1, r2, r3
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	68fa      	ldr	r2, [r7, #12]
 80096f0:	430a      	orrs	r2, r1
 80096f2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	69da      	ldr	r2, [r3, #28]
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009702:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2200      	movs	r2, #0
 8009708:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	2201      	movs	r2, #1
 800970e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009712:	2300      	movs	r3, #0
}
 8009714:	4618      	mov	r0, r3
 8009716:	3710      	adds	r7, #16
 8009718:	46bd      	mov	sp, r7
 800971a:	bd80      	pop	{r7, pc}

0800971c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b088      	sub	sp, #32
 8009720:	af00      	add	r7, sp, #0
 8009722:	60f8      	str	r0, [r7, #12]
 8009724:	60b9      	str	r1, [r7, #8]
 8009726:	603b      	str	r3, [r7, #0]
 8009728:	4613      	mov	r3, r2
 800972a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800972c:	2300      	movs	r3, #0
 800972e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009736:	2b01      	cmp	r3, #1
 8009738:	d101      	bne.n	800973e <HAL_SPI_Transmit+0x22>
 800973a:	2302      	movs	r3, #2
 800973c:	e150      	b.n	80099e0 <HAL_SPI_Transmit+0x2c4>
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	2201      	movs	r2, #1
 8009742:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009746:	f7fc fa3b 	bl	8005bc0 <HAL_GetTick>
 800974a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800974c:	88fb      	ldrh	r3, [r7, #6]
 800974e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009756:	b2db      	uxtb	r3, r3
 8009758:	2b01      	cmp	r3, #1
 800975a:	d002      	beq.n	8009762 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800975c:	2302      	movs	r3, #2
 800975e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009760:	e135      	b.n	80099ce <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d002      	beq.n	800976e <HAL_SPI_Transmit+0x52>
 8009768:	88fb      	ldrh	r3, [r7, #6]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d102      	bne.n	8009774 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800976e:	2301      	movs	r3, #1
 8009770:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009772:	e12c      	b.n	80099ce <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	2203      	movs	r2, #3
 8009778:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	2200      	movs	r2, #0
 8009780:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	68ba      	ldr	r2, [r7, #8]
 8009786:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	88fa      	ldrh	r2, [r7, #6]
 800978c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	88fa      	ldrh	r2, [r7, #6]
 8009792:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	2200      	movs	r2, #0
 8009798:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	2200      	movs	r2, #0
 800979e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	2200      	movs	r2, #0
 80097a6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	2200      	movs	r2, #0
 80097ae:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	2200      	movs	r2, #0
 80097b4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	689b      	ldr	r3, [r3, #8]
 80097ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80097be:	d107      	bne.n	80097d0 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	681a      	ldr	r2, [r3, #0]
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80097ce:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097da:	2b40      	cmp	r3, #64	; 0x40
 80097dc:	d007      	beq.n	80097ee <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	681a      	ldr	r2, [r3, #0]
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80097ec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	68db      	ldr	r3, [r3, #12]
 80097f2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80097f6:	d94b      	bls.n	8009890 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	685b      	ldr	r3, [r3, #4]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d002      	beq.n	8009806 <HAL_SPI_Transmit+0xea>
 8009800:	8afb      	ldrh	r3, [r7, #22]
 8009802:	2b01      	cmp	r3, #1
 8009804:	d13e      	bne.n	8009884 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800980a:	881a      	ldrh	r2, [r3, #0]
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009816:	1c9a      	adds	r2, r3, #2
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009820:	b29b      	uxth	r3, r3
 8009822:	3b01      	subs	r3, #1
 8009824:	b29a      	uxth	r2, r3
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800982a:	e02b      	b.n	8009884 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	689b      	ldr	r3, [r3, #8]
 8009832:	f003 0302 	and.w	r3, r3, #2
 8009836:	2b02      	cmp	r3, #2
 8009838:	d112      	bne.n	8009860 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800983e:	881a      	ldrh	r2, [r3, #0]
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800984a:	1c9a      	adds	r2, r3, #2
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009854:	b29b      	uxth	r3, r3
 8009856:	3b01      	subs	r3, #1
 8009858:	b29a      	uxth	r2, r3
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800985e:	e011      	b.n	8009884 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009860:	f7fc f9ae 	bl	8005bc0 <HAL_GetTick>
 8009864:	4602      	mov	r2, r0
 8009866:	69bb      	ldr	r3, [r7, #24]
 8009868:	1ad3      	subs	r3, r2, r3
 800986a:	683a      	ldr	r2, [r7, #0]
 800986c:	429a      	cmp	r2, r3
 800986e:	d803      	bhi.n	8009878 <HAL_SPI_Transmit+0x15c>
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009876:	d102      	bne.n	800987e <HAL_SPI_Transmit+0x162>
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d102      	bne.n	8009884 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 800987e:	2303      	movs	r3, #3
 8009880:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009882:	e0a4      	b.n	80099ce <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009888:	b29b      	uxth	r3, r3
 800988a:	2b00      	cmp	r3, #0
 800988c:	d1ce      	bne.n	800982c <HAL_SPI_Transmit+0x110>
 800988e:	e07c      	b.n	800998a <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	685b      	ldr	r3, [r3, #4]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d002      	beq.n	800989e <HAL_SPI_Transmit+0x182>
 8009898:	8afb      	ldrh	r3, [r7, #22]
 800989a:	2b01      	cmp	r3, #1
 800989c:	d170      	bne.n	8009980 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80098a2:	b29b      	uxth	r3, r3
 80098a4:	2b01      	cmp	r3, #1
 80098a6:	d912      	bls.n	80098ce <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098ac:	881a      	ldrh	r2, [r3, #0]
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098b8:	1c9a      	adds	r2, r3, #2
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80098c2:	b29b      	uxth	r3, r3
 80098c4:	3b02      	subs	r3, #2
 80098c6:	b29a      	uxth	r2, r3
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80098cc:	e058      	b.n	8009980 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	330c      	adds	r3, #12
 80098d8:	7812      	ldrb	r2, [r2, #0]
 80098da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098e0:	1c5a      	adds	r2, r3, #1
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80098ea:	b29b      	uxth	r3, r3
 80098ec:	3b01      	subs	r3, #1
 80098ee:	b29a      	uxth	r2, r3
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80098f4:	e044      	b.n	8009980 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	689b      	ldr	r3, [r3, #8]
 80098fc:	f003 0302 	and.w	r3, r3, #2
 8009900:	2b02      	cmp	r3, #2
 8009902:	d12b      	bne.n	800995c <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009908:	b29b      	uxth	r3, r3
 800990a:	2b01      	cmp	r3, #1
 800990c:	d912      	bls.n	8009934 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009912:	881a      	ldrh	r2, [r3, #0]
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800991e:	1c9a      	adds	r2, r3, #2
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009928:	b29b      	uxth	r3, r3
 800992a:	3b02      	subs	r3, #2
 800992c:	b29a      	uxth	r2, r3
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009932:	e025      	b.n	8009980 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	330c      	adds	r3, #12
 800993e:	7812      	ldrb	r2, [r2, #0]
 8009940:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009946:	1c5a      	adds	r2, r3, #1
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009950:	b29b      	uxth	r3, r3
 8009952:	3b01      	subs	r3, #1
 8009954:	b29a      	uxth	r2, r3
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	87da      	strh	r2, [r3, #62]	; 0x3e
 800995a:	e011      	b.n	8009980 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800995c:	f7fc f930 	bl	8005bc0 <HAL_GetTick>
 8009960:	4602      	mov	r2, r0
 8009962:	69bb      	ldr	r3, [r7, #24]
 8009964:	1ad3      	subs	r3, r2, r3
 8009966:	683a      	ldr	r2, [r7, #0]
 8009968:	429a      	cmp	r2, r3
 800996a:	d803      	bhi.n	8009974 <HAL_SPI_Transmit+0x258>
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009972:	d102      	bne.n	800997a <HAL_SPI_Transmit+0x25e>
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d102      	bne.n	8009980 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 800997a:	2303      	movs	r3, #3
 800997c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800997e:	e026      	b.n	80099ce <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009984:	b29b      	uxth	r3, r3
 8009986:	2b00      	cmp	r3, #0
 8009988:	d1b5      	bne.n	80098f6 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800998a:	69ba      	ldr	r2, [r7, #24]
 800998c:	6839      	ldr	r1, [r7, #0]
 800998e:	68f8      	ldr	r0, [r7, #12]
 8009990:	f000 fba2 	bl	800a0d8 <SPI_EndRxTxTransaction>
 8009994:	4603      	mov	r3, r0
 8009996:	2b00      	cmp	r3, #0
 8009998:	d002      	beq.n	80099a0 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	2220      	movs	r2, #32
 800999e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	689b      	ldr	r3, [r3, #8]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d10a      	bne.n	80099be <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80099a8:	2300      	movs	r3, #0
 80099aa:	613b      	str	r3, [r7, #16]
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	68db      	ldr	r3, [r3, #12]
 80099b2:	613b      	str	r3, [r7, #16]
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	689b      	ldr	r3, [r3, #8]
 80099ba:	613b      	str	r3, [r7, #16]
 80099bc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d002      	beq.n	80099cc <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 80099c6:	2301      	movs	r3, #1
 80099c8:	77fb      	strb	r3, [r7, #31]
 80099ca:	e000      	b.n	80099ce <HAL_SPI_Transmit+0x2b2>
  }

error:
 80099cc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	2201      	movs	r2, #1
 80099d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	2200      	movs	r2, #0
 80099da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80099de:	7ffb      	ldrb	r3, [r7, #31]
}
 80099e0:	4618      	mov	r0, r3
 80099e2:	3720      	adds	r7, #32
 80099e4:	46bd      	mov	sp, r7
 80099e6:	bd80      	pop	{r7, pc}

080099e8 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b086      	sub	sp, #24
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	60f8      	str	r0, [r7, #12]
 80099f0:	60b9      	str	r1, [r7, #8]
 80099f2:	4613      	mov	r3, r2
 80099f4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80099f6:	2300      	movs	r3, #0
 80099f8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009a00:	2b01      	cmp	r3, #1
 8009a02:	d101      	bne.n	8009a08 <HAL_SPI_Transmit_DMA+0x20>
 8009a04:	2302      	movs	r3, #2
 8009a06:	e0d0      	b.n	8009baa <HAL_SPI_Transmit_DMA+0x1c2>
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	2201      	movs	r2, #1
 8009a0c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009a16:	b2db      	uxtb	r3, r3
 8009a18:	2b01      	cmp	r3, #1
 8009a1a:	d002      	beq.n	8009a22 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8009a1c:	2302      	movs	r3, #2
 8009a1e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009a20:	e0be      	b.n	8009ba0 <HAL_SPI_Transmit_DMA+0x1b8>
  }

  if ((pData == NULL) || (Size == 0U))
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d002      	beq.n	8009a2e <HAL_SPI_Transmit_DMA+0x46>
 8009a28:	88fb      	ldrh	r3, [r7, #6]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d102      	bne.n	8009a34 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8009a2e:	2301      	movs	r3, #1
 8009a30:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009a32:	e0b5      	b.n	8009ba0 <HAL_SPI_Transmit_DMA+0x1b8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	2203      	movs	r2, #3
 8009a38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	2200      	movs	r2, #0
 8009a40:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	68ba      	ldr	r2, [r7, #8]
 8009a46:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	88fa      	ldrh	r2, [r7, #6]
 8009a4c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	88fa      	ldrh	r2, [r7, #6]
 8009a52:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	2200      	movs	r2, #0
 8009a58:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	2200      	movs	r2, #0
 8009a64:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	2200      	movs	r2, #0
 8009a6a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	2200      	movs	r2, #0
 8009a72:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	689b      	ldr	r3, [r3, #8]
 8009a7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a7e:	d107      	bne.n	8009a90 <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	681a      	ldr	r2, [r3, #0]
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009a8e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a94:	4a47      	ldr	r2, [pc, #284]	; (8009bb4 <HAL_SPI_Transmit_DMA+0x1cc>)
 8009a96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a9c:	4a46      	ldr	r2, [pc, #280]	; (8009bb8 <HAL_SPI_Transmit_DMA+0x1d0>)
 8009a9e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009aa4:	4a45      	ldr	r2, [pc, #276]	; (8009bbc <HAL_SPI_Transmit_DMA+0x1d4>)
 8009aa6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009aac:	2200      	movs	r2, #0
 8009aae:	651a      	str	r2, [r3, #80]	; 0x50

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	685a      	ldr	r2, [r3, #4]
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009abe:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	68db      	ldr	r3, [r3, #12]
 8009ac4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009ac8:	d82d      	bhi.n	8009b26 <HAL_SPI_Transmit_DMA+0x13e>
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ace:	699b      	ldr	r3, [r3, #24]
 8009ad0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ad4:	d127      	bne.n	8009b26 <HAL_SPI_Transmit_DMA+0x13e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ada:	b29b      	uxth	r3, r3
 8009adc:	f003 0301 	and.w	r3, r3, #1
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d10f      	bne.n	8009b04 <HAL_SPI_Transmit_DMA+0x11c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	685a      	ldr	r2, [r3, #4]
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009af2:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009af8:	b29b      	uxth	r3, r3
 8009afa:	085b      	lsrs	r3, r3, #1
 8009afc:	b29a      	uxth	r2, r3
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009b02:	e010      	b.n	8009b26 <HAL_SPI_Transmit_DMA+0x13e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	685a      	ldr	r2, [r3, #4]
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009b12:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b18:	b29b      	uxth	r3, r3
 8009b1a:	085b      	lsrs	r3, r3, #1
 8009b1c:	b29b      	uxth	r3, r3
 8009b1e:	3301      	adds	r3, #1
 8009b20:	b29a      	uxth	r2, r3
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b2e:	4619      	mov	r1, r3
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	330c      	adds	r3, #12
 8009b36:	461a      	mov	r2, r3
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b3c:	b29b      	uxth	r3, r3
 8009b3e:	f7fc ff89 	bl	8006a54 <HAL_DMA_Start_IT>
 8009b42:	4603      	mov	r3, r0
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d00c      	beq.n	8009b62 <HAL_SPI_Transmit_DMA+0x17a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b4c:	f043 0210 	orr.w	r2, r3, #16
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8009b54:	2301      	movs	r3, #1
 8009b56:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	2201      	movs	r2, #1
 8009b5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8009b60:	e01e      	b.n	8009ba0 <HAL_SPI_Transmit_DMA+0x1b8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b6c:	2b40      	cmp	r3, #64	; 0x40
 8009b6e:	d007      	beq.n	8009b80 <HAL_SPI_Transmit_DMA+0x198>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	681a      	ldr	r2, [r3, #0]
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009b7e:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	685a      	ldr	r2, [r3, #4]
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f042 0220 	orr.w	r2, r2, #32
 8009b8e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	685a      	ldr	r2, [r3, #4]
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	f042 0202 	orr.w	r2, r2, #2
 8009b9e:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009ba8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009baa:	4618      	mov	r0, r3
 8009bac:	3718      	adds	r7, #24
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	bd80      	pop	{r7, pc}
 8009bb2:	bf00      	nop
 8009bb4:	08009ea5 	.word	0x08009ea5
 8009bb8:	08009dfd 	.word	0x08009dfd
 8009bbc:	08009ec1 	.word	0x08009ec1

08009bc0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b088      	sub	sp, #32
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	685b      	ldr	r3, [r3, #4]
 8009bce:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	689b      	ldr	r3, [r3, #8]
 8009bd6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009bd8:	69bb      	ldr	r3, [r7, #24]
 8009bda:	099b      	lsrs	r3, r3, #6
 8009bdc:	f003 0301 	and.w	r3, r3, #1
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d10f      	bne.n	8009c04 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009be4:	69bb      	ldr	r3, [r7, #24]
 8009be6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d00a      	beq.n	8009c04 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009bee:	69fb      	ldr	r3, [r7, #28]
 8009bf0:	099b      	lsrs	r3, r3, #6
 8009bf2:	f003 0301 	and.w	r3, r3, #1
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d004      	beq.n	8009c04 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	4798      	blx	r3
    return;
 8009c02:	e0d8      	b.n	8009db6 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8009c04:	69bb      	ldr	r3, [r7, #24]
 8009c06:	085b      	lsrs	r3, r3, #1
 8009c08:	f003 0301 	and.w	r3, r3, #1
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d00a      	beq.n	8009c26 <HAL_SPI_IRQHandler+0x66>
 8009c10:	69fb      	ldr	r3, [r7, #28]
 8009c12:	09db      	lsrs	r3, r3, #7
 8009c14:	f003 0301 	and.w	r3, r3, #1
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d004      	beq.n	8009c26 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	4798      	blx	r3
    return;
 8009c24:	e0c7      	b.n	8009db6 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8009c26:	69bb      	ldr	r3, [r7, #24]
 8009c28:	095b      	lsrs	r3, r3, #5
 8009c2a:	f003 0301 	and.w	r3, r3, #1
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d10c      	bne.n	8009c4c <HAL_SPI_IRQHandler+0x8c>
 8009c32:	69bb      	ldr	r3, [r7, #24]
 8009c34:	099b      	lsrs	r3, r3, #6
 8009c36:	f003 0301 	and.w	r3, r3, #1
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d106      	bne.n	8009c4c <HAL_SPI_IRQHandler+0x8c>
 8009c3e:	69bb      	ldr	r3, [r7, #24]
 8009c40:	0a1b      	lsrs	r3, r3, #8
 8009c42:	f003 0301 	and.w	r3, r3, #1
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	f000 80b5 	beq.w	8009db6 <HAL_SPI_IRQHandler+0x1f6>
 8009c4c:	69fb      	ldr	r3, [r7, #28]
 8009c4e:	095b      	lsrs	r3, r3, #5
 8009c50:	f003 0301 	and.w	r3, r3, #1
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	f000 80ae 	beq.w	8009db6 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009c5a:	69bb      	ldr	r3, [r7, #24]
 8009c5c:	099b      	lsrs	r3, r3, #6
 8009c5e:	f003 0301 	and.w	r3, r3, #1
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d023      	beq.n	8009cae <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009c6c:	b2db      	uxtb	r3, r3
 8009c6e:	2b03      	cmp	r3, #3
 8009c70:	d011      	beq.n	8009c96 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c76:	f043 0204 	orr.w	r2, r3, #4
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009c7e:	2300      	movs	r3, #0
 8009c80:	617b      	str	r3, [r7, #20]
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	68db      	ldr	r3, [r3, #12]
 8009c88:	617b      	str	r3, [r7, #20]
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	689b      	ldr	r3, [r3, #8]
 8009c90:	617b      	str	r3, [r7, #20]
 8009c92:	697b      	ldr	r3, [r7, #20]
 8009c94:	e00b      	b.n	8009cae <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009c96:	2300      	movs	r3, #0
 8009c98:	613b      	str	r3, [r7, #16]
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	68db      	ldr	r3, [r3, #12]
 8009ca0:	613b      	str	r3, [r7, #16]
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	689b      	ldr	r3, [r3, #8]
 8009ca8:	613b      	str	r3, [r7, #16]
 8009caa:	693b      	ldr	r3, [r7, #16]
        return;
 8009cac:	e083      	b.n	8009db6 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8009cae:	69bb      	ldr	r3, [r7, #24]
 8009cb0:	095b      	lsrs	r3, r3, #5
 8009cb2:	f003 0301 	and.w	r3, r3, #1
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d014      	beq.n	8009ce4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009cbe:	f043 0201 	orr.w	r2, r3, #1
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	60fb      	str	r3, [r7, #12]
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	689b      	ldr	r3, [r3, #8]
 8009cd0:	60fb      	str	r3, [r7, #12]
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	681a      	ldr	r2, [r3, #0]
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009ce0:	601a      	str	r2, [r3, #0]
 8009ce2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8009ce4:	69bb      	ldr	r3, [r7, #24]
 8009ce6:	0a1b      	lsrs	r3, r3, #8
 8009ce8:	f003 0301 	and.w	r3, r3, #1
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d00c      	beq.n	8009d0a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009cf4:	f043 0208 	orr.w	r2, r3, #8
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	60bb      	str	r3, [r7, #8]
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	689b      	ldr	r3, [r3, #8]
 8009d06:	60bb      	str	r3, [r7, #8]
 8009d08:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d050      	beq.n	8009db4 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	685a      	ldr	r2, [r3, #4]
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009d20:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2201      	movs	r2, #1
 8009d26:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009d2a:	69fb      	ldr	r3, [r7, #28]
 8009d2c:	f003 0302 	and.w	r3, r3, #2
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d104      	bne.n	8009d3e <HAL_SPI_IRQHandler+0x17e>
 8009d34:	69fb      	ldr	r3, [r7, #28]
 8009d36:	f003 0301 	and.w	r3, r3, #1
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d034      	beq.n	8009da8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	685a      	ldr	r2, [r3, #4]
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f022 0203 	bic.w	r2, r2, #3
 8009d4c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d011      	beq.n	8009d7a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d5a:	4a18      	ldr	r2, [pc, #96]	; (8009dbc <HAL_SPI_IRQHandler+0x1fc>)
 8009d5c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d62:	4618      	mov	r0, r3
 8009d64:	f7fc fed6 	bl	8006b14 <HAL_DMA_Abort_IT>
 8009d68:	4603      	mov	r3, r0
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d005      	beq.n	8009d7a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d72:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d016      	beq.n	8009db0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d86:	4a0d      	ldr	r2, [pc, #52]	; (8009dbc <HAL_SPI_IRQHandler+0x1fc>)
 8009d88:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f7fc fec0 	bl	8006b14 <HAL_DMA_Abort_IT>
 8009d94:	4603      	mov	r3, r0
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d00a      	beq.n	8009db0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d9e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8009da6:	e003      	b.n	8009db0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	f000 f81d 	bl	8009de8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009dae:	e000      	b.n	8009db2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8009db0:	bf00      	nop
    return;
 8009db2:	bf00      	nop
 8009db4:	bf00      	nop
  }
}
 8009db6:	3720      	adds	r7, #32
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bd80      	pop	{r7, pc}
 8009dbc:	08009f01 	.word	0x08009f01

08009dc0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	b083      	sub	sp, #12
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8009dc8:	bf00      	nop
 8009dca:	370c      	adds	r7, #12
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd2:	4770      	bx	lr

08009dd4 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	b083      	sub	sp, #12
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8009ddc:	bf00      	nop
 8009dde:	370c      	adds	r7, #12
 8009de0:	46bd      	mov	sp, r7
 8009de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de6:	4770      	bx	lr

08009de8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009de8:	b480      	push	{r7}
 8009dea:	b083      	sub	sp, #12
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009df0:	bf00      	nop
 8009df2:	370c      	adds	r7, #12
 8009df4:	46bd      	mov	sp, r7
 8009df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfa:	4770      	bx	lr

08009dfc <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b086      	sub	sp, #24
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e08:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009e0a:	f7fb fed9 	bl	8005bc0 <HAL_GetTick>
 8009e0e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e1e:	d03b      	beq.n	8009e98 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009e20:	697b      	ldr	r3, [r7, #20]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	685a      	ldr	r2, [r3, #4]
 8009e26:	697b      	ldr	r3, [r7, #20]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	f022 0220 	bic.w	r2, r2, #32
 8009e2e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8009e30:	697b      	ldr	r3, [r7, #20]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	685a      	ldr	r2, [r3, #4]
 8009e36:	697b      	ldr	r3, [r7, #20]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	f022 0202 	bic.w	r2, r2, #2
 8009e3e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009e40:	693a      	ldr	r2, [r7, #16]
 8009e42:	2164      	movs	r1, #100	; 0x64
 8009e44:	6978      	ldr	r0, [r7, #20]
 8009e46:	f000 f947 	bl	800a0d8 <SPI_EndRxTxTransaction>
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d005      	beq.n	8009e5c <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009e50:	697b      	ldr	r3, [r7, #20]
 8009e52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e54:	f043 0220 	orr.w	r2, r3, #32
 8009e58:	697b      	ldr	r3, [r7, #20]
 8009e5a:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009e5c:	697b      	ldr	r3, [r7, #20]
 8009e5e:	689b      	ldr	r3, [r3, #8]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d10a      	bne.n	8009e7a <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009e64:	2300      	movs	r3, #0
 8009e66:	60fb      	str	r3, [r7, #12]
 8009e68:	697b      	ldr	r3, [r7, #20]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	68db      	ldr	r3, [r3, #12]
 8009e6e:	60fb      	str	r3, [r7, #12]
 8009e70:	697b      	ldr	r3, [r7, #20]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	689b      	ldr	r3, [r3, #8]
 8009e76:	60fb      	str	r3, [r7, #12]
 8009e78:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8009e7a:	697b      	ldr	r3, [r7, #20]
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8009e80:	697b      	ldr	r3, [r7, #20]
 8009e82:	2201      	movs	r2, #1
 8009e84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009e88:	697b      	ldr	r3, [r7, #20]
 8009e8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d003      	beq.n	8009e98 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8009e90:	6978      	ldr	r0, [r7, #20]
 8009e92:	f7ff ffa9 	bl	8009de8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009e96:	e002      	b.n	8009e9e <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8009e98:	6978      	ldr	r0, [r7, #20]
 8009e9a:	f7ff ff91 	bl	8009dc0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009e9e:	3718      	adds	r7, #24
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	bd80      	pop	{r7, pc}

08009ea4 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b084      	sub	sp, #16
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eb0:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8009eb2:	68f8      	ldr	r0, [r7, #12]
 8009eb4:	f7ff ff8e 	bl	8009dd4 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009eb8:	bf00      	nop
 8009eba:	3710      	adds	r7, #16
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bd80      	pop	{r7, pc}

08009ec0 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b084      	sub	sp, #16
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ecc:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	685a      	ldr	r2, [r3, #4]
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	f022 0203 	bic.w	r2, r2, #3
 8009edc:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ee2:	f043 0210 	orr.w	r2, r3, #16
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	2201      	movs	r2, #1
 8009eee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009ef2:	68f8      	ldr	r0, [r7, #12]
 8009ef4:	f7ff ff78 	bl	8009de8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009ef8:	bf00      	nop
 8009efa:	3710      	adds	r7, #16
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd80      	pop	{r7, pc}

08009f00 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b084      	sub	sp, #16
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f0c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	2200      	movs	r2, #0
 8009f12:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	2200      	movs	r2, #0
 8009f1a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009f1c:	68f8      	ldr	r0, [r7, #12]
 8009f1e:	f7ff ff63 	bl	8009de8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009f22:	bf00      	nop
 8009f24:	3710      	adds	r7, #16
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd80      	pop	{r7, pc}

08009f2a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009f2a:	b580      	push	{r7, lr}
 8009f2c:	b084      	sub	sp, #16
 8009f2e:	af00      	add	r7, sp, #0
 8009f30:	60f8      	str	r0, [r7, #12]
 8009f32:	60b9      	str	r1, [r7, #8]
 8009f34:	603b      	str	r3, [r7, #0]
 8009f36:	4613      	mov	r3, r2
 8009f38:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009f3a:	e04c      	b.n	8009fd6 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f42:	d048      	beq.n	8009fd6 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8009f44:	f7fb fe3c 	bl	8005bc0 <HAL_GetTick>
 8009f48:	4602      	mov	r2, r0
 8009f4a:	69bb      	ldr	r3, [r7, #24]
 8009f4c:	1ad3      	subs	r3, r2, r3
 8009f4e:	683a      	ldr	r2, [r7, #0]
 8009f50:	429a      	cmp	r2, r3
 8009f52:	d902      	bls.n	8009f5a <SPI_WaitFlagStateUntilTimeout+0x30>
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d13d      	bne.n	8009fd6 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	685a      	ldr	r2, [r3, #4]
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009f68:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	685b      	ldr	r3, [r3, #4]
 8009f6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009f72:	d111      	bne.n	8009f98 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	689b      	ldr	r3, [r3, #8]
 8009f78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009f7c:	d004      	beq.n	8009f88 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	689b      	ldr	r3, [r3, #8]
 8009f82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f86:	d107      	bne.n	8009f98 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	681a      	ldr	r2, [r3, #0]
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009f96:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009fa0:	d10f      	bne.n	8009fc2 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	681a      	ldr	r2, [r3, #0]
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009fb0:	601a      	str	r2, [r3, #0]
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	681a      	ldr	r2, [r3, #0]
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009fc0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	2201      	movs	r2, #1
 8009fc6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	2200      	movs	r2, #0
 8009fce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009fd2:	2303      	movs	r3, #3
 8009fd4:	e00f      	b.n	8009ff6 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	689a      	ldr	r2, [r3, #8]
 8009fdc:	68bb      	ldr	r3, [r7, #8]
 8009fde:	4013      	ands	r3, r2
 8009fe0:	68ba      	ldr	r2, [r7, #8]
 8009fe2:	429a      	cmp	r2, r3
 8009fe4:	bf0c      	ite	eq
 8009fe6:	2301      	moveq	r3, #1
 8009fe8:	2300      	movne	r3, #0
 8009fea:	b2db      	uxtb	r3, r3
 8009fec:	461a      	mov	r2, r3
 8009fee:	79fb      	ldrb	r3, [r7, #7]
 8009ff0:	429a      	cmp	r2, r3
 8009ff2:	d1a3      	bne.n	8009f3c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8009ff4:	2300      	movs	r3, #0
}
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	3710      	adds	r7, #16
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bd80      	pop	{r7, pc}

08009ffe <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009ffe:	b580      	push	{r7, lr}
 800a000:	b084      	sub	sp, #16
 800a002:	af00      	add	r7, sp, #0
 800a004:	60f8      	str	r0, [r7, #12]
 800a006:	60b9      	str	r1, [r7, #8]
 800a008:	607a      	str	r2, [r7, #4]
 800a00a:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800a00c:	e057      	b.n	800a0be <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a00e:	68bb      	ldr	r3, [r7, #8]
 800a010:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800a014:	d106      	bne.n	800a024 <SPI_WaitFifoStateUntilTimeout+0x26>
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d103      	bne.n	800a024 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	330c      	adds	r3, #12
 800a022:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a02a:	d048      	beq.n	800a0be <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800a02c:	f7fb fdc8 	bl	8005bc0 <HAL_GetTick>
 800a030:	4602      	mov	r2, r0
 800a032:	69bb      	ldr	r3, [r7, #24]
 800a034:	1ad3      	subs	r3, r2, r3
 800a036:	683a      	ldr	r2, [r7, #0]
 800a038:	429a      	cmp	r2, r3
 800a03a:	d902      	bls.n	800a042 <SPI_WaitFifoStateUntilTimeout+0x44>
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d13d      	bne.n	800a0be <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	685a      	ldr	r2, [r3, #4]
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a050:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	685b      	ldr	r3, [r3, #4]
 800a056:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a05a:	d111      	bne.n	800a080 <SPI_WaitFifoStateUntilTimeout+0x82>
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	689b      	ldr	r3, [r3, #8]
 800a060:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a064:	d004      	beq.n	800a070 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	689b      	ldr	r3, [r3, #8]
 800a06a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a06e:	d107      	bne.n	800a080 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	681a      	ldr	r2, [r3, #0]
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a07e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a084:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a088:	d10f      	bne.n	800a0aa <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	681a      	ldr	r2, [r3, #0]
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a098:	601a      	str	r2, [r3, #0]
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	681a      	ldr	r2, [r3, #0]
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a0a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	2201      	movs	r2, #1
 800a0ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800a0ba:	2303      	movs	r3, #3
 800a0bc:	e008      	b.n	800a0d0 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	689a      	ldr	r2, [r3, #8]
 800a0c4:	68bb      	ldr	r3, [r7, #8]
 800a0c6:	4013      	ands	r3, r2
 800a0c8:	687a      	ldr	r2, [r7, #4]
 800a0ca:	429a      	cmp	r2, r3
 800a0cc:	d19f      	bne.n	800a00e <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800a0ce:	2300      	movs	r3, #0
}
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	3710      	adds	r7, #16
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bd80      	pop	{r7, pc}

0800a0d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b086      	sub	sp, #24
 800a0dc:	af02      	add	r7, sp, #8
 800a0de:	60f8      	str	r0, [r7, #12]
 800a0e0:	60b9      	str	r1, [r7, #8]
 800a0e2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	9300      	str	r3, [sp, #0]
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800a0f0:	68f8      	ldr	r0, [r7, #12]
 800a0f2:	f7ff ff84 	bl	8009ffe <SPI_WaitFifoStateUntilTimeout>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d007      	beq.n	800a10c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a100:	f043 0220 	orr.w	r2, r3, #32
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a108:	2303      	movs	r3, #3
 800a10a:	e027      	b.n	800a15c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	9300      	str	r3, [sp, #0]
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	2200      	movs	r2, #0
 800a114:	2180      	movs	r1, #128	; 0x80
 800a116:	68f8      	ldr	r0, [r7, #12]
 800a118:	f7ff ff07 	bl	8009f2a <SPI_WaitFlagStateUntilTimeout>
 800a11c:	4603      	mov	r3, r0
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d007      	beq.n	800a132 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a126:	f043 0220 	orr.w	r2, r3, #32
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a12e:	2303      	movs	r3, #3
 800a130:	e014      	b.n	800a15c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	9300      	str	r3, [sp, #0]
 800a136:	68bb      	ldr	r3, [r7, #8]
 800a138:	2200      	movs	r2, #0
 800a13a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800a13e:	68f8      	ldr	r0, [r7, #12]
 800a140:	f7ff ff5d 	bl	8009ffe <SPI_WaitFifoStateUntilTimeout>
 800a144:	4603      	mov	r3, r0
 800a146:	2b00      	cmp	r3, #0
 800a148:	d007      	beq.n	800a15a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a14e:	f043 0220 	orr.w	r2, r3, #32
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a156:	2303      	movs	r3, #3
 800a158:	e000      	b.n	800a15c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a15a:	2300      	movs	r3, #0
}
 800a15c:	4618      	mov	r0, r3
 800a15e:	3710      	adds	r7, #16
 800a160:	46bd      	mov	sp, r7
 800a162:	bd80      	pop	{r7, pc}

0800a164 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b082      	sub	sp, #8
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d101      	bne.n	800a176 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a172:	2301      	movs	r3, #1
 800a174:	e01d      	b.n	800a1b2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a17c:	b2db      	uxtb	r3, r3
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d106      	bne.n	800a190 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2200      	movs	r2, #0
 800a186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	f7fb f930 	bl	80053f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2202      	movs	r2, #2
 800a194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681a      	ldr	r2, [r3, #0]
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	3304      	adds	r3, #4
 800a1a0:	4619      	mov	r1, r3
 800a1a2:	4610      	mov	r0, r2
 800a1a4:	f000 fa36 	bl	800a614 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2201      	movs	r2, #1
 800a1ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a1b0:	2300      	movs	r3, #0
}
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	3708      	adds	r7, #8
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}
	...

0800a1bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a1bc:	b480      	push	{r7}
 800a1be:	b085      	sub	sp, #20
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	68da      	ldr	r2, [r3, #12]
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	f042 0201 	orr.w	r2, r2, #1
 800a1d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	689a      	ldr	r2, [r3, #8]
 800a1da:	4b0c      	ldr	r3, [pc, #48]	; (800a20c <HAL_TIM_Base_Start_IT+0x50>)
 800a1dc:	4013      	ands	r3, r2
 800a1de:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	2b06      	cmp	r3, #6
 800a1e4:	d00b      	beq.n	800a1fe <HAL_TIM_Base_Start_IT+0x42>
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a1ec:	d007      	beq.n	800a1fe <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	681a      	ldr	r2, [r3, #0]
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	f042 0201 	orr.w	r2, r2, #1
 800a1fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a1fe:	2300      	movs	r3, #0
}
 800a200:	4618      	mov	r0, r3
 800a202:	3714      	adds	r7, #20
 800a204:	46bd      	mov	sp, r7
 800a206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20a:	4770      	bx	lr
 800a20c:	00010007 	.word	0x00010007

0800a210 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b082      	sub	sp, #8
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	691b      	ldr	r3, [r3, #16]
 800a21e:	f003 0302 	and.w	r3, r3, #2
 800a222:	2b02      	cmp	r3, #2
 800a224:	d122      	bne.n	800a26c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	68db      	ldr	r3, [r3, #12]
 800a22c:	f003 0302 	and.w	r3, r3, #2
 800a230:	2b02      	cmp	r3, #2
 800a232:	d11b      	bne.n	800a26c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	f06f 0202 	mvn.w	r2, #2
 800a23c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2201      	movs	r2, #1
 800a242:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	699b      	ldr	r3, [r3, #24]
 800a24a:	f003 0303 	and.w	r3, r3, #3
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d003      	beq.n	800a25a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	f000 f9c0 	bl	800a5d8 <HAL_TIM_IC_CaptureCallback>
 800a258:	e005      	b.n	800a266 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	f000 f9b2 	bl	800a5c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a260:	6878      	ldr	r0, [r7, #4]
 800a262:	f000 f9c3 	bl	800a5ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2200      	movs	r2, #0
 800a26a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	691b      	ldr	r3, [r3, #16]
 800a272:	f003 0304 	and.w	r3, r3, #4
 800a276:	2b04      	cmp	r3, #4
 800a278:	d122      	bne.n	800a2c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	68db      	ldr	r3, [r3, #12]
 800a280:	f003 0304 	and.w	r3, r3, #4
 800a284:	2b04      	cmp	r3, #4
 800a286:	d11b      	bne.n	800a2c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	f06f 0204 	mvn.w	r2, #4
 800a290:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2202      	movs	r2, #2
 800a296:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	699b      	ldr	r3, [r3, #24]
 800a29e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d003      	beq.n	800a2ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	f000 f996 	bl	800a5d8 <HAL_TIM_IC_CaptureCallback>
 800a2ac:	e005      	b.n	800a2ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	f000 f988 	bl	800a5c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a2b4:	6878      	ldr	r0, [r7, #4]
 800a2b6:	f000 f999 	bl	800a5ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2200      	movs	r2, #0
 800a2be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	691b      	ldr	r3, [r3, #16]
 800a2c6:	f003 0308 	and.w	r3, r3, #8
 800a2ca:	2b08      	cmp	r3, #8
 800a2cc:	d122      	bne.n	800a314 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	68db      	ldr	r3, [r3, #12]
 800a2d4:	f003 0308 	and.w	r3, r3, #8
 800a2d8:	2b08      	cmp	r3, #8
 800a2da:	d11b      	bne.n	800a314 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	f06f 0208 	mvn.w	r2, #8
 800a2e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	2204      	movs	r2, #4
 800a2ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	69db      	ldr	r3, [r3, #28]
 800a2f2:	f003 0303 	and.w	r3, r3, #3
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d003      	beq.n	800a302 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a2fa:	6878      	ldr	r0, [r7, #4]
 800a2fc:	f000 f96c 	bl	800a5d8 <HAL_TIM_IC_CaptureCallback>
 800a300:	e005      	b.n	800a30e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a302:	6878      	ldr	r0, [r7, #4]
 800a304:	f000 f95e 	bl	800a5c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	f000 f96f 	bl	800a5ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2200      	movs	r2, #0
 800a312:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	691b      	ldr	r3, [r3, #16]
 800a31a:	f003 0310 	and.w	r3, r3, #16
 800a31e:	2b10      	cmp	r3, #16
 800a320:	d122      	bne.n	800a368 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	68db      	ldr	r3, [r3, #12]
 800a328:	f003 0310 	and.w	r3, r3, #16
 800a32c:	2b10      	cmp	r3, #16
 800a32e:	d11b      	bne.n	800a368 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	f06f 0210 	mvn.w	r2, #16
 800a338:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	2208      	movs	r2, #8
 800a33e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	69db      	ldr	r3, [r3, #28]
 800a346:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d003      	beq.n	800a356 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	f000 f942 	bl	800a5d8 <HAL_TIM_IC_CaptureCallback>
 800a354:	e005      	b.n	800a362 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	f000 f934 	bl	800a5c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	f000 f945 	bl	800a5ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2200      	movs	r2, #0
 800a366:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	691b      	ldr	r3, [r3, #16]
 800a36e:	f003 0301 	and.w	r3, r3, #1
 800a372:	2b01      	cmp	r3, #1
 800a374:	d10e      	bne.n	800a394 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	68db      	ldr	r3, [r3, #12]
 800a37c:	f003 0301 	and.w	r3, r3, #1
 800a380:	2b01      	cmp	r3, #1
 800a382:	d107      	bne.n	800a394 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	f06f 0201 	mvn.w	r2, #1
 800a38c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	f7fa f940 	bl	8004614 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	691b      	ldr	r3, [r3, #16]
 800a39a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a39e:	2b80      	cmp	r3, #128	; 0x80
 800a3a0:	d10e      	bne.n	800a3c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	68db      	ldr	r3, [r3, #12]
 800a3a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3ac:	2b80      	cmp	r3, #128	; 0x80
 800a3ae:	d107      	bne.n	800a3c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a3b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a3ba:	6878      	ldr	r0, [r7, #4]
 800a3bc:	f000 faca 	bl	800a954 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	691b      	ldr	r3, [r3, #16]
 800a3c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3ce:	d10e      	bne.n	800a3ee <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	68db      	ldr	r3, [r3, #12]
 800a3d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3da:	2b80      	cmp	r3, #128	; 0x80
 800a3dc:	d107      	bne.n	800a3ee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a3e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	f000 fabd 	bl	800a968 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	691b      	ldr	r3, [r3, #16]
 800a3f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3f8:	2b40      	cmp	r3, #64	; 0x40
 800a3fa:	d10e      	bne.n	800a41a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	68db      	ldr	r3, [r3, #12]
 800a402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a406:	2b40      	cmp	r3, #64	; 0x40
 800a408:	d107      	bne.n	800a41a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a412:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a414:	6878      	ldr	r0, [r7, #4]
 800a416:	f000 f8f3 	bl	800a600 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	691b      	ldr	r3, [r3, #16]
 800a420:	f003 0320 	and.w	r3, r3, #32
 800a424:	2b20      	cmp	r3, #32
 800a426:	d10e      	bne.n	800a446 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	68db      	ldr	r3, [r3, #12]
 800a42e:	f003 0320 	and.w	r3, r3, #32
 800a432:	2b20      	cmp	r3, #32
 800a434:	d107      	bne.n	800a446 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	f06f 0220 	mvn.w	r2, #32
 800a43e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a440:	6878      	ldr	r0, [r7, #4]
 800a442:	f000 fa7d 	bl	800a940 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a446:	bf00      	nop
 800a448:	3708      	adds	r7, #8
 800a44a:	46bd      	mov	sp, r7
 800a44c:	bd80      	pop	{r7, pc}
	...

0800a450 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b084      	sub	sp, #16
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
 800a458:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a460:	2b01      	cmp	r3, #1
 800a462:	d101      	bne.n	800a468 <HAL_TIM_ConfigClockSource+0x18>
 800a464:	2302      	movs	r3, #2
 800a466:	e0a6      	b.n	800a5b6 <HAL_TIM_ConfigClockSource+0x166>
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2201      	movs	r2, #1
 800a46c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2202      	movs	r2, #2
 800a474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	689b      	ldr	r3, [r3, #8]
 800a47e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a480:	68fa      	ldr	r2, [r7, #12]
 800a482:	4b4f      	ldr	r3, [pc, #316]	; (800a5c0 <HAL_TIM_ConfigClockSource+0x170>)
 800a484:	4013      	ands	r3, r2
 800a486:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a48e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	68fa      	ldr	r2, [r7, #12]
 800a496:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	2b40      	cmp	r3, #64	; 0x40
 800a49e:	d067      	beq.n	800a570 <HAL_TIM_ConfigClockSource+0x120>
 800a4a0:	2b40      	cmp	r3, #64	; 0x40
 800a4a2:	d80b      	bhi.n	800a4bc <HAL_TIM_ConfigClockSource+0x6c>
 800a4a4:	2b10      	cmp	r3, #16
 800a4a6:	d073      	beq.n	800a590 <HAL_TIM_ConfigClockSource+0x140>
 800a4a8:	2b10      	cmp	r3, #16
 800a4aa:	d802      	bhi.n	800a4b2 <HAL_TIM_ConfigClockSource+0x62>
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d06f      	beq.n	800a590 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800a4b0:	e078      	b.n	800a5a4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a4b2:	2b20      	cmp	r3, #32
 800a4b4:	d06c      	beq.n	800a590 <HAL_TIM_ConfigClockSource+0x140>
 800a4b6:	2b30      	cmp	r3, #48	; 0x30
 800a4b8:	d06a      	beq.n	800a590 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800a4ba:	e073      	b.n	800a5a4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a4bc:	2b70      	cmp	r3, #112	; 0x70
 800a4be:	d00d      	beq.n	800a4dc <HAL_TIM_ConfigClockSource+0x8c>
 800a4c0:	2b70      	cmp	r3, #112	; 0x70
 800a4c2:	d804      	bhi.n	800a4ce <HAL_TIM_ConfigClockSource+0x7e>
 800a4c4:	2b50      	cmp	r3, #80	; 0x50
 800a4c6:	d033      	beq.n	800a530 <HAL_TIM_ConfigClockSource+0xe0>
 800a4c8:	2b60      	cmp	r3, #96	; 0x60
 800a4ca:	d041      	beq.n	800a550 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800a4cc:	e06a      	b.n	800a5a4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a4ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4d2:	d066      	beq.n	800a5a2 <HAL_TIM_ConfigClockSource+0x152>
 800a4d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a4d8:	d017      	beq.n	800a50a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800a4da:	e063      	b.n	800a5a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	6818      	ldr	r0, [r3, #0]
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	6899      	ldr	r1, [r3, #8]
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	685a      	ldr	r2, [r3, #4]
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	68db      	ldr	r3, [r3, #12]
 800a4ec:	f000 f9ac 	bl	800a848 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	689b      	ldr	r3, [r3, #8]
 800a4f6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a4fe:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	68fa      	ldr	r2, [r7, #12]
 800a506:	609a      	str	r2, [r3, #8]
      break;
 800a508:	e04c      	b.n	800a5a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	6818      	ldr	r0, [r3, #0]
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	6899      	ldr	r1, [r3, #8]
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	685a      	ldr	r2, [r3, #4]
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	68db      	ldr	r3, [r3, #12]
 800a51a:	f000 f995 	bl	800a848 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	689a      	ldr	r2, [r3, #8]
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a52c:	609a      	str	r2, [r3, #8]
      break;
 800a52e:	e039      	b.n	800a5a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	6818      	ldr	r0, [r3, #0]
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	6859      	ldr	r1, [r3, #4]
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	68db      	ldr	r3, [r3, #12]
 800a53c:	461a      	mov	r2, r3
 800a53e:	f000 f909 	bl	800a754 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	2150      	movs	r1, #80	; 0x50
 800a548:	4618      	mov	r0, r3
 800a54a:	f000 f962 	bl	800a812 <TIM_ITRx_SetConfig>
      break;
 800a54e:	e029      	b.n	800a5a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	6818      	ldr	r0, [r3, #0]
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	6859      	ldr	r1, [r3, #4]
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	68db      	ldr	r3, [r3, #12]
 800a55c:	461a      	mov	r2, r3
 800a55e:	f000 f928 	bl	800a7b2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	2160      	movs	r1, #96	; 0x60
 800a568:	4618      	mov	r0, r3
 800a56a:	f000 f952 	bl	800a812 <TIM_ITRx_SetConfig>
      break;
 800a56e:	e019      	b.n	800a5a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	6818      	ldr	r0, [r3, #0]
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	6859      	ldr	r1, [r3, #4]
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	68db      	ldr	r3, [r3, #12]
 800a57c:	461a      	mov	r2, r3
 800a57e:	f000 f8e9 	bl	800a754 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	2140      	movs	r1, #64	; 0x40
 800a588:	4618      	mov	r0, r3
 800a58a:	f000 f942 	bl	800a812 <TIM_ITRx_SetConfig>
      break;
 800a58e:	e009      	b.n	800a5a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681a      	ldr	r2, [r3, #0]
 800a594:	683b      	ldr	r3, [r7, #0]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	4619      	mov	r1, r3
 800a59a:	4610      	mov	r0, r2
 800a59c:	f000 f939 	bl	800a812 <TIM_ITRx_SetConfig>
      break;
 800a5a0:	e000      	b.n	800a5a4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800a5a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2201      	movs	r2, #1
 800a5a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a5b4:	2300      	movs	r3, #0
}
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	3710      	adds	r7, #16
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bd80      	pop	{r7, pc}
 800a5be:	bf00      	nop
 800a5c0:	fffeff88 	.word	0xfffeff88

0800a5c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a5c4:	b480      	push	{r7}
 800a5c6:	b083      	sub	sp, #12
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a5cc:	bf00      	nop
 800a5ce:	370c      	adds	r7, #12
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d6:	4770      	bx	lr

0800a5d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a5d8:	b480      	push	{r7}
 800a5da:	b083      	sub	sp, #12
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a5e0:	bf00      	nop
 800a5e2:	370c      	adds	r7, #12
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ea:	4770      	bx	lr

0800a5ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	b083      	sub	sp, #12
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a5f4:	bf00      	nop
 800a5f6:	370c      	adds	r7, #12
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fe:	4770      	bx	lr

0800a600 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a600:	b480      	push	{r7}
 800a602:	b083      	sub	sp, #12
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a608:	bf00      	nop
 800a60a:	370c      	adds	r7, #12
 800a60c:	46bd      	mov	sp, r7
 800a60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a612:	4770      	bx	lr

0800a614 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a614:	b480      	push	{r7}
 800a616:	b085      	sub	sp, #20
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
 800a61c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	4a40      	ldr	r2, [pc, #256]	; (800a728 <TIM_Base_SetConfig+0x114>)
 800a628:	4293      	cmp	r3, r2
 800a62a:	d013      	beq.n	800a654 <TIM_Base_SetConfig+0x40>
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a632:	d00f      	beq.n	800a654 <TIM_Base_SetConfig+0x40>
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	4a3d      	ldr	r2, [pc, #244]	; (800a72c <TIM_Base_SetConfig+0x118>)
 800a638:	4293      	cmp	r3, r2
 800a63a:	d00b      	beq.n	800a654 <TIM_Base_SetConfig+0x40>
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	4a3c      	ldr	r2, [pc, #240]	; (800a730 <TIM_Base_SetConfig+0x11c>)
 800a640:	4293      	cmp	r3, r2
 800a642:	d007      	beq.n	800a654 <TIM_Base_SetConfig+0x40>
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	4a3b      	ldr	r2, [pc, #236]	; (800a734 <TIM_Base_SetConfig+0x120>)
 800a648:	4293      	cmp	r3, r2
 800a64a:	d003      	beq.n	800a654 <TIM_Base_SetConfig+0x40>
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	4a3a      	ldr	r2, [pc, #232]	; (800a738 <TIM_Base_SetConfig+0x124>)
 800a650:	4293      	cmp	r3, r2
 800a652:	d108      	bne.n	800a666 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a65a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	685b      	ldr	r3, [r3, #4]
 800a660:	68fa      	ldr	r2, [r7, #12]
 800a662:	4313      	orrs	r3, r2
 800a664:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	4a2f      	ldr	r2, [pc, #188]	; (800a728 <TIM_Base_SetConfig+0x114>)
 800a66a:	4293      	cmp	r3, r2
 800a66c:	d02b      	beq.n	800a6c6 <TIM_Base_SetConfig+0xb2>
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a674:	d027      	beq.n	800a6c6 <TIM_Base_SetConfig+0xb2>
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	4a2c      	ldr	r2, [pc, #176]	; (800a72c <TIM_Base_SetConfig+0x118>)
 800a67a:	4293      	cmp	r3, r2
 800a67c:	d023      	beq.n	800a6c6 <TIM_Base_SetConfig+0xb2>
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	4a2b      	ldr	r2, [pc, #172]	; (800a730 <TIM_Base_SetConfig+0x11c>)
 800a682:	4293      	cmp	r3, r2
 800a684:	d01f      	beq.n	800a6c6 <TIM_Base_SetConfig+0xb2>
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	4a2a      	ldr	r2, [pc, #168]	; (800a734 <TIM_Base_SetConfig+0x120>)
 800a68a:	4293      	cmp	r3, r2
 800a68c:	d01b      	beq.n	800a6c6 <TIM_Base_SetConfig+0xb2>
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	4a29      	ldr	r2, [pc, #164]	; (800a738 <TIM_Base_SetConfig+0x124>)
 800a692:	4293      	cmp	r3, r2
 800a694:	d017      	beq.n	800a6c6 <TIM_Base_SetConfig+0xb2>
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	4a28      	ldr	r2, [pc, #160]	; (800a73c <TIM_Base_SetConfig+0x128>)
 800a69a:	4293      	cmp	r3, r2
 800a69c:	d013      	beq.n	800a6c6 <TIM_Base_SetConfig+0xb2>
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	4a27      	ldr	r2, [pc, #156]	; (800a740 <TIM_Base_SetConfig+0x12c>)
 800a6a2:	4293      	cmp	r3, r2
 800a6a4:	d00f      	beq.n	800a6c6 <TIM_Base_SetConfig+0xb2>
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	4a26      	ldr	r2, [pc, #152]	; (800a744 <TIM_Base_SetConfig+0x130>)
 800a6aa:	4293      	cmp	r3, r2
 800a6ac:	d00b      	beq.n	800a6c6 <TIM_Base_SetConfig+0xb2>
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	4a25      	ldr	r2, [pc, #148]	; (800a748 <TIM_Base_SetConfig+0x134>)
 800a6b2:	4293      	cmp	r3, r2
 800a6b4:	d007      	beq.n	800a6c6 <TIM_Base_SetConfig+0xb2>
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	4a24      	ldr	r2, [pc, #144]	; (800a74c <TIM_Base_SetConfig+0x138>)
 800a6ba:	4293      	cmp	r3, r2
 800a6bc:	d003      	beq.n	800a6c6 <TIM_Base_SetConfig+0xb2>
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	4a23      	ldr	r2, [pc, #140]	; (800a750 <TIM_Base_SetConfig+0x13c>)
 800a6c2:	4293      	cmp	r3, r2
 800a6c4:	d108      	bne.n	800a6d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a6cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	68db      	ldr	r3, [r3, #12]
 800a6d2:	68fa      	ldr	r2, [r7, #12]
 800a6d4:	4313      	orrs	r3, r2
 800a6d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	695b      	ldr	r3, [r3, #20]
 800a6e2:	4313      	orrs	r3, r2
 800a6e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	68fa      	ldr	r2, [r7, #12]
 800a6ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	689a      	ldr	r2, [r3, #8]
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	681a      	ldr	r2, [r3, #0]
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	4a0a      	ldr	r2, [pc, #40]	; (800a728 <TIM_Base_SetConfig+0x114>)
 800a700:	4293      	cmp	r3, r2
 800a702:	d003      	beq.n	800a70c <TIM_Base_SetConfig+0xf8>
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	4a0c      	ldr	r2, [pc, #48]	; (800a738 <TIM_Base_SetConfig+0x124>)
 800a708:	4293      	cmp	r3, r2
 800a70a:	d103      	bne.n	800a714 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	691a      	ldr	r2, [r3, #16]
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	2201      	movs	r2, #1
 800a718:	615a      	str	r2, [r3, #20]
}
 800a71a:	bf00      	nop
 800a71c:	3714      	adds	r7, #20
 800a71e:	46bd      	mov	sp, r7
 800a720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a724:	4770      	bx	lr
 800a726:	bf00      	nop
 800a728:	40010000 	.word	0x40010000
 800a72c:	40000400 	.word	0x40000400
 800a730:	40000800 	.word	0x40000800
 800a734:	40000c00 	.word	0x40000c00
 800a738:	40010400 	.word	0x40010400
 800a73c:	40014000 	.word	0x40014000
 800a740:	40014400 	.word	0x40014400
 800a744:	40014800 	.word	0x40014800
 800a748:	40001800 	.word	0x40001800
 800a74c:	40001c00 	.word	0x40001c00
 800a750:	40002000 	.word	0x40002000

0800a754 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a754:	b480      	push	{r7}
 800a756:	b087      	sub	sp, #28
 800a758:	af00      	add	r7, sp, #0
 800a75a:	60f8      	str	r0, [r7, #12]
 800a75c:	60b9      	str	r1, [r7, #8]
 800a75e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	6a1b      	ldr	r3, [r3, #32]
 800a764:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	6a1b      	ldr	r3, [r3, #32]
 800a76a:	f023 0201 	bic.w	r2, r3, #1
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	699b      	ldr	r3, [r3, #24]
 800a776:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a778:	693b      	ldr	r3, [r7, #16]
 800a77a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a77e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	011b      	lsls	r3, r3, #4
 800a784:	693a      	ldr	r2, [r7, #16]
 800a786:	4313      	orrs	r3, r2
 800a788:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a78a:	697b      	ldr	r3, [r7, #20]
 800a78c:	f023 030a 	bic.w	r3, r3, #10
 800a790:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a792:	697a      	ldr	r2, [r7, #20]
 800a794:	68bb      	ldr	r3, [r7, #8]
 800a796:	4313      	orrs	r3, r2
 800a798:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	693a      	ldr	r2, [r7, #16]
 800a79e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	697a      	ldr	r2, [r7, #20]
 800a7a4:	621a      	str	r2, [r3, #32]
}
 800a7a6:	bf00      	nop
 800a7a8:	371c      	adds	r7, #28
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b0:	4770      	bx	lr

0800a7b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a7b2:	b480      	push	{r7}
 800a7b4:	b087      	sub	sp, #28
 800a7b6:	af00      	add	r7, sp, #0
 800a7b8:	60f8      	str	r0, [r7, #12]
 800a7ba:	60b9      	str	r1, [r7, #8]
 800a7bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	6a1b      	ldr	r3, [r3, #32]
 800a7c2:	f023 0210 	bic.w	r2, r3, #16
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	699b      	ldr	r3, [r3, #24]
 800a7ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	6a1b      	ldr	r3, [r3, #32]
 800a7d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a7d6:	697b      	ldr	r3, [r7, #20]
 800a7d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a7dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	031b      	lsls	r3, r3, #12
 800a7e2:	697a      	ldr	r2, [r7, #20]
 800a7e4:	4313      	orrs	r3, r2
 800a7e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a7e8:	693b      	ldr	r3, [r7, #16]
 800a7ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a7ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a7f0:	68bb      	ldr	r3, [r7, #8]
 800a7f2:	011b      	lsls	r3, r3, #4
 800a7f4:	693a      	ldr	r2, [r7, #16]
 800a7f6:	4313      	orrs	r3, r2
 800a7f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	697a      	ldr	r2, [r7, #20]
 800a7fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	693a      	ldr	r2, [r7, #16]
 800a804:	621a      	str	r2, [r3, #32]
}
 800a806:	bf00      	nop
 800a808:	371c      	adds	r7, #28
 800a80a:	46bd      	mov	sp, r7
 800a80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a810:	4770      	bx	lr

0800a812 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a812:	b480      	push	{r7}
 800a814:	b085      	sub	sp, #20
 800a816:	af00      	add	r7, sp, #0
 800a818:	6078      	str	r0, [r7, #4]
 800a81a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	689b      	ldr	r3, [r3, #8]
 800a820:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a828:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a82a:	683a      	ldr	r2, [r7, #0]
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	4313      	orrs	r3, r2
 800a830:	f043 0307 	orr.w	r3, r3, #7
 800a834:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	68fa      	ldr	r2, [r7, #12]
 800a83a:	609a      	str	r2, [r3, #8]
}
 800a83c:	bf00      	nop
 800a83e:	3714      	adds	r7, #20
 800a840:	46bd      	mov	sp, r7
 800a842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a846:	4770      	bx	lr

0800a848 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a848:	b480      	push	{r7}
 800a84a:	b087      	sub	sp, #28
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	60f8      	str	r0, [r7, #12]
 800a850:	60b9      	str	r1, [r7, #8]
 800a852:	607a      	str	r2, [r7, #4]
 800a854:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	689b      	ldr	r3, [r3, #8]
 800a85a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a85c:	697b      	ldr	r3, [r7, #20]
 800a85e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a862:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	021a      	lsls	r2, r3, #8
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	431a      	orrs	r2, r3
 800a86c:	68bb      	ldr	r3, [r7, #8]
 800a86e:	4313      	orrs	r3, r2
 800a870:	697a      	ldr	r2, [r7, #20]
 800a872:	4313      	orrs	r3, r2
 800a874:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	697a      	ldr	r2, [r7, #20]
 800a87a:	609a      	str	r2, [r3, #8]
}
 800a87c:	bf00      	nop
 800a87e:	371c      	adds	r7, #28
 800a880:	46bd      	mov	sp, r7
 800a882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a886:	4770      	bx	lr

0800a888 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a888:	b480      	push	{r7}
 800a88a:	b085      	sub	sp, #20
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
 800a890:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a898:	2b01      	cmp	r3, #1
 800a89a:	d101      	bne.n	800a8a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a89c:	2302      	movs	r3, #2
 800a89e:	e045      	b.n	800a92c <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2201      	movs	r2, #1
 800a8a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2202      	movs	r2, #2
 800a8ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	685b      	ldr	r3, [r3, #4]
 800a8b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	689b      	ldr	r3, [r3, #8]
 800a8be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	4a1c      	ldr	r2, [pc, #112]	; (800a938 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800a8c6:	4293      	cmp	r3, r2
 800a8c8:	d004      	beq.n	800a8d4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	4a1b      	ldr	r2, [pc, #108]	; (800a93c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800a8d0:	4293      	cmp	r3, r2
 800a8d2:	d108      	bne.n	800a8e6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a8da:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	685b      	ldr	r3, [r3, #4]
 800a8e0:	68fa      	ldr	r2, [r7, #12]
 800a8e2:	4313      	orrs	r3, r2
 800a8e4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8ec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	68fa      	ldr	r2, [r7, #12]
 800a8f4:	4313      	orrs	r3, r2
 800a8f6:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800a8f8:	68bb      	ldr	r3, [r7, #8]
 800a8fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a8fe:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	689b      	ldr	r3, [r3, #8]
 800a904:	68ba      	ldr	r2, [r7, #8]
 800a906:	4313      	orrs	r3, r2
 800a908:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	68fa      	ldr	r2, [r7, #12]
 800a910:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	68ba      	ldr	r2, [r7, #8]
 800a918:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2201      	movs	r2, #1
 800a91e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	2200      	movs	r2, #0
 800a926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a92a:	2300      	movs	r3, #0
}
 800a92c:	4618      	mov	r0, r3
 800a92e:	3714      	adds	r7, #20
 800a930:	46bd      	mov	sp, r7
 800a932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a936:	4770      	bx	lr
 800a938:	40010000 	.word	0x40010000
 800a93c:	40010400 	.word	0x40010400

0800a940 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a940:	b480      	push	{r7}
 800a942:	b083      	sub	sp, #12
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a948:	bf00      	nop
 800a94a:	370c      	adds	r7, #12
 800a94c:	46bd      	mov	sp, r7
 800a94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a952:	4770      	bx	lr

0800a954 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a954:	b480      	push	{r7}
 800a956:	b083      	sub	sp, #12
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a95c:	bf00      	nop
 800a95e:	370c      	adds	r7, #12
 800a960:	46bd      	mov	sp, r7
 800a962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a966:	4770      	bx	lr

0800a968 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a968:	b480      	push	{r7}
 800a96a:	b083      	sub	sp, #12
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a970:	bf00      	nop
 800a972:	370c      	adds	r7, #12
 800a974:	46bd      	mov	sp, r7
 800a976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97a:	4770      	bx	lr

0800a97c <__errno>:
 800a97c:	4b01      	ldr	r3, [pc, #4]	; (800a984 <__errno+0x8>)
 800a97e:	6818      	ldr	r0, [r3, #0]
 800a980:	4770      	bx	lr
 800a982:	bf00      	nop
 800a984:	20000330 	.word	0x20000330

0800a988 <__libc_init_array>:
 800a988:	b570      	push	{r4, r5, r6, lr}
 800a98a:	4e0d      	ldr	r6, [pc, #52]	; (800a9c0 <__libc_init_array+0x38>)
 800a98c:	4c0d      	ldr	r4, [pc, #52]	; (800a9c4 <__libc_init_array+0x3c>)
 800a98e:	1ba4      	subs	r4, r4, r6
 800a990:	10a4      	asrs	r4, r4, #2
 800a992:	2500      	movs	r5, #0
 800a994:	42a5      	cmp	r5, r4
 800a996:	d109      	bne.n	800a9ac <__libc_init_array+0x24>
 800a998:	4e0b      	ldr	r6, [pc, #44]	; (800a9c8 <__libc_init_array+0x40>)
 800a99a:	4c0c      	ldr	r4, [pc, #48]	; (800a9cc <__libc_init_array+0x44>)
 800a99c:	f000 f8b8 	bl	800ab10 <_init>
 800a9a0:	1ba4      	subs	r4, r4, r6
 800a9a2:	10a4      	asrs	r4, r4, #2
 800a9a4:	2500      	movs	r5, #0
 800a9a6:	42a5      	cmp	r5, r4
 800a9a8:	d105      	bne.n	800a9b6 <__libc_init_array+0x2e>
 800a9aa:	bd70      	pop	{r4, r5, r6, pc}
 800a9ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a9b0:	4798      	blx	r3
 800a9b2:	3501      	adds	r5, #1
 800a9b4:	e7ee      	b.n	800a994 <__libc_init_array+0xc>
 800a9b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a9ba:	4798      	blx	r3
 800a9bc:	3501      	adds	r5, #1
 800a9be:	e7f2      	b.n	800a9a6 <__libc_init_array+0x1e>
 800a9c0:	0800b204 	.word	0x0800b204
 800a9c4:	0800b204 	.word	0x0800b204
 800a9c8:	0800b204 	.word	0x0800b204
 800a9cc:	0800b208 	.word	0x0800b208

0800a9d0 <memset>:
 800a9d0:	4402      	add	r2, r0
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	4293      	cmp	r3, r2
 800a9d6:	d100      	bne.n	800a9da <memset+0xa>
 800a9d8:	4770      	bx	lr
 800a9da:	f803 1b01 	strb.w	r1, [r3], #1
 800a9de:	e7f9      	b.n	800a9d4 <memset+0x4>

0800a9e0 <srand>:
 800a9e0:	b538      	push	{r3, r4, r5, lr}
 800a9e2:	4b0d      	ldr	r3, [pc, #52]	; (800aa18 <srand+0x38>)
 800a9e4:	681c      	ldr	r4, [r3, #0]
 800a9e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a9e8:	4605      	mov	r5, r0
 800a9ea:	b97b      	cbnz	r3, 800aa0c <srand+0x2c>
 800a9ec:	2018      	movs	r0, #24
 800a9ee:	f000 f81b 	bl	800aa28 <malloc>
 800a9f2:	4a0a      	ldr	r2, [pc, #40]	; (800aa1c <srand+0x3c>)
 800a9f4:	4b0a      	ldr	r3, [pc, #40]	; (800aa20 <srand+0x40>)
 800a9f6:	63a0      	str	r0, [r4, #56]	; 0x38
 800a9f8:	e9c0 2300 	strd	r2, r3, [r0]
 800a9fc:	4b09      	ldr	r3, [pc, #36]	; (800aa24 <srand+0x44>)
 800a9fe:	6083      	str	r3, [r0, #8]
 800aa00:	230b      	movs	r3, #11
 800aa02:	8183      	strh	r3, [r0, #12]
 800aa04:	2201      	movs	r2, #1
 800aa06:	2300      	movs	r3, #0
 800aa08:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800aa0c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800aa0e:	2200      	movs	r2, #0
 800aa10:	611d      	str	r5, [r3, #16]
 800aa12:	615a      	str	r2, [r3, #20]
 800aa14:	bd38      	pop	{r3, r4, r5, pc}
 800aa16:	bf00      	nop
 800aa18:	20000330 	.word	0x20000330
 800aa1c:	abcd330e 	.word	0xabcd330e
 800aa20:	e66d1234 	.word	0xe66d1234
 800aa24:	0005deec 	.word	0x0005deec

0800aa28 <malloc>:
 800aa28:	4b02      	ldr	r3, [pc, #8]	; (800aa34 <malloc+0xc>)
 800aa2a:	4601      	mov	r1, r0
 800aa2c:	6818      	ldr	r0, [r3, #0]
 800aa2e:	f000 b803 	b.w	800aa38 <_malloc_r>
 800aa32:	bf00      	nop
 800aa34:	20000330 	.word	0x20000330

0800aa38 <_malloc_r>:
 800aa38:	b570      	push	{r4, r5, r6, lr}
 800aa3a:	1ccd      	adds	r5, r1, #3
 800aa3c:	f025 0503 	bic.w	r5, r5, #3
 800aa40:	3508      	adds	r5, #8
 800aa42:	2d0c      	cmp	r5, #12
 800aa44:	bf38      	it	cc
 800aa46:	250c      	movcc	r5, #12
 800aa48:	2d00      	cmp	r5, #0
 800aa4a:	4606      	mov	r6, r0
 800aa4c:	db01      	blt.n	800aa52 <_malloc_r+0x1a>
 800aa4e:	42a9      	cmp	r1, r5
 800aa50:	d903      	bls.n	800aa5a <_malloc_r+0x22>
 800aa52:	230c      	movs	r3, #12
 800aa54:	6033      	str	r3, [r6, #0]
 800aa56:	2000      	movs	r0, #0
 800aa58:	bd70      	pop	{r4, r5, r6, pc}
 800aa5a:	f000 f857 	bl	800ab0c <__malloc_lock>
 800aa5e:	4a21      	ldr	r2, [pc, #132]	; (800aae4 <_malloc_r+0xac>)
 800aa60:	6814      	ldr	r4, [r2, #0]
 800aa62:	4621      	mov	r1, r4
 800aa64:	b991      	cbnz	r1, 800aa8c <_malloc_r+0x54>
 800aa66:	4c20      	ldr	r4, [pc, #128]	; (800aae8 <_malloc_r+0xb0>)
 800aa68:	6823      	ldr	r3, [r4, #0]
 800aa6a:	b91b      	cbnz	r3, 800aa74 <_malloc_r+0x3c>
 800aa6c:	4630      	mov	r0, r6
 800aa6e:	f000 f83d 	bl	800aaec <_sbrk_r>
 800aa72:	6020      	str	r0, [r4, #0]
 800aa74:	4629      	mov	r1, r5
 800aa76:	4630      	mov	r0, r6
 800aa78:	f000 f838 	bl	800aaec <_sbrk_r>
 800aa7c:	1c43      	adds	r3, r0, #1
 800aa7e:	d124      	bne.n	800aaca <_malloc_r+0x92>
 800aa80:	230c      	movs	r3, #12
 800aa82:	6033      	str	r3, [r6, #0]
 800aa84:	4630      	mov	r0, r6
 800aa86:	f000 f842 	bl	800ab0e <__malloc_unlock>
 800aa8a:	e7e4      	b.n	800aa56 <_malloc_r+0x1e>
 800aa8c:	680b      	ldr	r3, [r1, #0]
 800aa8e:	1b5b      	subs	r3, r3, r5
 800aa90:	d418      	bmi.n	800aac4 <_malloc_r+0x8c>
 800aa92:	2b0b      	cmp	r3, #11
 800aa94:	d90f      	bls.n	800aab6 <_malloc_r+0x7e>
 800aa96:	600b      	str	r3, [r1, #0]
 800aa98:	50cd      	str	r5, [r1, r3]
 800aa9a:	18cc      	adds	r4, r1, r3
 800aa9c:	4630      	mov	r0, r6
 800aa9e:	f000 f836 	bl	800ab0e <__malloc_unlock>
 800aaa2:	f104 000b 	add.w	r0, r4, #11
 800aaa6:	1d23      	adds	r3, r4, #4
 800aaa8:	f020 0007 	bic.w	r0, r0, #7
 800aaac:	1ac3      	subs	r3, r0, r3
 800aaae:	d0d3      	beq.n	800aa58 <_malloc_r+0x20>
 800aab0:	425a      	negs	r2, r3
 800aab2:	50e2      	str	r2, [r4, r3]
 800aab4:	e7d0      	b.n	800aa58 <_malloc_r+0x20>
 800aab6:	428c      	cmp	r4, r1
 800aab8:	684b      	ldr	r3, [r1, #4]
 800aaba:	bf16      	itet	ne
 800aabc:	6063      	strne	r3, [r4, #4]
 800aabe:	6013      	streq	r3, [r2, #0]
 800aac0:	460c      	movne	r4, r1
 800aac2:	e7eb      	b.n	800aa9c <_malloc_r+0x64>
 800aac4:	460c      	mov	r4, r1
 800aac6:	6849      	ldr	r1, [r1, #4]
 800aac8:	e7cc      	b.n	800aa64 <_malloc_r+0x2c>
 800aaca:	1cc4      	adds	r4, r0, #3
 800aacc:	f024 0403 	bic.w	r4, r4, #3
 800aad0:	42a0      	cmp	r0, r4
 800aad2:	d005      	beq.n	800aae0 <_malloc_r+0xa8>
 800aad4:	1a21      	subs	r1, r4, r0
 800aad6:	4630      	mov	r0, r6
 800aad8:	f000 f808 	bl	800aaec <_sbrk_r>
 800aadc:	3001      	adds	r0, #1
 800aade:	d0cf      	beq.n	800aa80 <_malloc_r+0x48>
 800aae0:	6025      	str	r5, [r4, #0]
 800aae2:	e7db      	b.n	800aa9c <_malloc_r+0x64>
 800aae4:	200003f4 	.word	0x200003f4
 800aae8:	200003f8 	.word	0x200003f8

0800aaec <_sbrk_r>:
 800aaec:	b538      	push	{r3, r4, r5, lr}
 800aaee:	4c06      	ldr	r4, [pc, #24]	; (800ab08 <_sbrk_r+0x1c>)
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	4605      	mov	r5, r0
 800aaf4:	4608      	mov	r0, r1
 800aaf6:	6023      	str	r3, [r4, #0]
 800aaf8:	f7fa febc 	bl	8005874 <_sbrk>
 800aafc:	1c43      	adds	r3, r0, #1
 800aafe:	d102      	bne.n	800ab06 <_sbrk_r+0x1a>
 800ab00:	6823      	ldr	r3, [r4, #0]
 800ab02:	b103      	cbz	r3, 800ab06 <_sbrk_r+0x1a>
 800ab04:	602b      	str	r3, [r5, #0]
 800ab06:	bd38      	pop	{r3, r4, r5, pc}
 800ab08:	200020e0 	.word	0x200020e0

0800ab0c <__malloc_lock>:
 800ab0c:	4770      	bx	lr

0800ab0e <__malloc_unlock>:
 800ab0e:	4770      	bx	lr

0800ab10 <_init>:
 800ab10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab12:	bf00      	nop
 800ab14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab16:	bc08      	pop	{r3}
 800ab18:	469e      	mov	lr, r3
 800ab1a:	4770      	bx	lr

0800ab1c <_fini>:
 800ab1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab1e:	bf00      	nop
 800ab20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab22:	bc08      	pop	{r3}
 800ab24:	469e      	mov	lr, r3
 800ab26:	4770      	bx	lr
